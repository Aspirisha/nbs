// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.0
// source: cloud/blockstore/libs/storage/protos/disk.proto

package protos

import (
	protos "github.com/ydb-platform/nbs/cloud/blockstore/public/api/protos"
	protos1 "github.com/ydb-platform/nbs/cloud/storage/core/protos"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EAgentState int32

const (
	EAgentState_AGENT_STATE_ONLINE      EAgentState = 0
	EAgentState_AGENT_STATE_WARNING     EAgentState = 1
	EAgentState_AGENT_STATE_UNAVAILABLE EAgentState = 2
)

// Enum value maps for EAgentState.
var (
	EAgentState_name = map[int32]string{
		0: "AGENT_STATE_ONLINE",
		1: "AGENT_STATE_WARNING",
		2: "AGENT_STATE_UNAVAILABLE",
	}
	EAgentState_value = map[string]int32{
		"AGENT_STATE_ONLINE":      0,
		"AGENT_STATE_WARNING":     1,
		"AGENT_STATE_UNAVAILABLE": 2,
	}
)

func (x EAgentState) Enum() *EAgentState {
	p := new(EAgentState)
	*p = x
	return p
}

func (x EAgentState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAgentState) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_enumTypes[0].Descriptor()
}

func (EAgentState) Type() protoreflect.EnumType {
	return &file_cloud_blockstore_libs_storage_protos_disk_proto_enumTypes[0]
}

func (x EAgentState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EAgentState.Descriptor instead.
func (EAgentState) EnumDescriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{0}
}

type EDeviceState int32

const (
	EDeviceState_DEVICE_STATE_ONLINE  EDeviceState = 0
	EDeviceState_DEVICE_STATE_WARNING EDeviceState = 1
	EDeviceState_DEVICE_STATE_ERROR   EDeviceState = 2
)

// Enum value maps for EDeviceState.
var (
	EDeviceState_name = map[int32]string{
		0: "DEVICE_STATE_ONLINE",
		1: "DEVICE_STATE_WARNING",
		2: "DEVICE_STATE_ERROR",
	}
	EDeviceState_value = map[string]int32{
		"DEVICE_STATE_ONLINE":  0,
		"DEVICE_STATE_WARNING": 1,
		"DEVICE_STATE_ERROR":   2,
	}
)

func (x EDeviceState) Enum() *EDeviceState {
	p := new(EDeviceState)
	*p = x
	return p
}

func (x EDeviceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDeviceState) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_enumTypes[1].Descriptor()
}

func (EDeviceState) Type() protoreflect.EnumType {
	return &file_cloud_blockstore_libs_storage_protos_disk_proto_enumTypes[1]
}

func (x EDeviceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EDeviceState.Descriptor instead.
func (EDeviceState) EnumDescriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{1}
}

type ECheckpointState int32

const (
	ECheckpointState_CHECKPOINT_STATE_CREATING ECheckpointState = 0
	ECheckpointState_CHECKPOINT_STATE_OK       ECheckpointState = 1
	ECheckpointState_CHECKPOINT_STATE_ERROR    ECheckpointState = 2
)

// Enum value maps for ECheckpointState.
var (
	ECheckpointState_name = map[int32]string{
		0: "CHECKPOINT_STATE_CREATING",
		1: "CHECKPOINT_STATE_OK",
		2: "CHECKPOINT_STATE_ERROR",
	}
	ECheckpointState_value = map[string]int32{
		"CHECKPOINT_STATE_CREATING": 0,
		"CHECKPOINT_STATE_OK":       1,
		"CHECKPOINT_STATE_ERROR":    2,
	}
)

func (x ECheckpointState) Enum() *ECheckpointState {
	p := new(ECheckpointState)
	*p = x
	return p
}

func (x ECheckpointState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECheckpointState) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_enumTypes[2].Descriptor()
}

func (ECheckpointState) Type() protoreflect.EnumType {
	return &file_cloud_blockstore_libs_storage_protos_disk_proto_enumTypes[2]
}

func (x ECheckpointState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ECheckpointState.Descriptor instead.
func (ECheckpointState) EnumDescriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{2}
}

// Mean time between failures.
type TMeanTimeBetweenFailures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Work time in seconds.
	WorkTime uint64 `protobuf:"varint,1,opt,name=WorkTime,proto3" json:"WorkTime,omitempty"`
	// Number of transitions to broken state.
	BrokenCount uint64 `protobuf:"varint,2,opt,name=BrokenCount,proto3" json:"BrokenCount,omitempty"`
}

func (x *TMeanTimeBetweenFailures) Reset() {
	*x = TMeanTimeBetweenFailures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TMeanTimeBetweenFailures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TMeanTimeBetweenFailures) ProtoMessage() {}

func (x *TMeanTimeBetweenFailures) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TMeanTimeBetweenFailures.ProtoReflect.Descriptor instead.
func (*TMeanTimeBetweenFailures) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{0}
}

func (x *TMeanTimeBetweenFailures) GetWorkTime() uint64 {
	if x != nil {
		return x.WorkTime
	}
	return 0
}

func (x *TMeanTimeBetweenFailures) GetBrokenCount() uint64 {
	if x != nil {
		return x.BrokenCount
	}
	return 0
}

type TAgentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node that agent is running on.
	NodeId uint32 `protobuf:"varint,1,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	// Devices attached to the agent.
	Devices []*TDeviceConfig `protobuf:"bytes,2,rep,name=Devices,proto3" json:"Devices,omitempty"`
	// Disk Agent Id which is used for registration in Disk registry.
	AgentId string `protobuf:"bytes,3,opt,name=AgentId,proto3" json:"AgentId,omitempty"`
	// Current state of the Disk Agent
	State EAgentState `protobuf:"varint,4,opt,name=State,proto3,enum=NCloud.NBlockStore.NProto.EAgentState" json:"State,omitempty"`
	// Timestamp when state has been changed (in microseconds)
	StateTs uint64 `protobuf:"varint,5,opt,name=StateTs,proto3" json:"StateTs,omitempty"`
	// Timestamp when CMS requested host shutdown (in microseconds)
	CmsTs uint64 `protobuf:"varint,6,opt,name=CmsTs,proto3" json:"CmsTs,omitempty"`
	// Agent generation.
	SeqNumber uint64 `protobuf:"varint,7,opt,name=SeqNumber,proto3" json:"SeqNumber,omitempty"`
	// Dedicated process flag.
	DedicatedDiskAgent bool `protobuf:"varint,8,opt,name=DedicatedDiskAgent,proto3" json:"DedicatedDiskAgent,omitempty"`
	// Reason for agent state.
	StateMessage string `protobuf:"bytes,9,opt,name=StateMessage,proto3" json:"StateMessage,omitempty"`
	// Timestamp of the last transition to available state (in seconds)..
	WorkTs uint64 `protobuf:"varint,10,opt,name=WorkTs,proto3" json:"WorkTs,omitempty"`
	// Mean time between failures.
	TimeBetweenFailures *TMeanTimeBetweenFailures `protobuf:"bytes,11,opt,name=TimeBetweenFailures,proto3" json:"TimeBetweenFailures,omitempty"`
	// Unallowed devices attached to the agent.
	UnknownDevices []*TDeviceConfig `protobuf:"bytes,12,rep,name=UnknownDevices,proto3" json:"UnknownDevices,omitempty"`
}

func (x *TAgentConfig) Reset() {
	*x = TAgentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAgentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAgentConfig) ProtoMessage() {}

func (x *TAgentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAgentConfig.ProtoReflect.Descriptor instead.
func (*TAgentConfig) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{1}
}

func (x *TAgentConfig) GetNodeId() uint32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *TAgentConfig) GetDevices() []*TDeviceConfig {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *TAgentConfig) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *TAgentConfig) GetState() EAgentState {
	if x != nil {
		return x.State
	}
	return EAgentState_AGENT_STATE_ONLINE
}

func (x *TAgentConfig) GetStateTs() uint64 {
	if x != nil {
		return x.StateTs
	}
	return 0
}

func (x *TAgentConfig) GetCmsTs() uint64 {
	if x != nil {
		return x.CmsTs
	}
	return 0
}

func (x *TAgentConfig) GetSeqNumber() uint64 {
	if x != nil {
		return x.SeqNumber
	}
	return 0
}

func (x *TAgentConfig) GetDedicatedDiskAgent() bool {
	if x != nil {
		return x.DedicatedDiskAgent
	}
	return false
}

func (x *TAgentConfig) GetStateMessage() string {
	if x != nil {
		return x.StateMessage
	}
	return ""
}

func (x *TAgentConfig) GetWorkTs() uint64 {
	if x != nil {
		return x.WorkTs
	}
	return 0
}

func (x *TAgentConfig) GetTimeBetweenFailures() *TMeanTimeBetweenFailures {
	if x != nil {
		return x.TimeBetweenFailures
	}
	return nil
}

func (x *TAgentConfig) GetUnknownDevices() []*TDeviceConfig {
	if x != nil {
		return x.UnknownDevices
	}
	return nil
}

type TDiskSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label of volume.
	DiskId string `protobuf:"bytes,1,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Client identifier.
	ClientId string `protobuf:"bytes,2,opt,name=ClientId,proto3" json:"ClientId,omitempty"`
	// Is session acquisition in progress.
	AcquireInProgress bool `protobuf:"varint,3,opt,name=AcquireInProgress,proto3" json:"AcquireInProgress,omitempty"`
}

func (x *TDiskSession) Reset() {
	*x = TDiskSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDiskSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDiskSession) ProtoMessage() {}

func (x *TDiskSession) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDiskSession.ProtoReflect.Descriptor instead.
func (*TDiskSession) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{2}
}

func (x *TDiskSession) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TDiskSession) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *TDiskSession) GetAcquireInProgress() bool {
	if x != nil {
		return x.AcquireInProgress
	}
	return false
}

type TDeviceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device name.
	DeviceName string `protobuf:"bytes,1,opt,name=DeviceName,proto3" json:"DeviceName,omitempty"`
	// Device identifier.
	DeviceUUID string `protobuf:"bytes,2,opt,name=DeviceUUID,proto3" json:"DeviceUUID,omitempty"`
	// Device blocks size in bytes.
	BlockSize uint32 `protobuf:"varint,3,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`
	// Number of total device blocks available (may be adjusted by DR).
	BlocksCount uint64 `protobuf:"varint,4,opt,name=BlocksCount,proto3" json:"BlocksCount,omitempty"`
	// NVMe-oF transport identifier.
	TransportId string `protobuf:"bytes,5,opt,name=TransportId,proto3" json:"TransportId,omitempty"`
	// Node id of the host where this device is located.
	NodeId uint32 `protobuf:"varint,6,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	// The rack where this device is located.
	Rack string `protobuf:"bytes,7,opt,name=Rack,proto3" json:"Rack,omitempty"`
	// Current state of the device.
	State EDeviceState `protobuf:"varint,8,opt,name=State,proto3,enum=NCloud.NBlockStore.NProto.EDeviceState" json:"State,omitempty"`
	// Timestamp when state has been changed (in microseconds)
	StateTs uint64 `protobuf:"varint,9,opt,name=StateTs,proto3" json:"StateTs,omitempty"`
	// Timestamp when CMS requested device shutdown (in microseconds).
	CmsTs uint64 `protobuf:"varint,10,opt,name=CmsTs,proto3" json:"CmsTs,omitempty"`
	// Reason for device state.
	StateMessage string `protobuf:"bytes,11,opt,name=StateMessage,proto3" json:"StateMessage,omitempty"`
	// NVMe controller name.
	BaseName string `protobuf:"bytes,12,opt,name=BaseName,proto3" json:"BaseName,omitempty"`
	// Agent id.
	AgentId string `protobuf:"bytes,13,opt,name=AgentId,proto3" json:"AgentId,omitempty"`
	// Number of total device blocks available.
	UnadjustedBlockCount uint64 `protobuf:"varint,14,opt,name=UnadjustedBlockCount,proto3" json:"UnadjustedBlockCount,omitempty"`
	// Rdma target endpoint.
	RdmaEndpoint *protos.TRdmaEndpoint `protobuf:"bytes,15,opt,name=RdmaEndpoint,proto3" json:"RdmaEndpoint,omitempty"`
	// Device pool name.
	PoolName string `protobuf:"bytes,16,opt,name=PoolName,proto3" json:"PoolName,omitempty"`
	// Device pool kind.
	PoolKind protos.EDevicePoolKind `protobuf:"varint,17,opt,name=PoolKind,proto3,enum=NCloud.NBlockStore.NProto.EDevicePoolKind" json:"PoolKind,omitempty"`
	// Serial number.
	SerialNumber string `protobuf:"bytes,18,opt,name=SerialNumber,proto3" json:"SerialNumber,omitempty"`
	// Physical offset in bytes.
	PhysicalOffset uint64 `protobuf:"varint,19,opt,name=PhysicalOffset,proto3" json:"PhysicalOffset,omitempty"`
}

func (x *TDeviceConfig) Reset() {
	*x = TDeviceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDeviceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDeviceConfig) ProtoMessage() {}

func (x *TDeviceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDeviceConfig.ProtoReflect.Descriptor instead.
func (*TDeviceConfig) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{3}
}

func (x *TDeviceConfig) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *TDeviceConfig) GetDeviceUUID() string {
	if x != nil {
		return x.DeviceUUID
	}
	return ""
}

func (x *TDeviceConfig) GetBlockSize() uint32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *TDeviceConfig) GetBlocksCount() uint64 {
	if x != nil {
		return x.BlocksCount
	}
	return 0
}

func (x *TDeviceConfig) GetTransportId() string {
	if x != nil {
		return x.TransportId
	}
	return ""
}

func (x *TDeviceConfig) GetNodeId() uint32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *TDeviceConfig) GetRack() string {
	if x != nil {
		return x.Rack
	}
	return ""
}

func (x *TDeviceConfig) GetState() EDeviceState {
	if x != nil {
		return x.State
	}
	return EDeviceState_DEVICE_STATE_ONLINE
}

func (x *TDeviceConfig) GetStateTs() uint64 {
	if x != nil {
		return x.StateTs
	}
	return 0
}

func (x *TDeviceConfig) GetCmsTs() uint64 {
	if x != nil {
		return x.CmsTs
	}
	return 0
}

func (x *TDeviceConfig) GetStateMessage() string {
	if x != nil {
		return x.StateMessage
	}
	return ""
}

func (x *TDeviceConfig) GetBaseName() string {
	if x != nil {
		return x.BaseName
	}
	return ""
}

func (x *TDeviceConfig) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *TDeviceConfig) GetUnadjustedBlockCount() uint64 {
	if x != nil {
		return x.UnadjustedBlockCount
	}
	return 0
}

func (x *TDeviceConfig) GetRdmaEndpoint() *protos.TRdmaEndpoint {
	if x != nil {
		return x.RdmaEndpoint
	}
	return nil
}

func (x *TDeviceConfig) GetPoolName() string {
	if x != nil {
		return x.PoolName
	}
	return ""
}

func (x *TDeviceConfig) GetPoolKind() protos.EDevicePoolKind {
	if x != nil {
		return x.PoolKind
	}
	return protos.EDevicePoolKind(0)
}

func (x *TDeviceConfig) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *TDeviceConfig) GetPhysicalOffset() uint64 {
	if x != nil {
		return x.PhysicalOffset
	}
	return 0
}

type TSuspendedDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ResumeAfterErase bool   `protobuf:"varint,2,opt,name=ResumeAfterErase,proto3" json:"ResumeAfterErase,omitempty"`
}

func (x *TSuspendedDevice) Reset() {
	*x = TSuspendedDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSuspendedDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSuspendedDevice) ProtoMessage() {}

func (x *TSuspendedDevice) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSuspendedDevice.ProtoReflect.Descriptor instead.
func (*TSuspendedDevice) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{4}
}

func (x *TSuspendedDevice) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TSuspendedDevice) GetResumeAfterErase() bool {
	if x != nil {
		return x.ResumeAfterErase
	}
	return false
}

type TDeviceMigration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Migration source device id.
	SourceDeviceId string `protobuf:"bytes,1,opt,name=SourceDeviceId,proto3" json:"SourceDeviceId,omitempty"`
	// Migration target device config.
	TargetDevice *TDeviceConfig `protobuf:"bytes,2,opt,name=TargetDevice,proto3" json:"TargetDevice,omitempty"`
}

func (x *TDeviceMigration) Reset() {
	*x = TDeviceMigration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDeviceMigration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDeviceMigration) ProtoMessage() {}

func (x *TDeviceMigration) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDeviceMigration.ProtoReflect.Descriptor instead.
func (*TDeviceMigration) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{5}
}

func (x *TDeviceMigration) GetSourceDeviceId() string {
	if x != nil {
		return x.SourceDeviceId
	}
	return ""
}

func (x *TDeviceMigration) GetTargetDevice() *TDeviceConfig {
	if x != nil {
		return x.TargetDevice
	}
	return nil
}

type TFinishedDeviceMigration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=DeviceId,proto3" json:"DeviceId,omitempty"`
}

func (x *TFinishedDeviceMigration) Reset() {
	*x = TFinishedDeviceMigration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFinishedDeviceMigration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFinishedDeviceMigration) ProtoMessage() {}

func (x *TFinishedDeviceMigration) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFinishedDeviceMigration.ProtoReflect.Descriptor instead.
func (*TFinishedDeviceMigration) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{6}
}

func (x *TFinishedDeviceMigration) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type TCheckpointReplica struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CheckpointId.
	CheckpointId string `protobuf:"bytes,1,opt,name=CheckpointId,proto3" json:"CheckpointId,omitempty"`
	// The name of the disk that the checkpoint belongs to.
	SourceDiskId string `protobuf:"bytes,2,opt,name=SourceDiskId,proto3" json:"SourceDiskId,omitempty"`
	// Timestamp when checkpoint was changed (in microseconds)
	StateTs uint64 `protobuf:"varint,3,opt,name=StateTs,proto3" json:"StateTs,omitempty"`
	// Current state of checkpoint
	State ECheckpointState `protobuf:"varint,4,opt,name=State,proto3,enum=NCloud.NBlockStore.NProto.ECheckpointState" json:"State,omitempty"`
}

func (x *TCheckpointReplica) Reset() {
	*x = TCheckpointReplica{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCheckpointReplica) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCheckpointReplica) ProtoMessage() {}

func (x *TCheckpointReplica) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCheckpointReplica.ProtoReflect.Descriptor instead.
func (*TCheckpointReplica) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{7}
}

func (x *TCheckpointReplica) GetCheckpointId() string {
	if x != nil {
		return x.CheckpointId
	}
	return ""
}

func (x *TCheckpointReplica) GetSourceDiskId() string {
	if x != nil {
		return x.SourceDiskId
	}
	return ""
}

func (x *TCheckpointReplica) GetStateTs() uint64 {
	if x != nil {
		return x.StateTs
	}
	return 0
}

func (x *TCheckpointReplica) GetState() ECheckpointState {
	if x != nil {
		return x.State
	}
	return ECheckpointState_CHECKPOINT_STATE_CREATING
}

type TDiskConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label of volume.
	DiskId string `protobuf:"bytes,1,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// List of device UUIDs that make up the disk.
	DeviceUUIDs []string `protobuf:"bytes,2,rep,name=DeviceUUIDs,proto3" json:"DeviceUUIDs,omitempty"`
	// Disk blocks size in bytes.
	BlockSize uint32 `protobuf:"varint,3,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`
	// Disk's current state.
	State protos.EDiskState `protobuf:"varint,4,opt,name=State,proto3,enum=NCloud.NBlockStore.NProto.EDiskState" json:"State,omitempty"`
	// Timestamp when state has been changed (in microseconds)
	StateTs uint64 `protobuf:"varint,5,opt,name=StateTs,proto3" json:"StateTs,omitempty"`
	// Migration configuration
	Migrations []*TDeviceMigration `protobuf:"bytes,6,rep,name=Migrations,proto3" json:"Migrations,omitempty"`
	// Cloud Id, used for user notification.
	CloudId string `protobuf:"bytes,7,opt,name=CloudId,proto3" json:"CloudId,omitempty"`
	// Folder Id, used for user notification.
	FolderId string `protobuf:"bytes,8,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	// User Id, used for user notification.
	UserId string `protobuf:"bytes,9,opt,name=UserId,proto3" json:"UserId,omitempty"`
	// Replica count for mirrored disks.
	ReplicaCount uint32 `protobuf:"varint,10,opt,name=ReplicaCount,proto3" json:"ReplicaCount,omitempty"`
	// Master disk id (for replicas).
	MasterDiskId string `protobuf:"bytes,11,opt,name=MasterDiskId,proto3" json:"MasterDiskId,omitempty"`
	// Finished or canceled device migrations.
	FinishedMigrations []*TFinishedDeviceMigration `protobuf:"bytes,12,rep,name=FinishedMigrations,proto3" json:"FinishedMigrations,omitempty"`
	// New devices used instead of recently replaced ones.
	DeviceReplacementUUIDs []string `protobuf:"bytes,13,rep,name=DeviceReplacementUUIDs,proto3" json:"DeviceReplacementUUIDs,omitempty"`
	// Storage media.
	StorageMediaKind protos1.EStorageMediaKind `protobuf:"varint,14,opt,name=StorageMediaKind,proto3,enum=NCloud.NProto.EStorageMediaKind" json:"StorageMediaKind,omitempty"`
	// Contains checkpoint info if this disk is used as a checkpoint replica.
	CheckpointReplica *TCheckpointReplica `protobuf:"bytes,15,opt,name=CheckpointReplica,proto3" json:"CheckpointReplica,omitempty"`
}

func (x *TDiskConfig) Reset() {
	*x = TDiskConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDiskConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDiskConfig) ProtoMessage() {}

func (x *TDiskConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDiskConfig.ProtoReflect.Descriptor instead.
func (*TDiskConfig) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{8}
}

func (x *TDiskConfig) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TDiskConfig) GetDeviceUUIDs() []string {
	if x != nil {
		return x.DeviceUUIDs
	}
	return nil
}

func (x *TDiskConfig) GetBlockSize() uint32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *TDiskConfig) GetState() protos.EDiskState {
	if x != nil {
		return x.State
	}
	return protos.EDiskState(0)
}

func (x *TDiskConfig) GetStateTs() uint64 {
	if x != nil {
		return x.StateTs
	}
	return 0
}

func (x *TDiskConfig) GetMigrations() []*TDeviceMigration {
	if x != nil {
		return x.Migrations
	}
	return nil
}

func (x *TDiskConfig) GetCloudId() string {
	if x != nil {
		return x.CloudId
	}
	return ""
}

func (x *TDiskConfig) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *TDiskConfig) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TDiskConfig) GetReplicaCount() uint32 {
	if x != nil {
		return x.ReplicaCount
	}
	return 0
}

func (x *TDiskConfig) GetMasterDiskId() string {
	if x != nil {
		return x.MasterDiskId
	}
	return ""
}

func (x *TDiskConfig) GetFinishedMigrations() []*TFinishedDeviceMigration {
	if x != nil {
		return x.FinishedMigrations
	}
	return nil
}

func (x *TDiskConfig) GetDeviceReplacementUUIDs() []string {
	if x != nil {
		return x.DeviceReplacementUUIDs
	}
	return nil
}

func (x *TDiskConfig) GetStorageMediaKind() protos1.EStorageMediaKind {
	if x != nil {
		return x.StorageMediaKind
	}
	return protos1.EStorageMediaKind(0)
}

func (x *TDiskConfig) GetCheckpointReplica() *TCheckpointReplica {
	if x != nil {
		return x.CheckpointReplica
	}
	return nil
}

type TPlacementGroupConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the group.
	GroupId string `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	// Disks in this group.
	Disks []*TPlacementGroupConfig_TDiskInfo `protobuf:"bytes,2,rep,name=Disks,proto3" json:"Disks,omitempty"`
	// Config version.
	ConfigVersion uint32 `protobuf:"varint,3,opt,name=ConfigVersion,proto3" json:"ConfigVersion,omitempty"`
	// Custom placement group settings.
	Settings *protos.TPlacementGroupSettings `protobuf:"bytes,4,opt,name=Settings,proto3" json:"Settings,omitempty"`
	// Placement strategy.
	PlacementStrategy protos.EPlacementStrategy `protobuf:"varint,5,opt,name=PlacementStrategy,proto3,enum=NCloud.NBlockStore.NProto.EPlacementStrategy" json:"PlacementStrategy,omitempty"`
	// Number of placement partitions.
	// Used for PLACEMENT_STRATEGY_PARTITION PlacementStrategy.
	PlacementPartitionCount uint32 `protobuf:"varint,6,opt,name=PlacementPartitionCount,proto3" json:"PlacementPartitionCount,omitempty"`
}

func (x *TPlacementGroupConfig) Reset() {
	*x = TPlacementGroupConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPlacementGroupConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPlacementGroupConfig) ProtoMessage() {}

func (x *TPlacementGroupConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPlacementGroupConfig.ProtoReflect.Descriptor instead.
func (*TPlacementGroupConfig) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{9}
}

func (x *TPlacementGroupConfig) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *TPlacementGroupConfig) GetDisks() []*TPlacementGroupConfig_TDiskInfo {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *TPlacementGroupConfig) GetConfigVersion() uint32 {
	if x != nil {
		return x.ConfigVersion
	}
	return 0
}

func (x *TPlacementGroupConfig) GetSettings() *protos.TPlacementGroupSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *TPlacementGroupConfig) GetPlacementStrategy() protos.EPlacementStrategy {
	if x != nil {
		return x.PlacementStrategy
	}
	return protos.EPlacementStrategy(0)
}

func (x *TPlacementGroupConfig) GetPlacementPartitionCount() uint32 {
	if x != nil {
		return x.PlacementPartitionCount
	}
	return 0
}

type TDevicePoolConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device pool name.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Allocation unit for this pool (in bytes).
	AllocationUnit uint64 `protobuf:"varint,2,opt,name=AllocationUnit,proto3" json:"AllocationUnit,omitempty"`
	// Device pool kind.
	Kind protos.EDevicePoolKind `protobuf:"varint,3,opt,name=Kind,proto3,enum=NCloud.NBlockStore.NProto.EDevicePoolKind" json:"Kind,omitempty"`
}

func (x *TDevicePoolConfig) Reset() {
	*x = TDevicePoolConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDevicePoolConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDevicePoolConfig) ProtoMessage() {}

func (x *TDevicePoolConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDevicePoolConfig.ProtoReflect.Descriptor instead.
func (*TDevicePoolConfig) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{10}
}

func (x *TDevicePoolConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TDevicePoolConfig) GetAllocationUnit() uint64 {
	if x != nil {
		return x.AllocationUnit
	}
	return 0
}

func (x *TDevicePoolConfig) GetKind() protos.EDevicePoolKind {
	if x != nil {
		return x.Kind
	}
	return protos.EDevicePoolKind(0)
}

type TDiskRegistryConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Disk registry config version.
	Version uint32 `protobuf:"varint,1,opt,name=Version,proto3" json:"Version,omitempty"`
	// List of agents allowed to connect to the Disk Registry.
	KnownAgents        []*TAgentConfig `protobuf:"bytes,2,rep,name=KnownAgents,proto3" json:"KnownAgents,omitempty"`
	LastDiskStateSeqNo uint64          `protobuf:"varint,3,opt,name=LastDiskStateSeqNo,proto3" json:"LastDiskStateSeqNo,omitempty"`
	// Allow to allocate disks.
	WritableState bool `protobuf:"varint,4,opt,name=WritableState,proto3" json:"WritableState,omitempty"`
	// Device overrides. See NBS-2432.
	DeviceOverrides []*protos.TDeviceOverride `protobuf:"bytes,5,rep,name=DeviceOverrides,proto3" json:"DeviceOverrides,omitempty"`
	// Device pool configs.
	DevicePoolConfigs []*TDevicePoolConfig `protobuf:"bytes,6,rep,name=DevicePoolConfigs,proto3" json:"DevicePoolConfigs,omitempty"`
	// Restore state.
	RestoreState bool `protobuf:"varint,7,opt,name=RestoreState,proto3" json:"RestoreState,omitempty"`
	// Last backup timestamp (in milliseconds)
	LastBackupTs uint64 `protobuf:"varint,8,opt,name=LastBackupTs,proto3" json:"LastBackupTs,omitempty"`
}

func (x *TDiskRegistryConfig) Reset() {
	*x = TDiskRegistryConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDiskRegistryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDiskRegistryConfig) ProtoMessage() {}

func (x *TDiskRegistryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDiskRegistryConfig.ProtoReflect.Descriptor instead.
func (*TDiskRegistryConfig) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{11}
}

func (x *TDiskRegistryConfig) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TDiskRegistryConfig) GetKnownAgents() []*TAgentConfig {
	if x != nil {
		return x.KnownAgents
	}
	return nil
}

func (x *TDiskRegistryConfig) GetLastDiskStateSeqNo() uint64 {
	if x != nil {
		return x.LastDiskStateSeqNo
	}
	return 0
}

func (x *TDiskRegistryConfig) GetWritableState() bool {
	if x != nil {
		return x.WritableState
	}
	return false
}

func (x *TDiskRegistryConfig) GetDeviceOverrides() []*protos.TDeviceOverride {
	if x != nil {
		return x.DeviceOverrides
	}
	return nil
}

func (x *TDiskRegistryConfig) GetDevicePoolConfigs() []*TDevicePoolConfig {
	if x != nil {
		return x.DevicePoolConfigs
	}
	return nil
}

func (x *TDiskRegistryConfig) GetRestoreState() bool {
	if x != nil {
		return x.RestoreState
	}
	return false
}

func (x *TDiskRegistryConfig) GetLastBackupTs() uint64 {
	if x != nil {
		return x.LastBackupTs
	}
	return 0
}

type TDeviceRateLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IopsLimit uint64 `protobuf:"varint,1,opt,name=IopsLimit,proto3" json:"IopsLimit,omitempty"`
	// Common bandwidth limit (in megabytes per second)
	BandwidthLimit uint64 `protobuf:"varint,2,opt,name=BandwidthLimit,proto3" json:"BandwidthLimit,omitempty"`
	// Read bandwidth limit (in megabytes per second)
	ReadBandwidthLimit uint64 `protobuf:"varint,3,opt,name=ReadBandwidthLimit,proto3" json:"ReadBandwidthLimit,omitempty"`
	// Write bandwidth limit (in megabytes per second)
	WriteBandwidthLimit uint64 `protobuf:"varint,4,opt,name=WriteBandwidthLimit,proto3" json:"WriteBandwidthLimit,omitempty"`
}

func (x *TDeviceRateLimits) Reset() {
	*x = TDeviceRateLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDeviceRateLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDeviceRateLimits) ProtoMessage() {}

func (x *TDeviceRateLimits) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDeviceRateLimits.ProtoReflect.Descriptor instead.
func (*TDeviceRateLimits) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{12}
}

func (x *TDeviceRateLimits) GetIopsLimit() uint64 {
	if x != nil {
		return x.IopsLimit
	}
	return 0
}

func (x *TDeviceRateLimits) GetBandwidthLimit() uint64 {
	if x != nil {
		return x.BandwidthLimit
	}
	return 0
}

func (x *TDeviceRateLimits) GetReadBandwidthLimit() uint64 {
	if x != nil {
		return x.ReadBandwidthLimit
	}
	return 0
}

func (x *TDeviceRateLimits) GetWriteBandwidthLimit() uint64 {
	if x != nil {
		return x.WriteBandwidthLimit
	}
	return 0
}

type TDeviceStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceUUID       string                      `protobuf:"bytes,1,opt,name=DeviceUUID,proto3" json:"DeviceUUID,omitempty"`
	HistogramBuckets []*TDeviceStats_TBucketInfo `protobuf:"bytes,2,rep,name=HistogramBuckets,proto3" json:"HistogramBuckets,omitempty"`
	BytesRead        uint64                      `protobuf:"varint,3,opt,name=BytesRead,proto3" json:"BytesRead,omitempty"`
	NumReadOps       uint64                      `protobuf:"varint,4,opt,name=NumReadOps,proto3" json:"NumReadOps,omitempty"`
	BytesWritten     uint64                      `protobuf:"varint,5,opt,name=BytesWritten,proto3" json:"BytesWritten,omitempty"`
	NumWriteOps      uint64                      `protobuf:"varint,6,opt,name=NumWriteOps,proto3" json:"NumWriteOps,omitempty"`
	Errors           uint64                      `protobuf:"varint,7,opt,name=Errors,proto3" json:"Errors,omitempty"`
	BytesZeroed      uint64                      `protobuf:"varint,8,opt,name=BytesZeroed,proto3" json:"BytesZeroed,omitempty"`
	NumZeroOps       uint64                      `protobuf:"varint,9,opt,name=NumZeroOps,proto3" json:"NumZeroOps,omitempty"`
	NumEraseOps      uint64                      `protobuf:"varint,10,opt,name=NumEraseOps,proto3" json:"NumEraseOps,omitempty"`
	DeviceName       string                      `protobuf:"bytes,11,opt,name=DeviceName,proto3" json:"DeviceName,omitempty"`
}

func (x *TDeviceStats) Reset() {
	*x = TDeviceStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDeviceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDeviceStats) ProtoMessage() {}

func (x *TDeviceStats) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDeviceStats.ProtoReflect.Descriptor instead.
func (*TDeviceStats) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{13}
}

func (x *TDeviceStats) GetDeviceUUID() string {
	if x != nil {
		return x.DeviceUUID
	}
	return ""
}

func (x *TDeviceStats) GetHistogramBuckets() []*TDeviceStats_TBucketInfo {
	if x != nil {
		return x.HistogramBuckets
	}
	return nil
}

func (x *TDeviceStats) GetBytesRead() uint64 {
	if x != nil {
		return x.BytesRead
	}
	return 0
}

func (x *TDeviceStats) GetNumReadOps() uint64 {
	if x != nil {
		return x.NumReadOps
	}
	return 0
}

func (x *TDeviceStats) GetBytesWritten() uint64 {
	if x != nil {
		return x.BytesWritten
	}
	return 0
}

func (x *TDeviceStats) GetNumWriteOps() uint64 {
	if x != nil {
		return x.NumWriteOps
	}
	return 0
}

func (x *TDeviceStats) GetErrors() uint64 {
	if x != nil {
		return x.Errors
	}
	return 0
}

func (x *TDeviceStats) GetBytesZeroed() uint64 {
	if x != nil {
		return x.BytesZeroed
	}
	return 0
}

func (x *TDeviceStats) GetNumZeroOps() uint64 {
	if x != nil {
		return x.NumZeroOps
	}
	return 0
}

func (x *TDeviceStats) GetNumEraseOps() uint64 {
	if x != nil {
		return x.NumEraseOps
	}
	return 0
}

func (x *TDeviceStats) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

type TAgentStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node that agent is running on.
	NodeId uint32 `protobuf:"varint,1,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	// Devices attached to the agent.
	DeviceStats []*TDeviceStats `protobuf:"bytes,2,rep,name=DeviceStats,proto3" json:"DeviceStats,omitempty"`
	// Error count at Disk Agent initialization
	InitErrorsCount uint32 `protobuf:"varint,3,opt,name=InitErrorsCount,proto3" json:"InitErrorsCount,omitempty"`
}

func (x *TAgentStats) Reset() {
	*x = TAgentStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAgentStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAgentStats) ProtoMessage() {}

func (x *TAgentStats) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAgentStats.ProtoReflect.Descriptor instead.
func (*TAgentStats) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{14}
}

func (x *TAgentStats) GetNodeId() uint32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *TAgentStats) GetDeviceStats() []*TDeviceStats {
	if x != nil {
		return x.DeviceStats
	}
	return nil
}

func (x *TAgentStats) GetInitErrorsCount() uint32 {
	if x != nil {
		return x.InitErrorsCount
	}
	return 0
}

type TDiskRegistryAgentListRequestParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentIds                          []string `protobuf:"bytes,1,rep,name=AgentIds,proto3" json:"AgentIds,omitempty"`
	TimeoutMs                         uint64   `protobuf:"varint,2,opt,name=TimeoutMs,proto3" json:"TimeoutMs,omitempty"`
	NewNonReplicatedAgentMinTimeoutMs *uint64  `protobuf:"varint,3,opt,name=NewNonReplicatedAgentMinTimeoutMs,proto3,oneof" json:"NewNonReplicatedAgentMinTimeoutMs,omitempty"`
	NewNonReplicatedAgentMaxTimeoutMs *uint64  `protobuf:"varint,4,opt,name=NewNonReplicatedAgentMaxTimeoutMs,proto3,oneof" json:"NewNonReplicatedAgentMaxTimeoutMs,omitempty"`
}

func (x *TDiskRegistryAgentListRequestParams) Reset() {
	*x = TDiskRegistryAgentListRequestParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDiskRegistryAgentListRequestParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDiskRegistryAgentListRequestParams) ProtoMessage() {}

func (x *TDiskRegistryAgentListRequestParams) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDiskRegistryAgentListRequestParams.ProtoReflect.Descriptor instead.
func (*TDiskRegistryAgentListRequestParams) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{15}
}

func (x *TDiskRegistryAgentListRequestParams) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *TDiskRegistryAgentListRequestParams) GetTimeoutMs() uint64 {
	if x != nil {
		return x.TimeoutMs
	}
	return 0
}

func (x *TDiskRegistryAgentListRequestParams) GetNewNonReplicatedAgentMinTimeoutMs() uint64 {
	if x != nil && x.NewNonReplicatedAgentMinTimeoutMs != nil {
		return *x.NewNonReplicatedAgentMinTimeoutMs
	}
	return 0
}

func (x *TDiskRegistryAgentListRequestParams) GetNewNonReplicatedAgentMaxTimeoutMs() uint64 {
	if x != nil && x.NewNonReplicatedAgentMaxTimeoutMs != nil {
		return *x.NewNonReplicatedAgentMaxTimeoutMs
	}
	return 0
}

type TDiskRegistryAgentParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeadlineMs                        uint64  `protobuf:"varint,1,opt,name=DeadlineMs,proto3" json:"DeadlineMs,omitempty"`
	NewNonReplicatedAgentMinTimeoutMs *uint64 `protobuf:"varint,2,opt,name=NewNonReplicatedAgentMinTimeoutMs,proto3,oneof" json:"NewNonReplicatedAgentMinTimeoutMs,omitempty"`
	NewNonReplicatedAgentMaxTimeoutMs *uint64 `protobuf:"varint,3,opt,name=NewNonReplicatedAgentMaxTimeoutMs,proto3,oneof" json:"NewNonReplicatedAgentMaxTimeoutMs,omitempty"`
}

func (x *TDiskRegistryAgentParams) Reset() {
	*x = TDiskRegistryAgentParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDiskRegistryAgentParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDiskRegistryAgentParams) ProtoMessage() {}

func (x *TDiskRegistryAgentParams) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDiskRegistryAgentParams.ProtoReflect.Descriptor instead.
func (*TDiskRegistryAgentParams) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{16}
}

func (x *TDiskRegistryAgentParams) GetDeadlineMs() uint64 {
	if x != nil {
		return x.DeadlineMs
	}
	return 0
}

func (x *TDiskRegistryAgentParams) GetNewNonReplicatedAgentMinTimeoutMs() uint64 {
	if x != nil && x.NewNonReplicatedAgentMinTimeoutMs != nil {
		return *x.NewNonReplicatedAgentMinTimeoutMs
	}
	return 0
}

func (x *TDiskRegistryAgentParams) GetNewNonReplicatedAgentMaxTimeoutMs() uint64 {
	if x != nil && x.NewNonReplicatedAgentMaxTimeoutMs != nil {
		return *x.NewNonReplicatedAgentMaxTimeoutMs
	}
	return 0
}

type TUserNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNo uint64 `protobuf:"varint,2,opt,name=SeqNo,proto3" json:"SeqNo,omitempty"`
	// In microseconds.
	Timestamp uint64 `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	// If duplicated in obsolete ErrorNotifications for compatibility.
	HasLegacyCopy bool `protobuf:"varint,4,opt,name=HasLegacyCopy,proto3" json:"HasLegacyCopy,omitempty"`
	// Types that are assignable to Event:
	//
	//	*TUserNotification_DiskError
	//	*TUserNotification_DiskBackOnline
	Event isTUserNotification_Event `protobuf_oneof:"Event"`
}

func (x *TUserNotification) Reset() {
	*x = TUserNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TUserNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TUserNotification) ProtoMessage() {}

func (x *TUserNotification) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TUserNotification.ProtoReflect.Descriptor instead.
func (*TUserNotification) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{17}
}

func (x *TUserNotification) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *TUserNotification) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TUserNotification) GetHasLegacyCopy() bool {
	if x != nil {
		return x.HasLegacyCopy
	}
	return false
}

func (m *TUserNotification) GetEvent() isTUserNotification_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *TUserNotification) GetDiskError() *TUserNotification_TDiskError {
	if x, ok := x.GetEvent().(*TUserNotification_DiskError); ok {
		return x.DiskError
	}
	return nil
}

func (x *TUserNotification) GetDiskBackOnline() *TUserNotification_TDiskBackOnline {
	if x, ok := x.GetEvent().(*TUserNotification_DiskBackOnline); ok {
		return x.DiskBackOnline
	}
	return nil
}

type isTUserNotification_Event interface {
	isTUserNotification_Event()
}

type TUserNotification_DiskError struct {
	DiskError *TUserNotification_TDiskError `protobuf:"bytes,5,opt,name=DiskError,proto3,oneof"`
}

type TUserNotification_DiskBackOnline struct {
	DiskBackOnline *TUserNotification_TDiskBackOnline `protobuf:"bytes,6,opt,name=DiskBackOnline,proto3,oneof"`
}

func (*TUserNotification_DiskError) isTUserNotification_Event() {}

func (*TUserNotification_DiskBackOnline) isTUserNotification_Event() {}

type TDiskRegistryStateBackup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disks           []*TDiskConfig           `protobuf:"bytes,1,rep,name=Disks,proto3" json:"Disks,omitempty"`
	PlacementGroups []*TPlacementGroupConfig `protobuf:"bytes,2,rep,name=PlacementGroups,proto3" json:"PlacementGroups,omitempty"`
	Agents          []*TAgentConfig          `protobuf:"bytes,3,rep,name=Agents,proto3" json:"Agents,omitempty"`
	Sessions        []*TDiskSession          `protobuf:"bytes,4,rep,name=Sessions,proto3" json:"Sessions,omitempty"`
	Config          *TDiskRegistryConfig     `protobuf:"bytes,5,opt,name=Config,proto3" json:"Config,omitempty"`
	// deprecated
	OldDirtyDevices  []string                                     `protobuf:"bytes,6,rep,name=OldDirtyDevices,proto3" json:"OldDirtyDevices,omitempty"`
	DiskStateChanges []*TDiskRegistryStateBackup_TDiskStateUpdate `protobuf:"bytes,7,rep,name=DiskStateChanges,proto3" json:"DiskStateChanges,omitempty"`
	BrokenDisks      []*TDiskRegistryStateBackup_TBrokenDiskInfo  `protobuf:"bytes,8,rep,name=BrokenDisks,proto3" json:"BrokenDisks,omitempty"`
	DisksToNotify    []string                                     `protobuf:"bytes,9,rep,name=DisksToNotify,proto3" json:"DisksToNotify,omitempty"`
	DisksToCleanup   []string                                     `protobuf:"bytes,10,rep,name=DisksToCleanup,proto3" json:"DisksToCleanup,omitempty"`
	// Obsolete
	ErrorNotifications    []string `protobuf:"bytes,11,rep,name=ErrorNotifications,proto3" json:"ErrorNotifications,omitempty"`
	OutdatedVolumeConfigs []string `protobuf:"bytes,12,rep,name=OutdatedVolumeConfigs,proto3" json:"OutdatedVolumeConfigs,omitempty"`
	// deprecated
	OldSuspendedDevices          []string                                                     `protobuf:"bytes,13,rep,name=OldSuspendedDevices,proto3" json:"OldSuspendedDevices,omitempty"`
	DirtyDevices                 []*TDiskRegistryStateBackup_TDirtyDevice                     `protobuf:"bytes,14,rep,name=DirtyDevices,proto3" json:"DirtyDevices,omitempty"`
	AutomaticallyReplacedDevices []*TDiskRegistryStateBackup_TAutomaticallyReplacedDeviceInfo `protobuf:"bytes,15,rep,name=AutomaticallyReplacedDevices,proto3" json:"AutomaticallyReplacedDevices,omitempty"`
	DiskRegistryAgentListParams  map[string]*TDiskRegistryAgentParams                         `protobuf:"bytes,16,rep,name=DiskRegistryAgentListParams,proto3" json:"DiskRegistryAgentListParams,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UserNotifications            []*TUserNotification                                         `protobuf:"bytes,17,rep,name=UserNotifications,proto3" json:"UserNotifications,omitempty"`
	SuspendedDevices             []*TSuspendedDevice                                          `protobuf:"bytes,18,rep,name=SuspendedDevices,proto3" json:"SuspendedDevices,omitempty"`
}

func (x *TDiskRegistryStateBackup) Reset() {
	*x = TDiskRegistryStateBackup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDiskRegistryStateBackup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDiskRegistryStateBackup) ProtoMessage() {}

func (x *TDiskRegistryStateBackup) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDiskRegistryStateBackup.ProtoReflect.Descriptor instead.
func (*TDiskRegistryStateBackup) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{18}
}

func (x *TDiskRegistryStateBackup) GetDisks() []*TDiskConfig {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *TDiskRegistryStateBackup) GetPlacementGroups() []*TPlacementGroupConfig {
	if x != nil {
		return x.PlacementGroups
	}
	return nil
}

func (x *TDiskRegistryStateBackup) GetAgents() []*TAgentConfig {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *TDiskRegistryStateBackup) GetSessions() []*TDiskSession {
	if x != nil {
		return x.Sessions
	}
	return nil
}

func (x *TDiskRegistryStateBackup) GetConfig() *TDiskRegistryConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TDiskRegistryStateBackup) GetOldDirtyDevices() []string {
	if x != nil {
		return x.OldDirtyDevices
	}
	return nil
}

func (x *TDiskRegistryStateBackup) GetDiskStateChanges() []*TDiskRegistryStateBackup_TDiskStateUpdate {
	if x != nil {
		return x.DiskStateChanges
	}
	return nil
}

func (x *TDiskRegistryStateBackup) GetBrokenDisks() []*TDiskRegistryStateBackup_TBrokenDiskInfo {
	if x != nil {
		return x.BrokenDisks
	}
	return nil
}

func (x *TDiskRegistryStateBackup) GetDisksToNotify() []string {
	if x != nil {
		return x.DisksToNotify
	}
	return nil
}

func (x *TDiskRegistryStateBackup) GetDisksToCleanup() []string {
	if x != nil {
		return x.DisksToCleanup
	}
	return nil
}

func (x *TDiskRegistryStateBackup) GetErrorNotifications() []string {
	if x != nil {
		return x.ErrorNotifications
	}
	return nil
}

func (x *TDiskRegistryStateBackup) GetOutdatedVolumeConfigs() []string {
	if x != nil {
		return x.OutdatedVolumeConfigs
	}
	return nil
}

func (x *TDiskRegistryStateBackup) GetOldSuspendedDevices() []string {
	if x != nil {
		return x.OldSuspendedDevices
	}
	return nil
}

func (x *TDiskRegistryStateBackup) GetDirtyDevices() []*TDiskRegistryStateBackup_TDirtyDevice {
	if x != nil {
		return x.DirtyDevices
	}
	return nil
}

func (x *TDiskRegistryStateBackup) GetAutomaticallyReplacedDevices() []*TDiskRegistryStateBackup_TAutomaticallyReplacedDeviceInfo {
	if x != nil {
		return x.AutomaticallyReplacedDevices
	}
	return nil
}

func (x *TDiskRegistryStateBackup) GetDiskRegistryAgentListParams() map[string]*TDiskRegistryAgentParams {
	if x != nil {
		return x.DiskRegistryAgentListParams
	}
	return nil
}

func (x *TDiskRegistryStateBackup) GetUserNotifications() []*TUserNotification {
	if x != nil {
		return x.UserNotifications
	}
	return nil
}

func (x *TDiskRegistryStateBackup) GetSuspendedDevices() []*TSuspendedDevice {
	if x != nil {
		return x.SuspendedDevices
	}
	return nil
}

type TRegisterAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Agent configuration.
	AgentConfig *TAgentConfig `protobuf:"bytes,2,opt,name=AgentConfig,proto3" json:"AgentConfig,omitempty"`
}

func (x *TRegisterAgentRequest) Reset() {
	*x = TRegisterAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TRegisterAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TRegisterAgentRequest) ProtoMessage() {}

func (x *TRegisterAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TRegisterAgentRequest.ProtoReflect.Descriptor instead.
func (*TRegisterAgentRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{19}
}

func (x *TRegisterAgentRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TRegisterAgentRequest) GetAgentConfig() *TAgentConfig {
	if x != nil {
		return x.AgentConfig
	}
	return nil
}

type TRegisterAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TRegisterAgentResponse) Reset() {
	*x = TRegisterAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TRegisterAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TRegisterAgentResponse) ProtoMessage() {}

func (x *TRegisterAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TRegisterAgentResponse.ProtoReflect.Descriptor instead.
func (*TRegisterAgentResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{20}
}

func (x *TRegisterAgentResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TUnregisterAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Node that agent is running on.
	NodeId uint32 `protobuf:"varint,2,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
}

func (x *TUnregisterAgentRequest) Reset() {
	*x = TUnregisterAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TUnregisterAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TUnregisterAgentRequest) ProtoMessage() {}

func (x *TUnregisterAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TUnregisterAgentRequest.ProtoReflect.Descriptor instead.
func (*TUnregisterAgentRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{21}
}

func (x *TUnregisterAgentRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TUnregisterAgentRequest) GetNodeId() uint32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

type TUnregisterAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TUnregisterAgentResponse) Reset() {
	*x = TUnregisterAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TUnregisterAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TUnregisterAgentResponse) ProtoMessage() {}

func (x *TUnregisterAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TUnregisterAgentResponse.ProtoReflect.Descriptor instead.
func (*TUnregisterAgentResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{22}
}

func (x *TUnregisterAgentResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TAllocateDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume to create.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Minimum addressable block size (smallest unit of I/O operations).
	BlockSize uint32 `protobuf:"varint,3,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`
	// Maximum number of blocks stored in volume.
	BlocksCount uint64 `protobuf:"varint,4,opt,name=BlocksCount,proto3" json:"BlocksCount,omitempty"`
	// Placement group id.
	PlacementGroupId string `protobuf:"bytes,5,opt,name=PlacementGroupId,proto3" json:"PlacementGroupId,omitempty"`
	// Cloud Id, used for user notification.
	CloudId string `protobuf:"bytes,6,opt,name=CloudId,proto3" json:"CloudId,omitempty"`
	// Folder Id, used for user notification.
	FolderId string `protobuf:"bytes,7,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	// Replica count (for mirrored disks).
	ReplicaCount uint32 `protobuf:"varint,8,opt,name=ReplicaCount,proto3" json:"ReplicaCount,omitempty"`
	// Target agent ids.
	AgentIds []string `protobuf:"bytes,9,rep,name=AgentIds,proto3" json:"AgentIds,omitempty"`
	// Device pool name.
	PoolName string `protobuf:"bytes,10,opt,name=PoolName,proto3" json:"PoolName,omitempty"`
	// Storage media to use.
	StorageMediaKind protos1.EStorageMediaKind `protobuf:"varint,11,opt,name=StorageMediaKind,proto3,enum=NCloud.NProto.EStorageMediaKind" json:"StorageMediaKind,omitempty"`
	// Placement partition index.
	PlacementPartitionIndex uint32 `protobuf:"varint,12,opt,name=PlacementPartitionIndex,proto3" json:"PlacementPartitionIndex,omitempty"`
}

func (x *TAllocateDiskRequest) Reset() {
	*x = TAllocateDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAllocateDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAllocateDiskRequest) ProtoMessage() {}

func (x *TAllocateDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAllocateDiskRequest.ProtoReflect.Descriptor instead.
func (*TAllocateDiskRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{23}
}

func (x *TAllocateDiskRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TAllocateDiskRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TAllocateDiskRequest) GetBlockSize() uint32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *TAllocateDiskRequest) GetBlocksCount() uint64 {
	if x != nil {
		return x.BlocksCount
	}
	return 0
}

func (x *TAllocateDiskRequest) GetPlacementGroupId() string {
	if x != nil {
		return x.PlacementGroupId
	}
	return ""
}

func (x *TAllocateDiskRequest) GetCloudId() string {
	if x != nil {
		return x.CloudId
	}
	return ""
}

func (x *TAllocateDiskRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *TAllocateDiskRequest) GetReplicaCount() uint32 {
	if x != nil {
		return x.ReplicaCount
	}
	return 0
}

func (x *TAllocateDiskRequest) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *TAllocateDiskRequest) GetPoolName() string {
	if x != nil {
		return x.PoolName
	}
	return ""
}

func (x *TAllocateDiskRequest) GetStorageMediaKind() protos1.EStorageMediaKind {
	if x != nil {
		return x.StorageMediaKind
	}
	return protos1.EStorageMediaKind(0)
}

func (x *TAllocateDiskRequest) GetPlacementPartitionIndex() uint32 {
	if x != nil {
		return x.PlacementPartitionIndex
	}
	return 0
}

type TReplica struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device list.
	Devices []*TDeviceConfig `protobuf:"bytes,1,rep,name=Devices,proto3" json:"Devices,omitempty"`
}

func (x *TReplica) Reset() {
	*x = TReplica{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TReplica) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TReplica) ProtoMessage() {}

func (x *TReplica) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TReplica.ProtoReflect.Descriptor instead.
func (*TReplica) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{24}
}

func (x *TReplica) GetDevices() []*TDeviceConfig {
	if x != nil {
		return x.Devices
	}
	return nil
}

type TAllocateDiskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// List of device UUIDs that make up the disk.
	Devices []*TDeviceConfig `protobuf:"bytes,2,rep,name=Devices,proto3" json:"Devices,omitempty"`
	// IO state
	IOMode protos.EVolumeIOMode `protobuf:"varint,3,opt,name=IOMode,proto3,enum=NCloud.NBlockStore.NProto.EVolumeIOMode" json:"IOMode,omitempty"`
	// Migration configuration
	Migrations []*TDeviceMigration `protobuf:"bytes,4,rep,name=Migrations,proto3" json:"Migrations,omitempty"`
	// IO state timestamp
	IOModeTs uint64 `protobuf:"varint,5,opt,name=IOModeTs,proto3" json:"IOModeTs,omitempty"`
	// Mute IO errors after a while
	MuteIOErrors bool `protobuf:"varint,6,opt,name=MuteIOErrors,proto3" json:"MuteIOErrors,omitempty"`
	// Replicas for mirrored disks.
	Replicas []*TReplica `protobuf:"bytes,7,rep,name=Replicas,proto3" json:"Replicas,omitempty"`
	// New devices used instead of recently replaced ones.
	DeviceReplacementUUIDs []string `protobuf:"bytes,8,rep,name=DeviceReplacementUUIDs,proto3" json:"DeviceReplacementUUIDs,omitempty"`
}

func (x *TAllocateDiskResponse) Reset() {
	*x = TAllocateDiskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAllocateDiskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAllocateDiskResponse) ProtoMessage() {}

func (x *TAllocateDiskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAllocateDiskResponse.ProtoReflect.Descriptor instead.
func (*TAllocateDiskResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{25}
}

func (x *TAllocateDiskResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TAllocateDiskResponse) GetDevices() []*TDeviceConfig {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *TAllocateDiskResponse) GetIOMode() protos.EVolumeIOMode {
	if x != nil {
		return x.IOMode
	}
	return protos.EVolumeIOMode(0)
}

func (x *TAllocateDiskResponse) GetMigrations() []*TDeviceMigration {
	if x != nil {
		return x.Migrations
	}
	return nil
}

func (x *TAllocateDiskResponse) GetIOModeTs() uint64 {
	if x != nil {
		return x.IOModeTs
	}
	return 0
}

func (x *TAllocateDiskResponse) GetMuteIOErrors() bool {
	if x != nil {
		return x.MuteIOErrors
	}
	return false
}

func (x *TAllocateDiskResponse) GetReplicas() []*TReplica {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *TAllocateDiskResponse) GetDeviceReplacementUUIDs() []string {
	if x != nil {
		return x.DeviceReplacementUUIDs
	}
	return nil
}

type TDeallocateDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume to remove.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Wait for secure cleanup of disk's devices before response.
	Sync bool `protobuf:"varint,4,opt,name=Sync,proto3" json:"Sync,omitempty"`
}

func (x *TDeallocateDiskRequest) Reset() {
	*x = TDeallocateDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDeallocateDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDeallocateDiskRequest) ProtoMessage() {}

func (x *TDeallocateDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDeallocateDiskRequest.ProtoReflect.Descriptor instead.
func (*TDeallocateDiskRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{26}
}

func (x *TDeallocateDiskRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TDeallocateDiskRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TDeallocateDiskRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type TDeallocateDiskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TDeallocateDiskResponse) Reset() {
	*x = TDeallocateDiskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDeallocateDiskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDeallocateDiskResponse) ProtoMessage() {}

func (x *TDeallocateDiskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDeallocateDiskResponse.ProtoReflect.Descriptor instead.
func (*TDeallocateDiskResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{27}
}

func (x *TDeallocateDiskResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TAcquireDevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// List of device UUIDs to acquire.
	DeviceUUIDs []string `protobuf:"bytes,2,rep,name=DeviceUUIDs,proto3" json:"DeviceUUIDs,omitempty"`
	// Rate limits.
	RateLimits *TDeviceRateLimits `protobuf:"bytes,4,opt,name=RateLimits,proto3" json:"RateLimits,omitempty"`
	// Access mode.
	AccessMode protos.EVolumeAccessMode `protobuf:"varint,5,opt,name=AccessMode,proto3,enum=NCloud.NBlockStore.NProto.EVolumeAccessMode" json:"AccessMode,omitempty"`
	// MountSeqNumber from volume state.
	MountSeqNumber uint64 `protobuf:"varint,6,opt,name=MountSeqNumber,proto3" json:"MountSeqNumber,omitempty"`
	// Disk id.
	DiskId string `protobuf:"bytes,7,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Volume generation.
	VolumeGeneration uint32 `protobuf:"varint,8,opt,name=VolumeGeneration,proto3" json:"VolumeGeneration,omitempty"`
}

func (x *TAcquireDevicesRequest) Reset() {
	*x = TAcquireDevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAcquireDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAcquireDevicesRequest) ProtoMessage() {}

func (x *TAcquireDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAcquireDevicesRequest.ProtoReflect.Descriptor instead.
func (*TAcquireDevicesRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{28}
}

func (x *TAcquireDevicesRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TAcquireDevicesRequest) GetDeviceUUIDs() []string {
	if x != nil {
		return x.DeviceUUIDs
	}
	return nil
}

func (x *TAcquireDevicesRequest) GetRateLimits() *TDeviceRateLimits {
	if x != nil {
		return x.RateLimits
	}
	return nil
}

func (x *TAcquireDevicesRequest) GetAccessMode() protos.EVolumeAccessMode {
	if x != nil {
		return x.AccessMode
	}
	return protos.EVolumeAccessMode(0)
}

func (x *TAcquireDevicesRequest) GetMountSeqNumber() uint64 {
	if x != nil {
		return x.MountSeqNumber
	}
	return 0
}

func (x *TAcquireDevicesRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TAcquireDevicesRequest) GetVolumeGeneration() uint32 {
	if x != nil {
		return x.VolumeGeneration
	}
	return 0
}

type TAcquireDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TAcquireDevicesResponse) Reset() {
	*x = TAcquireDevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAcquireDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAcquireDevicesResponse) ProtoMessage() {}

func (x *TAcquireDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAcquireDevicesResponse.ProtoReflect.Descriptor instead.
func (*TAcquireDevicesResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{29}
}

func (x *TAcquireDevicesResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TReleaseDevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// List of device UUIDs to release.
	DeviceUUIDs []string `protobuf:"bytes,2,rep,name=DeviceUUIDs,proto3" json:"DeviceUUIDs,omitempty"`
	// Disk id.
	DiskId string `protobuf:"bytes,4,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Volume generation.
	VolumeGeneration uint32 `protobuf:"varint,5,opt,name=VolumeGeneration,proto3" json:"VolumeGeneration,omitempty"`
}

func (x *TReleaseDevicesRequest) Reset() {
	*x = TReleaseDevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TReleaseDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TReleaseDevicesRequest) ProtoMessage() {}

func (x *TReleaseDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TReleaseDevicesRequest.ProtoReflect.Descriptor instead.
func (*TReleaseDevicesRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{30}
}

func (x *TReleaseDevicesRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TReleaseDevicesRequest) GetDeviceUUIDs() []string {
	if x != nil {
		return x.DeviceUUIDs
	}
	return nil
}

func (x *TReleaseDevicesRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TReleaseDevicesRequest) GetVolumeGeneration() uint32 {
	if x != nil {
		return x.VolumeGeneration
	}
	return 0
}

type TReleaseDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TReleaseDevicesResponse) Reset() {
	*x = TReleaseDevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TReleaseDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TReleaseDevicesResponse) ProtoMessage() {}

func (x *TReleaseDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TReleaseDevicesResponse.ProtoReflect.Descriptor instead.
func (*TReleaseDevicesResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{31}
}

func (x *TReleaseDevicesResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TAcquireDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume to acquire.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Access mode.
	AccessMode protos.EVolumeAccessMode `protobuf:"varint,4,opt,name=AccessMode,proto3,enum=NCloud.NBlockStore.NProto.EVolumeAccessMode" json:"AccessMode,omitempty"`
	// MountSeqNumber from volume state.
	MountSeqNumber uint64 `protobuf:"varint,5,opt,name=MountSeqNumber,proto3" json:"MountSeqNumber,omitempty"`
	// Volume generation.
	VolumeGeneration uint32 `protobuf:"varint,6,opt,name=VolumeGeneration,proto3" json:"VolumeGeneration,omitempty"`
}

func (x *TAcquireDiskRequest) Reset() {
	*x = TAcquireDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAcquireDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAcquireDiskRequest) ProtoMessage() {}

func (x *TAcquireDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAcquireDiskRequest.ProtoReflect.Descriptor instead.
func (*TAcquireDiskRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{32}
}

func (x *TAcquireDiskRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TAcquireDiskRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TAcquireDiskRequest) GetAccessMode() protos.EVolumeAccessMode {
	if x != nil {
		return x.AccessMode
	}
	return protos.EVolumeAccessMode(0)
}

func (x *TAcquireDiskRequest) GetMountSeqNumber() uint64 {
	if x != nil {
		return x.MountSeqNumber
	}
	return 0
}

func (x *TAcquireDiskRequest) GetVolumeGeneration() uint32 {
	if x != nil {
		return x.VolumeGeneration
	}
	return 0
}

type TAcquireDiskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// List of devices that make up the disk.
	Devices []*TDeviceConfig `protobuf:"bytes,2,rep,name=Devices,proto3" json:"Devices,omitempty"`
	// Migration configuration.
	Migrations []*TDeviceMigration `protobuf:"bytes,3,rep,name=Migrations,proto3" json:"Migrations,omitempty"`
	// Replicas.
	Replicas []*TReplica `protobuf:"bytes,4,rep,name=Replicas,proto3" json:"Replicas,omitempty"`
}

func (x *TAcquireDiskResponse) Reset() {
	*x = TAcquireDiskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAcquireDiskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAcquireDiskResponse) ProtoMessage() {}

func (x *TAcquireDiskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAcquireDiskResponse.ProtoReflect.Descriptor instead.
func (*TAcquireDiskResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{33}
}

func (x *TAcquireDiskResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TAcquireDiskResponse) GetDevices() []*TDeviceConfig {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *TAcquireDiskResponse) GetMigrations() []*TDeviceMigration {
	if x != nil {
		return x.Migrations
	}
	return nil
}

func (x *TAcquireDiskResponse) GetReplicas() []*TReplica {
	if x != nil {
		return x.Replicas
	}
	return nil
}

type TReleaseDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume to release.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Volume generation.
	VolumeGeneration uint32 `protobuf:"varint,4,opt,name=VolumeGeneration,proto3" json:"VolumeGeneration,omitempty"`
}

func (x *TReleaseDiskRequest) Reset() {
	*x = TReleaseDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TReleaseDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TReleaseDiskRequest) ProtoMessage() {}

func (x *TReleaseDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TReleaseDiskRequest.ProtoReflect.Descriptor instead.
func (*TReleaseDiskRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{34}
}

func (x *TReleaseDiskRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TReleaseDiskRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TReleaseDiskRequest) GetVolumeGeneration() uint32 {
	if x != nil {
		return x.VolumeGeneration
	}
	return 0
}

type TReleaseDiskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TReleaseDiskResponse) Reset() {
	*x = TReleaseDiskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TReleaseDiskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TReleaseDiskResponse) ProtoMessage() {}

func (x *TReleaseDiskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TReleaseDiskResponse.ProtoReflect.Descriptor instead.
func (*TReleaseDiskResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{35}
}

func (x *TReleaseDiskResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TDescribeDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
}

func (x *TDescribeDiskRequest) Reset() {
	*x = TDescribeDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDescribeDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDescribeDiskRequest) ProtoMessage() {}

func (x *TDescribeDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDescribeDiskRequest.ProtoReflect.Descriptor instead.
func (*TDescribeDiskRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{36}
}

func (x *TDescribeDiskRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TDescribeDiskRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

type TDescribeDiskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// List of device configs that make up the disk.
	Devices []*TDeviceConfig `protobuf:"bytes,2,rep,name=Devices,proto3" json:"Devices,omitempty"`
	// Minimum addressable block size (smallest unit of I/O operations).
	BlockSize uint32 `protobuf:"varint,3,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`
	// Maximum number of blocks stored in volume.
	BlocksCount uint64 `protobuf:"varint,4,opt,name=BlocksCount,proto3" json:"BlocksCount,omitempty"`
	// Disk's current state.
	State protos.EDiskState `protobuf:"varint,5,opt,name=State,proto3,enum=NCloud.NBlockStore.NProto.EDiskState" json:"State,omitempty"`
	// Timestamp when state has been changed (in microseconds)
	StateTs uint64 `protobuf:"varint,6,opt,name=StateTs,proto3" json:"StateTs,omitempty"`
	// Migrations.
	Migrations []*TDeviceMigration `protobuf:"bytes,7,rep,name=Migrations,proto3" json:"Migrations,omitempty"`
	// Replicas.
	Replicas []*TReplica `protobuf:"bytes,8,rep,name=Replicas,proto3" json:"Replicas,omitempty"`
	// Cloud Id, used for user notification.
	CloudId string `protobuf:"bytes,9,opt,name=CloudId,proto3" json:"CloudId,omitempty"`
	// Folder Id, used for user notification.
	FolderId string `protobuf:"bytes,10,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	// New devices used instead of recently replaced ones.
	DeviceReplacementUUIDs []string `protobuf:"bytes,11,rep,name=DeviceReplacementUUIDs,proto3" json:"DeviceReplacementUUIDs,omitempty"`
}

func (x *TDescribeDiskResponse) Reset() {
	*x = TDescribeDiskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDescribeDiskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDescribeDiskResponse) ProtoMessage() {}

func (x *TDescribeDiskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDescribeDiskResponse.ProtoReflect.Descriptor instead.
func (*TDescribeDiskResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{37}
}

func (x *TDescribeDiskResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TDescribeDiskResponse) GetDevices() []*TDeviceConfig {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *TDescribeDiskResponse) GetBlockSize() uint32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *TDescribeDiskResponse) GetBlocksCount() uint64 {
	if x != nil {
		return x.BlocksCount
	}
	return 0
}

func (x *TDescribeDiskResponse) GetState() protos.EDiskState {
	if x != nil {
		return x.State
	}
	return protos.EDiskState(0)
}

func (x *TDescribeDiskResponse) GetStateTs() uint64 {
	if x != nil {
		return x.StateTs
	}
	return 0
}

func (x *TDescribeDiskResponse) GetMigrations() []*TDeviceMigration {
	if x != nil {
		return x.Migrations
	}
	return nil
}

func (x *TDescribeDiskResponse) GetReplicas() []*TReplica {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *TDescribeDiskResponse) GetCloudId() string {
	if x != nil {
		return x.CloudId
	}
	return ""
}

func (x *TDescribeDiskResponse) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *TDescribeDiskResponse) GetDeviceReplacementUUIDs() []string {
	if x != nil {
		return x.DeviceReplacementUUIDs
	}
	return nil
}

type TReadDeviceBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// UUID of device to read from.
	DeviceUUID string `protobuf:"bytes,2,opt,name=DeviceUUID,proto3" json:"DeviceUUID,omitempty"`
	// Start block index.
	StartIndex uint64 `protobuf:"varint,3,opt,name=StartIndex,proto3" json:"StartIndex,omitempty"`
	// Logical block size
	BlockSize uint32 `protobuf:"varint,4,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`
	// Number of blocks to read.
	BlocksCount uint32 `protobuf:"varint,5,opt,name=BlocksCount,proto3" json:"BlocksCount,omitempty"`
}

func (x *TReadDeviceBlocksRequest) Reset() {
	*x = TReadDeviceBlocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TReadDeviceBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TReadDeviceBlocksRequest) ProtoMessage() {}

func (x *TReadDeviceBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TReadDeviceBlocksRequest.ProtoReflect.Descriptor instead.
func (*TReadDeviceBlocksRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{38}
}

func (x *TReadDeviceBlocksRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TReadDeviceBlocksRequest) GetDeviceUUID() string {
	if x != nil {
		return x.DeviceUUID
	}
	return ""
}

func (x *TReadDeviceBlocksRequest) GetStartIndex() uint64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *TReadDeviceBlocksRequest) GetBlockSize() uint32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *TReadDeviceBlocksRequest) GetBlocksCount() uint32 {
	if x != nil {
		return x.BlocksCount
	}
	return 0
}

type TReadDeviceBlocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Requested blocks.
	Blocks *protos.TIOVector `protobuf:"bytes,2,opt,name=Blocks,proto3" json:"Blocks,omitempty"`
}

func (x *TReadDeviceBlocksResponse) Reset() {
	*x = TReadDeviceBlocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TReadDeviceBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TReadDeviceBlocksResponse) ProtoMessage() {}

func (x *TReadDeviceBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TReadDeviceBlocksResponse.ProtoReflect.Descriptor instead.
func (*TReadDeviceBlocksResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{39}
}

func (x *TReadDeviceBlocksResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TReadDeviceBlocksResponse) GetBlocks() *protos.TIOVector {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type TWriteDeviceBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// UUID of device to write to.
	DeviceUUID string `protobuf:"bytes,2,opt,name=DeviceUUID,proto3" json:"DeviceUUID,omitempty"`
	// Start block index.
	StartIndex uint64 `protobuf:"varint,3,opt,name=StartIndex,proto3" json:"StartIndex,omitempty"`
	// Logical block size
	BlockSize uint32 `protobuf:"varint,4,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`
	// Blocks to write.
	Blocks *protos.TIOVector `protobuf:"bytes,5,opt,name=Blocks,proto3" json:"Blocks,omitempty"`
	// RequestId generated by TVolumeAgent
	VolumeRequestId uint64 `protobuf:"varint,7,opt,name=VolumeRequestId,proto3" json:"VolumeRequestId,omitempty"`
	// The flag is set when the original request is split into requests to
	// multiple devices
	MultideviceRequest bool `protobuf:"varint,8,opt,name=MultideviceRequest,proto3" json:"MultideviceRequest,omitempty"`
}

func (x *TWriteDeviceBlocksRequest) Reset() {
	*x = TWriteDeviceBlocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TWriteDeviceBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TWriteDeviceBlocksRequest) ProtoMessage() {}

func (x *TWriteDeviceBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TWriteDeviceBlocksRequest.ProtoReflect.Descriptor instead.
func (*TWriteDeviceBlocksRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{40}
}

func (x *TWriteDeviceBlocksRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TWriteDeviceBlocksRequest) GetDeviceUUID() string {
	if x != nil {
		return x.DeviceUUID
	}
	return ""
}

func (x *TWriteDeviceBlocksRequest) GetStartIndex() uint64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *TWriteDeviceBlocksRequest) GetBlockSize() uint32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *TWriteDeviceBlocksRequest) GetBlocks() *protos.TIOVector {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *TWriteDeviceBlocksRequest) GetVolumeRequestId() uint64 {
	if x != nil {
		return x.VolumeRequestId
	}
	return 0
}

func (x *TWriteDeviceBlocksRequest) GetMultideviceRequest() bool {
	if x != nil {
		return x.MultideviceRequest
	}
	return false
}

type TWriteDeviceBlocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TWriteDeviceBlocksResponse) Reset() {
	*x = TWriteDeviceBlocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TWriteDeviceBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TWriteDeviceBlocksResponse) ProtoMessage() {}

func (x *TWriteDeviceBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TWriteDeviceBlocksResponse.ProtoReflect.Descriptor instead.
func (*TWriteDeviceBlocksResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{41}
}

func (x *TWriteDeviceBlocksResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TZeroDeviceBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// UUID of device to write to.
	DeviceUUID string `protobuf:"bytes,2,opt,name=DeviceUUID,proto3" json:"DeviceUUID,omitempty"`
	// Start block index.
	StartIndex uint64 `protobuf:"varint,3,opt,name=StartIndex,proto3" json:"StartIndex,omitempty"`
	// Logical block size
	BlockSize uint32 `protobuf:"varint,4,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`
	// Number of blocks to delete.
	BlocksCount uint32 `protobuf:"varint,5,opt,name=BlocksCount,proto3" json:"BlocksCount,omitempty"`
	// RequestId generated by TVolumeAgent
	VolumeRequestId uint64 `protobuf:"varint,7,opt,name=VolumeRequestId,proto3" json:"VolumeRequestId,omitempty"`
	// The flag is set when the original request is split into requests to
	// multiple devices
	MultideviceRequest bool `protobuf:"varint,8,opt,name=MultideviceRequest,proto3" json:"MultideviceRequest,omitempty"`
}

func (x *TZeroDeviceBlocksRequest) Reset() {
	*x = TZeroDeviceBlocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TZeroDeviceBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TZeroDeviceBlocksRequest) ProtoMessage() {}

func (x *TZeroDeviceBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TZeroDeviceBlocksRequest.ProtoReflect.Descriptor instead.
func (*TZeroDeviceBlocksRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{42}
}

func (x *TZeroDeviceBlocksRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TZeroDeviceBlocksRequest) GetDeviceUUID() string {
	if x != nil {
		return x.DeviceUUID
	}
	return ""
}

func (x *TZeroDeviceBlocksRequest) GetStartIndex() uint64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *TZeroDeviceBlocksRequest) GetBlockSize() uint32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *TZeroDeviceBlocksRequest) GetBlocksCount() uint32 {
	if x != nil {
		return x.BlocksCount
	}
	return 0
}

func (x *TZeroDeviceBlocksRequest) GetVolumeRequestId() uint64 {
	if x != nil {
		return x.VolumeRequestId
	}
	return 0
}

func (x *TZeroDeviceBlocksRequest) GetMultideviceRequest() bool {
	if x != nil {
		return x.MultideviceRequest
	}
	return false
}

type TZeroDeviceBlocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TZeroDeviceBlocksResponse) Reset() {
	*x = TZeroDeviceBlocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TZeroDeviceBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TZeroDeviceBlocksResponse) ProtoMessage() {}

func (x *TZeroDeviceBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TZeroDeviceBlocksResponse.ProtoReflect.Descriptor instead.
func (*TZeroDeviceBlocksResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{43}
}

func (x *TZeroDeviceBlocksResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TUpdateConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders     `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	Config  *TDiskRegistryConfig `protobuf:"bytes,2,opt,name=Config,proto3" json:"Config,omitempty"`
	// Ignore config version and force to apply config
	IgnoreVersion bool `protobuf:"varint,4,opt,name=IgnoreVersion,proto3" json:"IgnoreVersion,omitempty"`
}

func (x *TUpdateConfigRequest) Reset() {
	*x = TUpdateConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TUpdateConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TUpdateConfigRequest) ProtoMessage() {}

func (x *TUpdateConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TUpdateConfigRequest.ProtoReflect.Descriptor instead.
func (*TUpdateConfigRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{44}
}

func (x *TUpdateConfigRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TUpdateConfigRequest) GetConfig() *TDiskRegistryConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TUpdateConfigRequest) GetIgnoreVersion() bool {
	if x != nil {
		return x.IgnoreVersion
	}
	return false
}

type TUpdateConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Disks that depend on removed devices
	AffectedDisks []string `protobuf:"bytes,2,rep,name=AffectedDisks,proto3" json:"AffectedDisks,omitempty"`
}

func (x *TUpdateConfigResponse) Reset() {
	*x = TUpdateConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TUpdateConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TUpdateConfigResponse) ProtoMessage() {}

func (x *TUpdateConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TUpdateConfigResponse.ProtoReflect.Descriptor instead.
func (*TUpdateConfigResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{45}
}

func (x *TUpdateConfigResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TUpdateConfigResponse) GetAffectedDisks() []string {
	if x != nil {
		return x.AffectedDisks
	}
	return nil
}

type TDescribeConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
}

func (x *TDescribeConfigRequest) Reset() {
	*x = TDescribeConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDescribeConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDescribeConfigRequest) ProtoMessage() {}

func (x *TDescribeConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDescribeConfigRequest.ProtoReflect.Descriptor instead.
func (*TDescribeConfigRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{46}
}

func (x *TDescribeConfigRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

type TDescribeConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error  *protos1.TError      `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	Config *TDiskRegistryConfig `protobuf:"bytes,2,opt,name=Config,proto3" json:"Config,omitempty"`
}

func (x *TDescribeConfigResponse) Reset() {
	*x = TDescribeConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDescribeConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDescribeConfigResponse) ProtoMessage() {}

func (x *TDescribeConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDescribeConfigResponse.ProtoReflect.Descriptor instead.
func (*TDescribeConfigResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{47}
}

func (x *TDescribeConfigResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TDescribeConfigResponse) GetConfig() *TDiskRegistryConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type TSecureEraseDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers    *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	DeviceUUID string           `protobuf:"bytes,2,opt,name=DeviceUUID,proto3" json:"DeviceUUID,omitempty"`
}

func (x *TSecureEraseDeviceRequest) Reset() {
	*x = TSecureEraseDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSecureEraseDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSecureEraseDeviceRequest) ProtoMessage() {}

func (x *TSecureEraseDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSecureEraseDeviceRequest.ProtoReflect.Descriptor instead.
func (*TSecureEraseDeviceRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{48}
}

func (x *TSecureEraseDeviceRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TSecureEraseDeviceRequest) GetDeviceUUID() string {
	if x != nil {
		return x.DeviceUUID
	}
	return ""
}

type TSecureEraseDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TSecureEraseDeviceResponse) Reset() {
	*x = TSecureEraseDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSecureEraseDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSecureEraseDeviceResponse) ProtoMessage() {}

func (x *TSecureEraseDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSecureEraseDeviceResponse.ProtoReflect.Descriptor instead.
func (*TSecureEraseDeviceResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{49}
}

func (x *TSecureEraseDeviceResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TChecksumDeviceBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// UUID of device to read from.
	DeviceUUID string `protobuf:"bytes,2,opt,name=DeviceUUID,proto3" json:"DeviceUUID,omitempty"`
	// Start block index.
	StartIndex uint64 `protobuf:"varint,3,opt,name=StartIndex,proto3" json:"StartIndex,omitempty"`
	// Logical block size
	BlockSize uint32 `protobuf:"varint,4,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`
	// Number of blocks to read.
	BlocksCount uint32 `protobuf:"varint,5,opt,name=BlocksCount,proto3" json:"BlocksCount,omitempty"`
}

func (x *TChecksumDeviceBlocksRequest) Reset() {
	*x = TChecksumDeviceBlocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TChecksumDeviceBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TChecksumDeviceBlocksRequest) ProtoMessage() {}

func (x *TChecksumDeviceBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TChecksumDeviceBlocksRequest.ProtoReflect.Descriptor instead.
func (*TChecksumDeviceBlocksRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{50}
}

func (x *TChecksumDeviceBlocksRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TChecksumDeviceBlocksRequest) GetDeviceUUID() string {
	if x != nil {
		return x.DeviceUUID
	}
	return ""
}

func (x *TChecksumDeviceBlocksRequest) GetStartIndex() uint64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *TChecksumDeviceBlocksRequest) GetBlockSize() uint32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *TChecksumDeviceBlocksRequest) GetBlocksCount() uint32 {
	if x != nil {
		return x.BlocksCount
	}
	return 0
}

type TChecksumDeviceBlocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Requested blocks checksum.
	Checksum uint64 `protobuf:"varint,2,opt,name=Checksum,proto3" json:"Checksum,omitempty"`
}

func (x *TChecksumDeviceBlocksResponse) Reset() {
	*x = TChecksumDeviceBlocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TChecksumDeviceBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TChecksumDeviceBlocksResponse) ProtoMessage() {}

func (x *TChecksumDeviceBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TChecksumDeviceBlocksResponse.ProtoReflect.Descriptor instead.
func (*TChecksumDeviceBlocksResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{51}
}

func (x *TChecksumDeviceBlocksResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TChecksumDeviceBlocksResponse) GetChecksum() uint64 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

type TDisableConcreteAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Optional device filter - if set, only the specified devices will be
	// affected.
	DeviceUUIDs []string `protobuf:"bytes,2,rep,name=DeviceUUIDs,proto3" json:"DeviceUUIDs,omitempty"`
}

func (x *TDisableConcreteAgentRequest) Reset() {
	*x = TDisableConcreteAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDisableConcreteAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDisableConcreteAgentRequest) ProtoMessage() {}

func (x *TDisableConcreteAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDisableConcreteAgentRequest.ProtoReflect.Descriptor instead.
func (*TDisableConcreteAgentRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{52}
}

func (x *TDisableConcreteAgentRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TDisableConcreteAgentRequest) GetDeviceUUIDs() []string {
	if x != nil {
		return x.DeviceUUIDs
	}
	return nil
}

type TDisableConcreteAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TDisableConcreteAgentResponse) Reset() {
	*x = TDisableConcreteAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDisableConcreteAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDisableConcreteAgentResponse) ProtoMessage() {}

func (x *TDisableConcreteAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDisableConcreteAgentResponse.ProtoReflect.Descriptor instead.
func (*TDisableConcreteAgentResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{53}
}

func (x *TDisableConcreteAgentResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TEnableAgentDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// The specified device will be enabled back after
	// disabling via TDisableConcreteAgentRequest.
	DeviceUUID string `protobuf:"bytes,2,opt,name=DeviceUUID,proto3" json:"DeviceUUID,omitempty"`
}

func (x *TEnableAgentDeviceRequest) Reset() {
	*x = TEnableAgentDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TEnableAgentDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TEnableAgentDeviceRequest) ProtoMessage() {}

func (x *TEnableAgentDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TEnableAgentDeviceRequest.ProtoReflect.Descriptor instead.
func (*TEnableAgentDeviceRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{54}
}

func (x *TEnableAgentDeviceRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TEnableAgentDeviceRequest) GetDeviceUUID() string {
	if x != nil {
		return x.DeviceUUID
	}
	return ""
}

type TEnableAgentDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TEnableAgentDeviceResponse) Reset() {
	*x = TEnableAgentDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TEnableAgentDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TEnableAgentDeviceResponse) ProtoMessage() {}

func (x *TEnableAgentDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TEnableAgentDeviceResponse.ProtoReflect.Descriptor instead.
func (*TEnableAgentDeviceResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{55}
}

func (x *TEnableAgentDeviceResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TStartForceMigrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Disk whose device will be migrated.
	SourceDiskId string `protobuf:"bytes,2,opt,name=SourceDiskId,proto3" json:"SourceDiskId,omitempty"`
	// Device to migrate.
	SourceDeviceId string `protobuf:"bytes,3,opt,name=SourceDeviceId,proto3" json:"SourceDeviceId,omitempty"`
	// Target device for migration.
	TargetDeviceId string `protobuf:"bytes,4,opt,name=TargetDeviceId,proto3" json:"TargetDeviceId,omitempty"`
}

func (x *TStartForceMigrationRequest) Reset() {
	*x = TStartForceMigrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TStartForceMigrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TStartForceMigrationRequest) ProtoMessage() {}

func (x *TStartForceMigrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TStartForceMigrationRequest.ProtoReflect.Descriptor instead.
func (*TStartForceMigrationRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{56}
}

func (x *TStartForceMigrationRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TStartForceMigrationRequest) GetSourceDiskId() string {
	if x != nil {
		return x.SourceDiskId
	}
	return ""
}

func (x *TStartForceMigrationRequest) GetSourceDeviceId() string {
	if x != nil {
		return x.SourceDeviceId
	}
	return ""
}

func (x *TStartForceMigrationRequest) GetTargetDeviceId() string {
	if x != nil {
		return x.TargetDeviceId
	}
	return ""
}

type TStartForceMigrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TStartForceMigrationResponse) Reset() {
	*x = TStartForceMigrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TStartForceMigrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TStartForceMigrationResponse) ProtoMessage() {}

func (x *TStartForceMigrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TStartForceMigrationResponse.ProtoReflect.Descriptor instead.
func (*TStartForceMigrationResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{57}
}

func (x *TStartForceMigrationResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TUpdateAgentStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers    *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	AgentStats *TAgentStats     `protobuf:"bytes,2,opt,name=AgentStats,proto3" json:"AgentStats,omitempty"`
}

func (x *TUpdateAgentStatsRequest) Reset() {
	*x = TUpdateAgentStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TUpdateAgentStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TUpdateAgentStatsRequest) ProtoMessage() {}

func (x *TUpdateAgentStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TUpdateAgentStatsRequest.ProtoReflect.Descriptor instead.
func (*TUpdateAgentStatsRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{58}
}

func (x *TUpdateAgentStatsRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TUpdateAgentStatsRequest) GetAgentStats() *TAgentStats {
	if x != nil {
		return x.AgentStats
	}
	return nil
}

type TUpdateAgentStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TUpdateAgentStatsResponse) Reset() {
	*x = TUpdateAgentStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TUpdateAgentStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TUpdateAgentStatsResponse) ProtoMessage() {}

func (x *TUpdateAgentStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TUpdateAgentStatsResponse.ProtoReflect.Descriptor instead.
func (*TUpdateAgentStatsResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{59}
}

func (x *TUpdateAgentStatsResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TReplaceDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Target disk
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Device to be replaced
	DeviceUUID string `protobuf:"bytes,3,opt,name=DeviceUUID,proto3" json:"DeviceUUID,omitempty"`
	// Device to use for the replacement
	DeviceReplacementUUID string `protobuf:"bytes,4,opt,name=DeviceReplacementUUID,proto3" json:"DeviceReplacementUUID,omitempty"`
}

func (x *TReplaceDeviceRequest) Reset() {
	*x = TReplaceDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TReplaceDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TReplaceDeviceRequest) ProtoMessage() {}

func (x *TReplaceDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TReplaceDeviceRequest.ProtoReflect.Descriptor instead.
func (*TReplaceDeviceRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{60}
}

func (x *TReplaceDeviceRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TReplaceDeviceRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TReplaceDeviceRequest) GetDeviceUUID() string {
	if x != nil {
		return x.DeviceUUID
	}
	return ""
}

func (x *TReplaceDeviceRequest) GetDeviceReplacementUUID() string {
	if x != nil {
		return x.DeviceReplacementUUID
	}
	return ""
}

type TReplaceDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TReplaceDeviceResponse) Reset() {
	*x = TReplaceDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TReplaceDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TReplaceDeviceResponse) ProtoMessage() {}

func (x *TReplaceDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TReplaceDeviceResponse.ProtoReflect.Descriptor instead.
func (*TReplaceDeviceResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{61}
}

func (x *TReplaceDeviceResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TChangeDeviceStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Target device.
	DeviceUUID string `protobuf:"bytes,2,opt,name=DeviceUUID,proto3" json:"DeviceUUID,omitempty"`
	// New state.
	DeviceState EDeviceState `protobuf:"varint,3,opt,name=DeviceState,proto3,enum=NCloud.NBlockStore.NProto.EDeviceState" json:"DeviceState,omitempty"`
	// Reason for the new state.
	Reason string `protobuf:"bytes,4,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (x *TChangeDeviceStateRequest) Reset() {
	*x = TChangeDeviceStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TChangeDeviceStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TChangeDeviceStateRequest) ProtoMessage() {}

func (x *TChangeDeviceStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TChangeDeviceStateRequest.ProtoReflect.Descriptor instead.
func (*TChangeDeviceStateRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{62}
}

func (x *TChangeDeviceStateRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TChangeDeviceStateRequest) GetDeviceUUID() string {
	if x != nil {
		return x.DeviceUUID
	}
	return ""
}

func (x *TChangeDeviceStateRequest) GetDeviceState() EDeviceState {
	if x != nil {
		return x.DeviceState
	}
	return EDeviceState_DEVICE_STATE_ONLINE
}

func (x *TChangeDeviceStateRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type TChangeDeviceStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TChangeDeviceStateResponse) Reset() {
	*x = TChangeDeviceStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TChangeDeviceStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TChangeDeviceStateResponse) ProtoMessage() {}

func (x *TChangeDeviceStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TChangeDeviceStateResponse.ProtoReflect.Descriptor instead.
func (*TChangeDeviceStateResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{63}
}

func (x *TChangeDeviceStateResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TChangeAgentStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Target agent.
	AgentId string `protobuf:"bytes,2,opt,name=AgentId,proto3" json:"AgentId,omitempty"`
	// New state.
	AgentState EAgentState `protobuf:"varint,3,opt,name=AgentState,proto3,enum=NCloud.NBlockStore.NProto.EAgentState" json:"AgentState,omitempty"`
	// Reason for the new state.
	Reason string `protobuf:"bytes,4,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (x *TChangeAgentStateRequest) Reset() {
	*x = TChangeAgentStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TChangeAgentStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TChangeAgentStateRequest) ProtoMessage() {}

func (x *TChangeAgentStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TChangeAgentStateRequest.ProtoReflect.Descriptor instead.
func (*TChangeAgentStateRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{64}
}

func (x *TChangeAgentStateRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TChangeAgentStateRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *TChangeAgentStateRequest) GetAgentState() EAgentState {
	if x != nil {
		return x.AgentState
	}
	return EAgentState_AGENT_STATE_ONLINE
}

func (x *TChangeAgentStateRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type TChangeAgentStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TChangeAgentStateResponse) Reset() {
	*x = TChangeAgentStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TChangeAgentStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TChangeAgentStateResponse) ProtoMessage() {}

func (x *TChangeAgentStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TChangeAgentStateResponse.ProtoReflect.Descriptor instead.
func (*TChangeAgentStateResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{65}
}

func (x *TChangeAgentStateResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TDisableAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Target agent.
	AgentId string `protobuf:"bytes,2,opt,name=AgentId,proto3" json:"AgentId,omitempty"`
	// Optional device filter - if set, only the specified devices will be
	// affected.
	DeviceUUIDs []string `protobuf:"bytes,3,rep,name=DeviceUUIDs,proto3" json:"DeviceUUIDs,omitempty"`
}

func (x *TDisableAgentRequest) Reset() {
	*x = TDisableAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDisableAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDisableAgentRequest) ProtoMessage() {}

func (x *TDisableAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDisableAgentRequest.ProtoReflect.Descriptor instead.
func (*TDisableAgentRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{66}
}

func (x *TDisableAgentRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TDisableAgentRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *TDisableAgentRequest) GetDeviceUUIDs() []string {
	if x != nil {
		return x.DeviceUUIDs
	}
	return nil
}

type TDisableAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TDisableAgentResponse) Reset() {
	*x = TDisableAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDisableAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDisableAgentResponse) ProtoMessage() {}

func (x *TDisableAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDisableAgentResponse.ProtoReflect.Descriptor instead.
func (*TDisableAgentResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{67}
}

func (x *TDisableAgentResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TDeviceMigrationIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Migration source device id
	SourceDeviceId string `protobuf:"bytes,1,opt,name=SourceDeviceId,proto3" json:"SourceDeviceId,omitempty"`
	// Migration target device id
	TargetDeviceId string `protobuf:"bytes,2,opt,name=TargetDeviceId,proto3" json:"TargetDeviceId,omitempty"`
}

func (x *TDeviceMigrationIds) Reset() {
	*x = TDeviceMigrationIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDeviceMigrationIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDeviceMigrationIds) ProtoMessage() {}

func (x *TDeviceMigrationIds) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDeviceMigrationIds.ProtoReflect.Descriptor instead.
func (*TDeviceMigrationIds) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{68}
}

func (x *TDeviceMigrationIds) GetSourceDeviceId() string {
	if x != nil {
		return x.SourceDeviceId
	}
	return ""
}

func (x *TDeviceMigrationIds) GetTargetDeviceId() string {
	if x != nil {
		return x.TargetDeviceId
	}
	return ""
}

type TFinishMigrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Migrations.
	Migrations []*TDeviceMigrationIds `protobuf:"bytes,3,rep,name=Migrations,proto3" json:"Migrations,omitempty"`
}

func (x *TFinishMigrationRequest) Reset() {
	*x = TFinishMigrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFinishMigrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFinishMigrationRequest) ProtoMessage() {}

func (x *TFinishMigrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFinishMigrationRequest.ProtoReflect.Descriptor instead.
func (*TFinishMigrationRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{69}
}

func (x *TFinishMigrationRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TFinishMigrationRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TFinishMigrationRequest) GetMigrations() []*TDeviceMigrationIds {
	if x != nil {
		return x.Migrations
	}
	return nil
}

type TFinishMigrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TFinishMigrationResponse) Reset() {
	*x = TFinishMigrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFinishMigrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFinishMigrationResponse) ProtoMessage() {}

func (x *TFinishMigrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFinishMigrationResponse.ProtoReflect.Descriptor instead.
func (*TFinishMigrationResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{70}
}

func (x *TFinishMigrationResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TBackupDiskRegistryStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Backup local DB instead of memory state.
	BackupLocalDB bool `protobuf:"varint,2,opt,name=BackupLocalDB,proto3" json:"BackupLocalDB,omitempty"`
	// File to save backup file.
	BackupFilePath string `protobuf:"bytes,3,opt,name=BackupFilePath,proto3" json:"BackupFilePath,omitempty"`
}

func (x *TBackupDiskRegistryStateRequest) Reset() {
	*x = TBackupDiskRegistryStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TBackupDiskRegistryStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TBackupDiskRegistryStateRequest) ProtoMessage() {}

func (x *TBackupDiskRegistryStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TBackupDiskRegistryStateRequest.ProtoReflect.Descriptor instead.
func (*TBackupDiskRegistryStateRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{71}
}

func (x *TBackupDiskRegistryStateRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TBackupDiskRegistryStateRequest) GetBackupLocalDB() bool {
	if x != nil {
		return x.BackupLocalDB
	}
	return false
}

func (x *TBackupDiskRegistryStateRequest) GetBackupFilePath() string {
	if x != nil {
		return x.BackupFilePath
	}
	return ""
}

type TBackupDiskRegistryStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Disk Regsitry state backup
	Backup *TDiskRegistryStateBackup `protobuf:"bytes,2,opt,name=Backup,proto3" json:"Backup,omitempty"`
	// File to save backup file.
	BackupFilePath string `protobuf:"bytes,3,opt,name=BackupFilePath,proto3" json:"BackupFilePath,omitempty"`
}

func (x *TBackupDiskRegistryStateResponse) Reset() {
	*x = TBackupDiskRegistryStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TBackupDiskRegistryStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TBackupDiskRegistryStateResponse) ProtoMessage() {}

func (x *TBackupDiskRegistryStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TBackupDiskRegistryStateResponse.ProtoReflect.Descriptor instead.
func (*TBackupDiskRegistryStateResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{72}
}

func (x *TBackupDiskRegistryStateResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TBackupDiskRegistryStateResponse) GetBackup() *TDiskRegistryStateBackup {
	if x != nil {
		return x.Backup
	}
	return nil
}

func (x *TBackupDiskRegistryStateResponse) GetBackupFilePath() string {
	if x != nil {
		return x.BackupFilePath
	}
	return ""
}

type TRestoreDiskRegistryStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Disk Registry state backup.
	Backup *TDiskRegistryStateBackup `protobuf:"bytes,2,opt,name=Backup,proto3" json:"Backup,omitempty"`
	// Ignore validation check.
	Force bool `protobuf:"varint,3,opt,name=Force,proto3" json:"Force,omitempty"`
}

func (x *TRestoreDiskRegistryStateRequest) Reset() {
	*x = TRestoreDiskRegistryStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TRestoreDiskRegistryStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TRestoreDiskRegistryStateRequest) ProtoMessage() {}

func (x *TRestoreDiskRegistryStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TRestoreDiskRegistryStateRequest.ProtoReflect.Descriptor instead.
func (*TRestoreDiskRegistryStateRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{73}
}

func (x *TRestoreDiskRegistryStateRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TRestoreDiskRegistryStateRequest) GetBackup() *TDiskRegistryStateBackup {
	if x != nil {
		return x.Backup
	}
	return nil
}

func (x *TRestoreDiskRegistryStateRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type TRestoreDiskRegistryStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TRestoreDiskRegistryStateResponse) Reset() {
	*x = TRestoreDiskRegistryStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TRestoreDiskRegistryStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TRestoreDiskRegistryStateResponse) ProtoMessage() {}

func (x *TRestoreDiskRegistryStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TRestoreDiskRegistryStateResponse.ProtoReflect.Descriptor instead.
func (*TRestoreDiskRegistryStateResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{74}
}

func (x *TRestoreDiskRegistryStateResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TSetWritableStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Change writable state option.
	State bool `protobuf:"varint,2,opt,name=State,proto3" json:"State,omitempty"`
}

func (x *TSetWritableStateRequest) Reset() {
	*x = TSetWritableStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSetWritableStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSetWritableStateRequest) ProtoMessage() {}

func (x *TSetWritableStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSetWritableStateRequest.ProtoReflect.Descriptor instead.
func (*TSetWritableStateRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{75}
}

func (x *TSetWritableStateRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TSetWritableStateRequest) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

type TSetWritableStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TSetWritableStateResponse) Reset() {
	*x = TSetWritableStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSetWritableStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSetWritableStateResponse) ProtoMessage() {}

func (x *TSetWritableStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSetWritableStateResponse.ProtoReflect.Descriptor instead.
func (*TSetWritableStateResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{76}
}

func (x *TSetWritableStateResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TMarkDiskForCleanupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Volume label.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
}

func (x *TMarkDiskForCleanupRequest) Reset() {
	*x = TMarkDiskForCleanupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TMarkDiskForCleanupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TMarkDiskForCleanupRequest) ProtoMessage() {}

func (x *TMarkDiskForCleanupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TMarkDiskForCleanupRequest.ProtoReflect.Descriptor instead.
func (*TMarkDiskForCleanupRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{77}
}

func (x *TMarkDiskForCleanupRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TMarkDiskForCleanupRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

type TMarkDiskForCleanupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, will be set if error occured.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TMarkDiskForCleanupResponse) Reset() {
	*x = TMarkDiskForCleanupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TMarkDiskForCleanupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TMarkDiskForCleanupResponse) ProtoMessage() {}

func (x *TMarkDiskForCleanupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TMarkDiskForCleanupResponse.ProtoReflect.Descriptor instead.
func (*TMarkDiskForCleanupResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{78}
}

func (x *TMarkDiskForCleanupResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TSetUserIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Volume label.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// User IAM ID for notifications.
	UserId string `protobuf:"bytes,3,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *TSetUserIdRequest) Reset() {
	*x = TSetUserIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSetUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSetUserIdRequest) ProtoMessage() {}

func (x *TSetUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSetUserIdRequest.ProtoReflect.Descriptor instead.
func (*TSetUserIdRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{79}
}

func (x *TSetUserIdRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TSetUserIdRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TSetUserIdRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type TSetUserIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, will be set if error occured.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TSetUserIdResponse) Reset() {
	*x = TSetUserIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSetUserIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSetUserIdResponse) ProtoMessage() {}

func (x *TSetUserIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSetUserIdResponse.ProtoReflect.Descriptor instead.
func (*TSetUserIdResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{80}
}

func (x *TSetUserIdResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TUpdateDiskBlockSizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Disk identifier to perform operations on.
	DiskId string `protobuf:"bytes,1,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Disk block size in bytes.
	BlockSize uint32 `protobuf:"varint,2,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`
	// Force dangerous actions
	Force bool `protobuf:"varint,3,opt,name=Force,proto3" json:"Force,omitempty"`
}

func (x *TUpdateDiskBlockSizeRequest) Reset() {
	*x = TUpdateDiskBlockSizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TUpdateDiskBlockSizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TUpdateDiskBlockSizeRequest) ProtoMessage() {}

func (x *TUpdateDiskBlockSizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TUpdateDiskBlockSizeRequest.ProtoReflect.Descriptor instead.
func (*TUpdateDiskBlockSizeRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{81}
}

func (x *TUpdateDiskBlockSizeRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TUpdateDiskBlockSizeRequest) GetBlockSize() uint32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *TUpdateDiskBlockSizeRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type TUpdateDiskBlockSizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TUpdateDiskBlockSizeResponse) Reset() {
	*x = TUpdateDiskBlockSizeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TUpdateDiskBlockSizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TUpdateDiskBlockSizeResponse) ProtoMessage() {}

func (x *TUpdateDiskBlockSizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TUpdateDiskBlockSizeResponse.ProtoReflect.Descriptor instead.
func (*TUpdateDiskBlockSizeResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{82}
}

func (x *TUpdateDiskBlockSizeResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TUpdateDiskReplicaCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Disk identifier to perform operations on.
	MasterDiskId string `protobuf:"bytes,1,opt,name=MasterDiskId,proto3" json:"MasterDiskId,omitempty"`
	// Desired replica count
	ReplicaCount uint32 `protobuf:"varint,2,opt,name=ReplicaCount,proto3" json:"ReplicaCount,omitempty"`
}

func (x *TUpdateDiskReplicaCountRequest) Reset() {
	*x = TUpdateDiskReplicaCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TUpdateDiskReplicaCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TUpdateDiskReplicaCountRequest) ProtoMessage() {}

func (x *TUpdateDiskReplicaCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TUpdateDiskReplicaCountRequest.ProtoReflect.Descriptor instead.
func (*TUpdateDiskReplicaCountRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{83}
}

func (x *TUpdateDiskReplicaCountRequest) GetMasterDiskId() string {
	if x != nil {
		return x.MasterDiskId
	}
	return ""
}

func (x *TUpdateDiskReplicaCountRequest) GetReplicaCount() uint32 {
	if x != nil {
		return x.ReplicaCount
	}
	return 0
}

type TUpdateDiskReplicaCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TUpdateDiskReplicaCountResponse) Reset() {
	*x = TUpdateDiskReplicaCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TUpdateDiskReplicaCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TUpdateDiskReplicaCountResponse) ProtoMessage() {}

func (x *TUpdateDiskReplicaCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TUpdateDiskReplicaCountResponse.ProtoReflect.Descriptor instead.
func (*TUpdateDiskReplicaCountResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{84}
}

func (x *TUpdateDiskReplicaCountResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TMarkReplacementDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Disk identifier to perform operations on.
	DiskId string `protobuf:"bytes,1,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Device id to mark.
	DeviceId string `protobuf:"bytes,2,opt,name=DeviceId,proto3" json:"DeviceId,omitempty"`
	// Adds/removes this device to the replacement list.
	IsReplacement bool `protobuf:"varint,3,opt,name=IsReplacement,proto3" json:"IsReplacement,omitempty"`
}

func (x *TMarkReplacementDeviceRequest) Reset() {
	*x = TMarkReplacementDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TMarkReplacementDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TMarkReplacementDeviceRequest) ProtoMessage() {}

func (x *TMarkReplacementDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TMarkReplacementDeviceRequest.ProtoReflect.Descriptor instead.
func (*TMarkReplacementDeviceRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{85}
}

func (x *TMarkReplacementDeviceRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TMarkReplacementDeviceRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *TMarkReplacementDeviceRequest) GetIsReplacement() bool {
	if x != nil {
		return x.IsReplacement
	}
	return false
}

type TMarkReplacementDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TMarkReplacementDeviceResponse) Reset() {
	*x = TMarkReplacementDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TMarkReplacementDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TMarkReplacementDeviceResponse) ProtoMessage() {}

func (x *TMarkReplacementDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TMarkReplacementDeviceResponse.ProtoReflect.Descriptor instead.
func (*TMarkReplacementDeviceResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{86}
}

func (x *TMarkReplacementDeviceResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TSuspendDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Device id.
	DeviceId string `protobuf:"bytes,2,opt,name=DeviceId,proto3" json:"DeviceId,omitempty"`
}

func (x *TSuspendDeviceRequest) Reset() {
	*x = TSuspendDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSuspendDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSuspendDeviceRequest) ProtoMessage() {}

func (x *TSuspendDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSuspendDeviceRequest.ProtoReflect.Descriptor instead.
func (*TSuspendDeviceRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{87}
}

func (x *TSuspendDeviceRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TSuspendDeviceRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type TSuspendDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TSuspendDeviceResponse) Reset() {
	*x = TSuspendDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSuspendDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSuspendDeviceResponse) ProtoMessage() {}

func (x *TSuspendDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSuspendDeviceResponse.ProtoReflect.Descriptor instead.
func (*TSuspendDeviceResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{88}
}

func (x *TSuspendDeviceResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TUpdatePlacementGroupSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Id of the group.
	GroupId string `protobuf:"bytes,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	// Config version.
	ConfigVersion uint32 `protobuf:"varint,3,opt,name=ConfigVersion,proto3" json:"ConfigVersion,omitempty"`
	// Settings.
	Settings *protos.TPlacementGroupSettings `protobuf:"bytes,4,opt,name=Settings,proto3" json:"Settings,omitempty"`
}

func (x *TUpdatePlacementGroupSettingsRequest) Reset() {
	*x = TUpdatePlacementGroupSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TUpdatePlacementGroupSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TUpdatePlacementGroupSettingsRequest) ProtoMessage() {}

func (x *TUpdatePlacementGroupSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TUpdatePlacementGroupSettingsRequest.ProtoReflect.Descriptor instead.
func (*TUpdatePlacementGroupSettingsRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{89}
}

func (x *TUpdatePlacementGroupSettingsRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TUpdatePlacementGroupSettingsRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *TUpdatePlacementGroupSettingsRequest) GetConfigVersion() uint32 {
	if x != nil {
		return x.ConfigVersion
	}
	return 0
}

func (x *TUpdatePlacementGroupSettingsRequest) GetSettings() *protos.TPlacementGroupSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type TUpdatePlacementGroupSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TUpdatePlacementGroupSettingsResponse) Reset() {
	*x = TUpdatePlacementGroupSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TUpdatePlacementGroupSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TUpdatePlacementGroupSettingsResponse) ProtoMessage() {}

func (x *TUpdatePlacementGroupSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TUpdatePlacementGroupSettingsResponse.ProtoReflect.Descriptor instead.
func (*TUpdatePlacementGroupSettingsResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{90}
}

func (x *TUpdatePlacementGroupSettingsResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TCreateVolumeFromDevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label of volume to create.
	DiskId string `protobuf:"bytes,1,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Owner information.
	ProjectId string `protobuf:"bytes,2,opt,name=ProjectId,proto3" json:"ProjectId,omitempty"`
	// User folder Id, used for billing.
	FolderId string `protobuf:"bytes,3,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	// Cloud Id, used for billing.
	CloudId string `protobuf:"bytes,4,opt,name=CloudId,proto3" json:"CloudId,omitempty"`
	// Block size in bytes
	BlockSize uint32 `protobuf:"varint,5,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`
	// Devices from which the disk is assembled
	DeviceUUIDs []string `protobuf:"bytes,6,rep,name=DeviceUUIDs,proto3" json:"DeviceUUIDs,omitempty"`
}

func (x *TCreateVolumeFromDevicesRequest) Reset() {
	*x = TCreateVolumeFromDevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCreateVolumeFromDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCreateVolumeFromDevicesRequest) ProtoMessage() {}

func (x *TCreateVolumeFromDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCreateVolumeFromDevicesRequest.ProtoReflect.Descriptor instead.
func (*TCreateVolumeFromDevicesRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{91}
}

func (x *TCreateVolumeFromDevicesRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TCreateVolumeFromDevicesRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *TCreateVolumeFromDevicesRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *TCreateVolumeFromDevicesRequest) GetCloudId() string {
	if x != nil {
		return x.CloudId
	}
	return ""
}

func (x *TCreateVolumeFromDevicesRequest) GetBlockSize() uint32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *TCreateVolumeFromDevicesRequest) GetDeviceUUIDs() []string {
	if x != nil {
		return x.DeviceUUIDs
	}
	return nil
}

type TCreateVolumeFromDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TCreateVolumeFromDevicesResponse) Reset() {
	*x = TCreateVolumeFromDevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCreateVolumeFromDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCreateVolumeFromDevicesResponse) ProtoMessage() {}

func (x *TCreateVolumeFromDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCreateVolumeFromDevicesResponse.ProtoReflect.Descriptor instead.
func (*TCreateVolumeFromDevicesResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{92}
}

func (x *TCreateVolumeFromDevicesResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TUpdateDiskRegistryAgentListParamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Params to update
	Params *TDiskRegistryAgentListRequestParams `protobuf:"bytes,3,opt,name=Params,proto3" json:"Params,omitempty"`
}

func (x *TUpdateDiskRegistryAgentListParamsRequest) Reset() {
	*x = TUpdateDiskRegistryAgentListParamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TUpdateDiskRegistryAgentListParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TUpdateDiskRegistryAgentListParamsRequest) ProtoMessage() {}

func (x *TUpdateDiskRegistryAgentListParamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TUpdateDiskRegistryAgentListParamsRequest.ProtoReflect.Descriptor instead.
func (*TUpdateDiskRegistryAgentListParamsRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{93}
}

func (x *TUpdateDiskRegistryAgentListParamsRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TUpdateDiskRegistryAgentListParamsRequest) GetParams() *TDiskRegistryAgentListRequestParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type TUpdateDiskRegistryAgentListParamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TUpdateDiskRegistryAgentListParamsResponse) Reset() {
	*x = TUpdateDiskRegistryAgentListParamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TUpdateDiskRegistryAgentListParamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TUpdateDiskRegistryAgentListParamsResponse) ProtoMessage() {}

func (x *TUpdateDiskRegistryAgentListParamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TUpdateDiskRegistryAgentListParamsResponse.ProtoReflect.Descriptor instead.
func (*TUpdateDiskRegistryAgentListParamsResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{94}
}

func (x *TUpdateDiskRegistryAgentListParamsResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TGetDependentDisksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Agent hostname to search for dependent disks
	Host string `protobuf:"bytes,1,opt,name=Host,proto3" json:"Host,omitempty"`
	// Device path (ignored if empty)
	Path string `protobuf:"bytes,2,opt,name=Path,proto3" json:"Path,omitempty"`
	// Do not count replicated disks
	IgnoreReplicatedDisks bool `protobuf:"varint,3,opt,name=IgnoreReplicatedDisks,proto3" json:"IgnoreReplicatedDisks,omitempty"`
}

func (x *TGetDependentDisksRequest) Reset() {
	*x = TGetDependentDisksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TGetDependentDisksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TGetDependentDisksRequest) ProtoMessage() {}

func (x *TGetDependentDisksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TGetDependentDisksRequest.ProtoReflect.Descriptor instead.
func (*TGetDependentDisksRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{95}
}

func (x *TGetDependentDisksRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *TGetDependentDisksRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TGetDependentDisksRequest) GetIgnoreReplicatedDisks() bool {
	if x != nil {
		return x.IgnoreReplicatedDisks
	}
	return false
}

type TGetDependentDisksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Timeout to retry if E_TRY_AGAIN returned (in seconds).
	Timeout uint64 `protobuf:"varint,2,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	// List of agent's dependent disks
	DependentDiskIds []string `protobuf:"bytes,3,rep,name=DependentDiskIds,proto3" json:"DependentDiskIds,omitempty"`
}

func (x *TGetDependentDisksResponse) Reset() {
	*x = TGetDependentDisksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TGetDependentDisksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TGetDependentDisksResponse) ProtoMessage() {}

func (x *TGetDependentDisksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TGetDependentDisksResponse.ProtoReflect.Descriptor instead.
func (*TGetDependentDisksResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{96}
}

func (x *TGetDependentDisksResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TGetDependentDisksResponse) GetTimeout() uint64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *TGetDependentDisksResponse) GetDependentDiskIds() []string {
	if x != nil {
		return x.DependentDiskIds
	}
	return nil
}

type TAllocateCheckpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the disk for which the checkpoint is being created.
	SourceDiskId string `protobuf:"bytes,1,opt,name=SourceDiskId,proto3" json:"SourceDiskId,omitempty"`
	// The name of the checkpoint.
	CheckpointId string `protobuf:"bytes,2,opt,name=CheckpointId,proto3" json:"CheckpointId,omitempty"`
}

func (x *TAllocateCheckpointRequest) Reset() {
	*x = TAllocateCheckpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAllocateCheckpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAllocateCheckpointRequest) ProtoMessage() {}

func (x *TAllocateCheckpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAllocateCheckpointRequest.ProtoReflect.Descriptor instead.
func (*TAllocateCheckpointRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{97}
}

func (x *TAllocateCheckpointRequest) GetSourceDiskId() string {
	if x != nil {
		return x.SourceDiskId
	}
	return ""
}

func (x *TAllocateCheckpointRequest) GetCheckpointId() string {
	if x != nil {
		return x.CheckpointId
	}
	return ""
}

type TAllocateCheckpointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// The name of the disk on which the replica for the checkpoint was created.
	CheckpointDiskId string `protobuf:"bytes,2,opt,name=CheckpointDiskId,proto3" json:"CheckpointDiskId,omitempty"`
}

func (x *TAllocateCheckpointResponse) Reset() {
	*x = TAllocateCheckpointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAllocateCheckpointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAllocateCheckpointResponse) ProtoMessage() {}

func (x *TAllocateCheckpointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAllocateCheckpointResponse.ProtoReflect.Descriptor instead.
func (*TAllocateCheckpointResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{98}
}

func (x *TAllocateCheckpointResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TAllocateCheckpointResponse) GetCheckpointDiskId() string {
	if x != nil {
		return x.CheckpointDiskId
	}
	return ""
}

type TDeallocateCheckpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the disk for which the checkpoint was created.
	SourceDiskId string `protobuf:"bytes,1,opt,name=SourceDiskId,proto3" json:"SourceDiskId,omitempty"`
	// The name of the checkpoint.
	CheckpointId string `protobuf:"bytes,2,opt,name=CheckpointId,proto3" json:"CheckpointId,omitempty"`
}

func (x *TDeallocateCheckpointRequest) Reset() {
	*x = TDeallocateCheckpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDeallocateCheckpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDeallocateCheckpointRequest) ProtoMessage() {}

func (x *TDeallocateCheckpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDeallocateCheckpointRequest.ProtoReflect.Descriptor instead.
func (*TDeallocateCheckpointRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{99}
}

func (x *TDeallocateCheckpointRequest) GetSourceDiskId() string {
	if x != nil {
		return x.SourceDiskId
	}
	return ""
}

func (x *TDeallocateCheckpointRequest) GetCheckpointId() string {
	if x != nil {
		return x.CheckpointId
	}
	return ""
}

type TDeallocateCheckpointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TDeallocateCheckpointResponse) Reset() {
	*x = TDeallocateCheckpointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDeallocateCheckpointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDeallocateCheckpointResponse) ProtoMessage() {}

func (x *TDeallocateCheckpointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDeallocateCheckpointResponse.ProtoReflect.Descriptor instead.
func (*TDeallocateCheckpointResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{100}
}

func (x *TDeallocateCheckpointResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TGetCheckpointDataStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the disk for which the checkpoint was created.
	SourceDiskId string `protobuf:"bytes,1,opt,name=SourceDiskId,proto3" json:"SourceDiskId,omitempty"`
	// The name of the checkpoint.
	CheckpointId string `protobuf:"bytes,2,opt,name=CheckpointId,proto3" json:"CheckpointId,omitempty"`
}

func (x *TGetCheckpointDataStateRequest) Reset() {
	*x = TGetCheckpointDataStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TGetCheckpointDataStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TGetCheckpointDataStateRequest) ProtoMessage() {}

func (x *TGetCheckpointDataStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TGetCheckpointDataStateRequest.ProtoReflect.Descriptor instead.
func (*TGetCheckpointDataStateRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{101}
}

func (x *TGetCheckpointDataStateRequest) GetSourceDiskId() string {
	if x != nil {
		return x.SourceDiskId
	}
	return ""
}

func (x *TGetCheckpointDataStateRequest) GetCheckpointId() string {
	if x != nil {
		return x.CheckpointId
	}
	return ""
}

type TGetCheckpointDataStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Checkpoint data state.
	CheckpointState ECheckpointState `protobuf:"varint,2,opt,name=CheckpointState,proto3,enum=NCloud.NBlockStore.NProto.ECheckpointState" json:"CheckpointState,omitempty"`
}

func (x *TGetCheckpointDataStateResponse) Reset() {
	*x = TGetCheckpointDataStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TGetCheckpointDataStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TGetCheckpointDataStateResponse) ProtoMessage() {}

func (x *TGetCheckpointDataStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TGetCheckpointDataStateResponse.ProtoReflect.Descriptor instead.
func (*TGetCheckpointDataStateResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{102}
}

func (x *TGetCheckpointDataStateResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TGetCheckpointDataStateResponse) GetCheckpointState() ECheckpointState {
	if x != nil {
		return x.CheckpointState
	}
	return ECheckpointState_CHECKPOINT_STATE_CREATING
}

type TSetCheckpointDataStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the disk for which the checkpoint was created.
	SourceDiskId string `protobuf:"bytes,1,opt,name=SourceDiskId,proto3" json:"SourceDiskId,omitempty"`
	// The name of the checkpoint.
	CheckpointId string `protobuf:"bytes,2,opt,name=CheckpointId,proto3" json:"CheckpointId,omitempty"`
	// New checkpoint data state.
	CheckpointState ECheckpointState `protobuf:"varint,3,opt,name=CheckpointState,proto3,enum=NCloud.NBlockStore.NProto.ECheckpointState" json:"CheckpointState,omitempty"`
}

func (x *TSetCheckpointDataStateRequest) Reset() {
	*x = TSetCheckpointDataStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSetCheckpointDataStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSetCheckpointDataStateRequest) ProtoMessage() {}

func (x *TSetCheckpointDataStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSetCheckpointDataStateRequest.ProtoReflect.Descriptor instead.
func (*TSetCheckpointDataStateRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{103}
}

func (x *TSetCheckpointDataStateRequest) GetSourceDiskId() string {
	if x != nil {
		return x.SourceDiskId
	}
	return ""
}

func (x *TSetCheckpointDataStateRequest) GetCheckpointId() string {
	if x != nil {
		return x.CheckpointId
	}
	return ""
}

func (x *TSetCheckpointDataStateRequest) GetCheckpointState() ECheckpointState {
	if x != nil {
		return x.CheckpointState
	}
	return ECheckpointState_CHECKPOINT_STATE_CREATING
}

type TSetCheckpointDataStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TSetCheckpointDataStateResponse) Reset() {
	*x = TSetCheckpointDataStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSetCheckpointDataStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSetCheckpointDataStateResponse) ProtoMessage() {}

func (x *TSetCheckpointDataStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSetCheckpointDataStateResponse.ProtoReflect.Descriptor instead.
func (*TSetCheckpointDataStateResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{104}
}

func (x *TSetCheckpointDataStateResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TPlacementGroupConfig_TDiskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskId      string   `protobuf:"bytes,1,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	DeviceRacks []string `protobuf:"bytes,2,rep,name=DeviceRacks,proto3" json:"DeviceRacks,omitempty"`
	// For PLACEMENT_STRATEGY_PARTITION takes values from 1 to
	// PlacementPartitionCount.
	PlacementPartitionIndex uint32 `protobuf:"varint,3,opt,name=PlacementPartitionIndex,proto3" json:"PlacementPartitionIndex,omitempty"`
}

func (x *TPlacementGroupConfig_TDiskInfo) Reset() {
	*x = TPlacementGroupConfig_TDiskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPlacementGroupConfig_TDiskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPlacementGroupConfig_TDiskInfo) ProtoMessage() {}

func (x *TPlacementGroupConfig_TDiskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPlacementGroupConfig_TDiskInfo.ProtoReflect.Descriptor instead.
func (*TPlacementGroupConfig_TDiskInfo) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{9, 0}
}

func (x *TPlacementGroupConfig_TDiskInfo) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TPlacementGroupConfig_TDiskInfo) GetDeviceRacks() []string {
	if x != nil {
		return x.DeviceRacks
	}
	return nil
}

func (x *TPlacementGroupConfig_TDiskInfo) GetPlacementPartitionIndex() uint32 {
	if x != nil {
		return x.PlacementPartitionIndex
	}
	return 0
}

type TDeviceStats_TBucketInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Count uint64  `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (x *TDeviceStats_TBucketInfo) Reset() {
	*x = TDeviceStats_TBucketInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDeviceStats_TBucketInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDeviceStats_TBucketInfo) ProtoMessage() {}

func (x *TDeviceStats_TBucketInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDeviceStats_TBucketInfo.ProtoReflect.Descriptor instead.
func (*TDeviceStats_TBucketInfo) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{13, 0}
}

func (x *TDeviceStats_TBucketInfo) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TDeviceStats_TBucketInfo) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type TUserNotification_TDiskError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskId string `protobuf:"bytes,1,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
}

func (x *TUserNotification_TDiskError) Reset() {
	*x = TUserNotification_TDiskError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TUserNotification_TDiskError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TUserNotification_TDiskError) ProtoMessage() {}

func (x *TUserNotification_TDiskError) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TUserNotification_TDiskError.ProtoReflect.Descriptor instead.
func (*TUserNotification_TDiskError) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{17, 0}
}

func (x *TUserNotification_TDiskError) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

type TUserNotification_TDiskBackOnline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskId string `protobuf:"bytes,1,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
}

func (x *TUserNotification_TDiskBackOnline) Reset() {
	*x = TUserNotification_TDiskBackOnline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TUserNotification_TDiskBackOnline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TUserNotification_TDiskBackOnline) ProtoMessage() {}

func (x *TUserNotification_TDiskBackOnline) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TUserNotification_TDiskBackOnline.ProtoReflect.Descriptor instead.
func (*TUserNotification_TDiskBackOnline) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{17, 1}
}

func (x *TUserNotification_TDiskBackOnline) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

type TDiskRegistryStateBackup_TDiskStateUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *protos.TDiskState `protobuf:"bytes,1,opt,name=State,proto3" json:"State,omitempty"`
	SeqNo uint64             `protobuf:"varint,2,opt,name=SeqNo,proto3" json:"SeqNo,omitempty"`
}

func (x *TDiskRegistryStateBackup_TDiskStateUpdate) Reset() {
	*x = TDiskRegistryStateBackup_TDiskStateUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDiskRegistryStateBackup_TDiskStateUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDiskRegistryStateBackup_TDiskStateUpdate) ProtoMessage() {}

func (x *TDiskRegistryStateBackup_TDiskStateUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDiskRegistryStateBackup_TDiskStateUpdate.ProtoReflect.Descriptor instead.
func (*TDiskRegistryStateBackup_TDiskStateUpdate) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{18, 0}
}

func (x *TDiskRegistryStateBackup_TDiskStateUpdate) GetState() *protos.TDiskState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *TDiskRegistryStateBackup_TDiskStateUpdate) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

type TDiskRegistryStateBackup_TBrokenDiskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskId      string `protobuf:"bytes,1,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	TsToDestroy uint64 `protobuf:"varint,2,opt,name=TsToDestroy,proto3" json:"TsToDestroy,omitempty"`
}

func (x *TDiskRegistryStateBackup_TBrokenDiskInfo) Reset() {
	*x = TDiskRegistryStateBackup_TBrokenDiskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDiskRegistryStateBackup_TBrokenDiskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDiskRegistryStateBackup_TBrokenDiskInfo) ProtoMessage() {}

func (x *TDiskRegistryStateBackup_TBrokenDiskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDiskRegistryStateBackup_TBrokenDiskInfo.ProtoReflect.Descriptor instead.
func (*TDiskRegistryStateBackup_TBrokenDiskInfo) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{18, 1}
}

func (x *TDiskRegistryStateBackup_TBrokenDiskInfo) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TDiskRegistryStateBackup_TBrokenDiskInfo) GetTsToDestroy() uint64 {
	if x != nil {
		return x.TsToDestroy
	}
	return 0
}

type TDiskRegistryStateBackup_TDirtyDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
}

func (x *TDiskRegistryStateBackup_TDirtyDevice) Reset() {
	*x = TDiskRegistryStateBackup_TDirtyDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDiskRegistryStateBackup_TDirtyDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDiskRegistryStateBackup_TDirtyDevice) ProtoMessage() {}

func (x *TDiskRegistryStateBackup_TDirtyDevice) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDiskRegistryStateBackup_TDirtyDevice.ProtoReflect.Descriptor instead.
func (*TDiskRegistryStateBackup_TDirtyDevice) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{18, 2}
}

func (x *TDiskRegistryStateBackup_TDirtyDevice) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TDiskRegistryStateBackup_TDirtyDevice) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

type TDiskRegistryStateBackup_TAutomaticallyReplacedDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId      string `protobuf:"bytes,1,opt,name=DeviceId,proto3" json:"DeviceId,omitempty"`
	ReplacementTs uint64 `protobuf:"varint,2,opt,name=ReplacementTs,proto3" json:"ReplacementTs,omitempty"`
}

func (x *TDiskRegistryStateBackup_TAutomaticallyReplacedDeviceInfo) Reset() {
	*x = TDiskRegistryStateBackup_TAutomaticallyReplacedDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDiskRegistryStateBackup_TAutomaticallyReplacedDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDiskRegistryStateBackup_TAutomaticallyReplacedDeviceInfo) ProtoMessage() {}

func (x *TDiskRegistryStateBackup_TAutomaticallyReplacedDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDiskRegistryStateBackup_TAutomaticallyReplacedDeviceInfo.ProtoReflect.Descriptor instead.
func (*TDiskRegistryStateBackup_TAutomaticallyReplacedDeviceInfo) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP(), []int{18, 3}
}

func (x *TDiskRegistryStateBackup_TAutomaticallyReplacedDeviceInfo) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *TDiskRegistryStateBackup_TAutomaticallyReplacedDeviceInfo) GetReplacementTs() uint64 {
	if x != nil {
		return x.ReplacementTs
	}
	return 0
}

var File_cloud_blockstore_libs_storage_protos_disk_proto protoreflect.FileDescriptor

var file_cloud_blockstore_libs_storage_protos_disk_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x19, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x64, 0x69, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x72, 0x64, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58, 0x0a, 0x18,
	0x54, 0x4d, 0x65, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x57, 0x6f, 0x72, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb5, 0x04, 0x0a, 0x0c, 0x54, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x42, 0x0a, 0x07, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x54, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x54, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6d, 0x73, 0x54, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x43, 0x6d, 0x73, 0x54, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x65, 0x71, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x44, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x44, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x69, 0x73, 0x6b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x57,
	0x6f, 0x72, 0x6b, 0x54, 0x73, 0x12, 0x65, 0x0a, 0x13, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x74,
	0x77, 0x65, 0x65, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4d, 0x65, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x52, 0x13, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x74,
	0x77, 0x65, 0x65, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0e,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x70,
	0x0a, 0x0c, 0x54, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x41,
	0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x22, 0xd8, 0x05, 0x0a, 0x0d, 0x54, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x52, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x52, 0x61, 0x63, 0x6b,
	0x12, 0x3d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6d, 0x73,
	0x54, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x43, 0x6d, 0x73, 0x54, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x55, 0x6e, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x55, 0x6e, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a,
	0x0c, 0x52, 0x64, 0x6d, 0x61, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x52, 0x64, 0x6d, 0x61, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0c, 0x52,
	0x64, 0x6d, 0x61, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50,
	0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x4e, 0x0a, 0x10, 0x54,
	0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x45, 0x72,
	0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x52, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x45, 0x72, 0x61, 0x73, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x10,
	0x54, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x36, 0x0a, 0x18, 0x54, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xb9,
	0x01, 0x0a, 0x12, 0x54, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x73, 0x12, 0x41, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xe7, 0x05, 0x0a, 0x0b, 0x54,
	0x44, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69,
	0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x55, 0x49, 0x44, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x44,
	0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x12,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x36, 0x0a, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x73, 0x12, 0x4c, 0x0a, 0x10, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x5b, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x52, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x22, 0x91, 0x04, 0x0a, 0x15, 0x54, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x05, 0x44, 0x69, 0x73, 0x6b,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x44, 0x69, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4e, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x5b, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x11, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x38, 0x0a,
	0x17, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x7f, 0x0a, 0x09, 0x54, 0x44, 0x69, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x38,
	0x0a, 0x17, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x17, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x8f, 0x01, 0x0a, 0x11, 0x54, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x4b, 0x69,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x22, 0xca, 0x03, 0x0a, 0x13, 0x54,
	0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0b,
	0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x4b, 0x6e, 0x6f, 0x77,
	0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x4c, 0x61, 0x73, 0x74, 0x44,
	0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x71, 0x4e, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x12, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x57, 0x72, 0x69, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x57, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x54, 0x0a,
	0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x52, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x54, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x11, 0x54, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x49, 0x6f, 0x70, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x49, 0x6f, 0x70, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x42,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x13, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xea, 0x03, 0x0a, 0x0c, 0x54, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x5f, 0x0a, 0x10, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x54, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x64,
	0x4f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x4e, 0x75, 0x6d, 0x52, 0x65,
	0x61, 0x64, 0x4f, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72,
	0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x75, 0x6d,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x4e, 0x75, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x5a, 0x65, 0x72, 0x6f,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x75, 0x6d, 0x5a, 0x65, 0x72, 0x6f,
	0x4f, 0x70, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x4e, 0x75, 0x6d, 0x5a, 0x65,
	0x72, 0x6f, 0x4f, 0x70, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x75, 0x6d, 0x45, 0x72, 0x61, 0x73,
	0x65, 0x4f, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x4e, 0x75, 0x6d, 0x45,
	0x72, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x54, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x0b, 0x54, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0b, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x69, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x49, 0x6e, 0x69, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xd1, 0x02, 0x0a, 0x23, 0x54, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d,
	0x73, 0x12, 0x51, 0x0a, 0x21, 0x4e, 0x65, 0x77, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x21,
	0x4e, 0x65, 0x77, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x21, 0x4e, 0x65, 0x77, 0x4e, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x01, 0x52, 0x21, 0x4e, 0x65, 0x77, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x4d, 0x73, 0x88, 0x01, 0x01, 0x42, 0x24, 0x0a, 0x22, 0x5f, 0x4e, 0x65, 0x77, 0x4e,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x4d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x42, 0x24, 0x0a,
	0x22, 0x5f, 0x4e, 0x65, 0x77, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x4d, 0x73, 0x22, 0xac, 0x02, 0x0a, 0x18, 0x54, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73,
	0x12, 0x51, 0x0a, 0x21, 0x4e, 0x65, 0x77, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x4d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x21, 0x4e,
	0x65, 0x77, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x21, 0x4e, 0x65, 0x77, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01,
	0x52, 0x21, 0x4e, 0x65, 0x77, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x4d, 0x73, 0x88, 0x01, 0x01, 0x42, 0x24, 0x0a, 0x22, 0x5f, 0x4e, 0x65, 0x77, 0x4e, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x4d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x42, 0x24, 0x0a, 0x22,
	0x5f, 0x4e, 0x65, 0x77, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x4d, 0x73, 0x22, 0x88, 0x03, 0x0a, 0x11, 0x54, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x65, 0x71, 0x4e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x53, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0d,
	0x48, 0x61, 0x73, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x6f, 0x70, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x48, 0x61, 0x73, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x6f,
	0x70, 0x79, 0x12, 0x57, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x44, 0x69, 0x73, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x09, 0x44, 0x69, 0x73, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x66, 0x0a, 0x0e, 0x44,
	0x69, 0x73, 0x6b, 0x42, 0x61, 0x63, 0x6b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x44, 0x69, 0x73, 0x6b, 0x42, 0x61, 0x63, 0x6b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x48, 0x00, 0x52, 0x0e, 0x44, 0x69, 0x73, 0x6b, 0x42, 0x61, 0x63, 0x6b, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x1a, 0x24, 0x0a, 0x0a, 0x54, 0x44, 0x69, 0x73, 0x6b, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x1a, 0x29, 0x0a, 0x0f, 0x54, 0x44, 0x69,
	0x73, 0x6b, 0x42, 0x61, 0x63, 0x6b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69,
	0x73, 0x6b, 0x49, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x92, 0x0f,
	0x0a, 0x18, 0x54, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x3c, 0x0a, 0x05, 0x44, 0x69,
	0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x05, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x5a, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x3f, 0x0a, 0x06, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x6c, 0x64, 0x44, 0x69, 0x72, 0x74, 0x79, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x4f, 0x6c, 0x64,
	0x44, 0x69, 0x72, 0x74, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x70, 0x0a, 0x10,
	0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x54, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x10, 0x44, 0x69,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x65,
	0x0a, 0x0b, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x54, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x6e,
	0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x6e,
	0x44, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x54, 0x6f,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x69,
	0x73, 0x6b, 0x73, 0x54, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x44,
	0x69, 0x73, 0x6b, 0x73, 0x54, 0x6f, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x54, 0x6f, 0x43, 0x6c, 0x65, 0x61,
	0x6e, 0x75, 0x70, 0x12, 0x2e, 0x0a, 0x12, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x12, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x4f, 0x75, 0x74, 0x64, 0x61, 0x74, 0x65, 0x64, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x15, 0x4f, 0x75, 0x74, 0x64, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x4f, 0x6c, 0x64,
	0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x4f, 0x6c, 0x64, 0x53, 0x75, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x0c, 0x44,
	0x69, 0x72, 0x74, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44,
	0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x54, 0x44, 0x69, 0x72, 0x74, 0x79, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x0c, 0x44, 0x69, 0x72, 0x74, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x98, 0x01, 0x0a, 0x1c, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x54, 0x41,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1c,
	0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x96, 0x01, 0x0a,
	0x1b, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x54, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1b, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x5a, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x57, 0x0a, 0x10, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x10, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x65, 0x0a, 0x10, 0x54, 0x44,
	0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3b,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x69, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53,
	0x65, 0x71, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x53, 0x65, 0x71, 0x4e,
	0x6f, 0x1a, 0x4b, 0x0a, 0x0f, 0x54, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x69, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x54, 0x73, 0x54, 0x6f, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x54, 0x73, 0x54, 0x6f, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x1a, 0x36,
	0x0a, 0x0c, 0x54, 0x44, 0x69, 0x72, 0x74, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x1a, 0x64, 0x0a, 0x20, 0x54, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x73, 0x1a, 0x83, 0x01, 0x0a,
	0x20, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xa1, 0x01, 0x0a, 0x15, 0x54, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x0b, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x45, 0x0a, 0x16, 0x54, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x70, 0x0a,
	0x17, 0x54, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22,
	0x47, 0x0a, 0x18, 0x54, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xf3, 0x03, 0x0a, 0x14, 0x54, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f,
	0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6f,
	0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x4e,
	0x0a, 0x08, 0x54, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x42, 0x0a, 0x07, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0xd0,
	0x03, 0x0a, 0x15, 0x54, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x07, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x07, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x49, 0x4f, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x4f, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x06, 0x49, 0x4f, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x4f, 0x4d, 0x6f,
	0x64, 0x65, 0x54, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x49, 0x4f, 0x4d, 0x6f,
	0x64, 0x65, 0x54, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x75, 0x74, 0x65, 0x49, 0x4f, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x4d, 0x75, 0x74, 0x65,
	0x49, 0x4f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52,
	0x08, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55,
	0x49, 0x44, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44,
	0x73, 0x22, 0x89, 0x01, 0x0a, 0x16, 0x54, 0x44, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x44,
	0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x46, 0x0a,
	0x17, 0x54, 0x44, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x81, 0x03, 0x0a, 0x16, 0x54, 0x41, 0x63, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44,
	0x73, 0x12, 0x4c, 0x0a, 0x0a, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x52, 0x0a, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12,
	0x4c, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x17, 0x54, 0x41, 0x63,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0xbd, 0x01, 0x0a, 0x16, 0x54, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44,
	0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x46, 0x0a, 0x17, 0x54, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x8e, 0x02, 0x0a, 0x13, 0x54, 0x41,
	0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x65, 0x71, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x10, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x02, 0x0a, 0x14, 0x54,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x42, 0x0a, 0x07, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x13, 0x54, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44,
	0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73,
	0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x0a,
	0x14, 0x54, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x6d, 0x0a, 0x14, 0x54, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44,
	0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73,
	0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49,
	0x64, 0x22, 0x9b, 0x04, 0x0a, 0x15, 0x54, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44,
	0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x07, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x07, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x54, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x54, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x73, 0x22,
	0xd9, 0x01, 0x0a, 0x18, 0x54, 0x52, 0x65, 0x61, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x19,
	0x54, 0x52, 0x65, 0x61, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x49, 0x4f, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x22, 0xd0, 0x02, 0x0a, 0x19, 0x54, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x3c, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x49, 0x4f, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x1a, 0x54, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0xb3, 0x02, 0x0a, 0x18, 0x54, 0x5a, 0x65, 0x72, 0x6f, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c,
	0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x19, 0x54, 0x5a, 0x65, 0x72,
	0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0xc3, 0x01, 0x0a, 0x14, 0x54, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6a, 0x0a, 0x15, 0x54, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x24,
	0x0a, 0x0d, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44,
	0x69, 0x73, 0x6b, 0x73, 0x22, 0x57, 0x0a, 0x16, 0x54, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0x8e, 0x01,
	0x0a, 0x17, 0x54, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x7a,
	0x0a, 0x19, 0x54, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x45, 0x72, 0x61, 0x73, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x22, 0x49, 0x0a, 0x1a, 0x54, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x45, 0x72, 0x61, 0x73, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xdd, 0x01, 0x0a, 0x1c, 0x54, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x68, 0x0a, 0x1d, 0x54, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x75, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22,
	0x7f, 0x0a, 0x1c, 0x54, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x72,
	0x65, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x73,
	0x22, 0x4c, 0x0a, 0x1d, 0x54, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x72, 0x65, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x7a,
	0x0a, 0x19, 0x54, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x22, 0x49, 0x0a, 0x1a, 0x54, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xd0, 0x01, 0x0a, 0x1b, 0x54, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x69,
	0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x1c, 0x54, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa1, 0x01, 0x0a, 0x18, 0x54, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x46, 0x0a, 0x0a, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x48, 0x0a, 0x19, 0x54, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0xc4, 0x01, 0x0a, 0x15, 0x54, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x22, 0x45, 0x0a, 0x16, 0x54, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0xdd, 0x01, 0x0a, 0x19, 0x54, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x49,
	0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x49, 0x0a, 0x1a, 0x54, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xd3, 0x01, 0x0a,
	0x18, 0x54, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x46, 0x0a, 0x0a, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x19, 0x54, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x91, 0x01, 0x0a,
	0x14, 0x54, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x73,
	0x22, 0x44, 0x0a, 0x15, 0x54, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x65, 0x0a, 0x13, 0x54, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xc0, 0x01,
	0x0a, 0x17, 0x54, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x4e, 0x0a, 0x0a, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x73, 0x52, 0x0a, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x47, 0x0a, 0x18, 0x54, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xae, 0x01, 0x0a, 0x1f, 0x54, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x42, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x44, 0x42, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0xc4, 0x01, 0x0a, 0x20, 0x54,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x06,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x52, 0x06, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x22, 0xc4, 0x01, 0x0a, 0x20, 0x54, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x69,
	0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x06, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x50, 0x0a, 0x21, 0x54, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x6f, 0x0a, 0x18, 0x54, 0x53,
	0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x48, 0x0a, 0x19, 0x54,
	0x53, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x73, 0x0a, 0x1a, 0x54, 0x4d, 0x61, 0x72, 0x6b, 0x44, 0x69,
	0x73, 0x6b, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x1b, 0x54, 0x4d,
	0x61, 0x72, 0x6b, 0x44, 0x69, 0x73, 0x6b, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x82, 0x01, 0x0a, 0x11, 0x54, 0x53, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x44,
	0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x12, 0x54,
	0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x69,
	0x0a, 0x1b, 0x54, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44,
	0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x4b, 0x0a, 0x1c, 0x54, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x68, 0x0a, 0x1e, 0x54, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x4e, 0x0a, 0x1f, 0x54, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x79, 0x0a, 0x1d, 0x54, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x49, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x4d, 0x0a, 0x1e, 0x54,
	0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x72, 0x0a, 0x15, 0x54, 0x53,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x45,
	0x0a, 0x16, 0x54, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xf5, 0x01, 0x0a, 0x24, 0x54, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a,
	0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x54, 0x0a,
	0x25, 0x54, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0xcd, 0x01, 0x0a, 0x1f, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55,
	0x49, 0x44, 0x73, 0x22, 0x4f, 0x0a, 0x20, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0xc2, 0x01, 0x0a, 0x29, 0x54, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x56, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44,
	0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x59, 0x0a, 0x2a, 0x54, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x79, 0x0a, 0x19, 0x54, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x15, 0x49, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73,
	0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x22,
	0x8f, 0x01, 0x0a, 0x1a, 0x54, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x74, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64,
	0x73, 0x22, 0x64, 0x0a, 0x1a, 0x54, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x69, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x1b, 0x54, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x22,
	0x66, 0x0a, 0x1c, 0x54, 0x44, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x69, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x1d, 0x54, 0x44, 0x65, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x68, 0x0a, 0x1e, 0x54, 0x47, 0x65, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0xa5, 0x01, 0x0a, 0x1f, 0x54, 0x47, 0x65, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x55, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x1e, 0x54, 0x53, 0x65, 0x74,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x55, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x4e, 0x0a, 0x1f, 0x54, 0x53, 0x65,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2a, 0x5b, 0x0a, 0x0b, 0x45, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x47, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x47, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x59, 0x0a, 0x0c, 0x45, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x18, 0x0a, 0x14, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x02, 0x2a, 0x66, 0x0a, 0x10, 0x45, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x42, 0x37, 0x5a, 0x35, 0x61, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x72, 0x75, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x6c,
	0x69, 0x62, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescOnce sync.Once
	file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescData = file_cloud_blockstore_libs_storage_protos_disk_proto_rawDesc
)

func file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescGZIP() []byte {
	file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescOnce.Do(func() {
		file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescData)
	})
	return file_cloud_blockstore_libs_storage_protos_disk_proto_rawDescData
}

var file_cloud_blockstore_libs_storage_protos_disk_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes = make([]protoimpl.MessageInfo, 114)
var file_cloud_blockstore_libs_storage_protos_disk_proto_goTypes = []interface{}{
	(EAgentState)(0),                                                  // 0: NCloud.NBlockStore.NProto.EAgentState
	(EDeviceState)(0),                                                 // 1: NCloud.NBlockStore.NProto.EDeviceState
	(ECheckpointState)(0),                                             // 2: NCloud.NBlockStore.NProto.ECheckpointState
	(*TMeanTimeBetweenFailures)(nil),                                  // 3: NCloud.NBlockStore.NProto.TMeanTimeBetweenFailures
	(*TAgentConfig)(nil),                                              // 4: NCloud.NBlockStore.NProto.TAgentConfig
	(*TDiskSession)(nil),                                              // 5: NCloud.NBlockStore.NProto.TDiskSession
	(*TDeviceConfig)(nil),                                             // 6: NCloud.NBlockStore.NProto.TDeviceConfig
	(*TSuspendedDevice)(nil),                                          // 7: NCloud.NBlockStore.NProto.TSuspendedDevice
	(*TDeviceMigration)(nil),                                          // 8: NCloud.NBlockStore.NProto.TDeviceMigration
	(*TFinishedDeviceMigration)(nil),                                  // 9: NCloud.NBlockStore.NProto.TFinishedDeviceMigration
	(*TCheckpointReplica)(nil),                                        // 10: NCloud.NBlockStore.NProto.TCheckpointReplica
	(*TDiskConfig)(nil),                                               // 11: NCloud.NBlockStore.NProto.TDiskConfig
	(*TPlacementGroupConfig)(nil),                                     // 12: NCloud.NBlockStore.NProto.TPlacementGroupConfig
	(*TDevicePoolConfig)(nil),                                         // 13: NCloud.NBlockStore.NProto.TDevicePoolConfig
	(*TDiskRegistryConfig)(nil),                                       // 14: NCloud.NBlockStore.NProto.TDiskRegistryConfig
	(*TDeviceRateLimits)(nil),                                         // 15: NCloud.NBlockStore.NProto.TDeviceRateLimits
	(*TDeviceStats)(nil),                                              // 16: NCloud.NBlockStore.NProto.TDeviceStats
	(*TAgentStats)(nil),                                               // 17: NCloud.NBlockStore.NProto.TAgentStats
	(*TDiskRegistryAgentListRequestParams)(nil),                       // 18: NCloud.NBlockStore.NProto.TDiskRegistryAgentListRequestParams
	(*TDiskRegistryAgentParams)(nil),                                  // 19: NCloud.NBlockStore.NProto.TDiskRegistryAgentParams
	(*TUserNotification)(nil),                                         // 20: NCloud.NBlockStore.NProto.TUserNotification
	(*TDiskRegistryStateBackup)(nil),                                  // 21: NCloud.NBlockStore.NProto.TDiskRegistryStateBackup
	(*TRegisterAgentRequest)(nil),                                     // 22: NCloud.NBlockStore.NProto.TRegisterAgentRequest
	(*TRegisterAgentResponse)(nil),                                    // 23: NCloud.NBlockStore.NProto.TRegisterAgentResponse
	(*TUnregisterAgentRequest)(nil),                                   // 24: NCloud.NBlockStore.NProto.TUnregisterAgentRequest
	(*TUnregisterAgentResponse)(nil),                                  // 25: NCloud.NBlockStore.NProto.TUnregisterAgentResponse
	(*TAllocateDiskRequest)(nil),                                      // 26: NCloud.NBlockStore.NProto.TAllocateDiskRequest
	(*TReplica)(nil),                                                  // 27: NCloud.NBlockStore.NProto.TReplica
	(*TAllocateDiskResponse)(nil),                                     // 28: NCloud.NBlockStore.NProto.TAllocateDiskResponse
	(*TDeallocateDiskRequest)(nil),                                    // 29: NCloud.NBlockStore.NProto.TDeallocateDiskRequest
	(*TDeallocateDiskResponse)(nil),                                   // 30: NCloud.NBlockStore.NProto.TDeallocateDiskResponse
	(*TAcquireDevicesRequest)(nil),                                    // 31: NCloud.NBlockStore.NProto.TAcquireDevicesRequest
	(*TAcquireDevicesResponse)(nil),                                   // 32: NCloud.NBlockStore.NProto.TAcquireDevicesResponse
	(*TReleaseDevicesRequest)(nil),                                    // 33: NCloud.NBlockStore.NProto.TReleaseDevicesRequest
	(*TReleaseDevicesResponse)(nil),                                   // 34: NCloud.NBlockStore.NProto.TReleaseDevicesResponse
	(*TAcquireDiskRequest)(nil),                                       // 35: NCloud.NBlockStore.NProto.TAcquireDiskRequest
	(*TAcquireDiskResponse)(nil),                                      // 36: NCloud.NBlockStore.NProto.TAcquireDiskResponse
	(*TReleaseDiskRequest)(nil),                                       // 37: NCloud.NBlockStore.NProto.TReleaseDiskRequest
	(*TReleaseDiskResponse)(nil),                                      // 38: NCloud.NBlockStore.NProto.TReleaseDiskResponse
	(*TDescribeDiskRequest)(nil),                                      // 39: NCloud.NBlockStore.NProto.TDescribeDiskRequest
	(*TDescribeDiskResponse)(nil),                                     // 40: NCloud.NBlockStore.NProto.TDescribeDiskResponse
	(*TReadDeviceBlocksRequest)(nil),                                  // 41: NCloud.NBlockStore.NProto.TReadDeviceBlocksRequest
	(*TReadDeviceBlocksResponse)(nil),                                 // 42: NCloud.NBlockStore.NProto.TReadDeviceBlocksResponse
	(*TWriteDeviceBlocksRequest)(nil),                                 // 43: NCloud.NBlockStore.NProto.TWriteDeviceBlocksRequest
	(*TWriteDeviceBlocksResponse)(nil),                                // 44: NCloud.NBlockStore.NProto.TWriteDeviceBlocksResponse
	(*TZeroDeviceBlocksRequest)(nil),                                  // 45: NCloud.NBlockStore.NProto.TZeroDeviceBlocksRequest
	(*TZeroDeviceBlocksResponse)(nil),                                 // 46: NCloud.NBlockStore.NProto.TZeroDeviceBlocksResponse
	(*TUpdateConfigRequest)(nil),                                      // 47: NCloud.NBlockStore.NProto.TUpdateConfigRequest
	(*TUpdateConfigResponse)(nil),                                     // 48: NCloud.NBlockStore.NProto.TUpdateConfigResponse
	(*TDescribeConfigRequest)(nil),                                    // 49: NCloud.NBlockStore.NProto.TDescribeConfigRequest
	(*TDescribeConfigResponse)(nil),                                   // 50: NCloud.NBlockStore.NProto.TDescribeConfigResponse
	(*TSecureEraseDeviceRequest)(nil),                                 // 51: NCloud.NBlockStore.NProto.TSecureEraseDeviceRequest
	(*TSecureEraseDeviceResponse)(nil),                                // 52: NCloud.NBlockStore.NProto.TSecureEraseDeviceResponse
	(*TChecksumDeviceBlocksRequest)(nil),                              // 53: NCloud.NBlockStore.NProto.TChecksumDeviceBlocksRequest
	(*TChecksumDeviceBlocksResponse)(nil),                             // 54: NCloud.NBlockStore.NProto.TChecksumDeviceBlocksResponse
	(*TDisableConcreteAgentRequest)(nil),                              // 55: NCloud.NBlockStore.NProto.TDisableConcreteAgentRequest
	(*TDisableConcreteAgentResponse)(nil),                             // 56: NCloud.NBlockStore.NProto.TDisableConcreteAgentResponse
	(*TEnableAgentDeviceRequest)(nil),                                 // 57: NCloud.NBlockStore.NProto.TEnableAgentDeviceRequest
	(*TEnableAgentDeviceResponse)(nil),                                // 58: NCloud.NBlockStore.NProto.TEnableAgentDeviceResponse
	(*TStartForceMigrationRequest)(nil),                               // 59: NCloud.NBlockStore.NProto.TStartForceMigrationRequest
	(*TStartForceMigrationResponse)(nil),                              // 60: NCloud.NBlockStore.NProto.TStartForceMigrationResponse
	(*TUpdateAgentStatsRequest)(nil),                                  // 61: NCloud.NBlockStore.NProto.TUpdateAgentStatsRequest
	(*TUpdateAgentStatsResponse)(nil),                                 // 62: NCloud.NBlockStore.NProto.TUpdateAgentStatsResponse
	(*TReplaceDeviceRequest)(nil),                                     // 63: NCloud.NBlockStore.NProto.TReplaceDeviceRequest
	(*TReplaceDeviceResponse)(nil),                                    // 64: NCloud.NBlockStore.NProto.TReplaceDeviceResponse
	(*TChangeDeviceStateRequest)(nil),                                 // 65: NCloud.NBlockStore.NProto.TChangeDeviceStateRequest
	(*TChangeDeviceStateResponse)(nil),                                // 66: NCloud.NBlockStore.NProto.TChangeDeviceStateResponse
	(*TChangeAgentStateRequest)(nil),                                  // 67: NCloud.NBlockStore.NProto.TChangeAgentStateRequest
	(*TChangeAgentStateResponse)(nil),                                 // 68: NCloud.NBlockStore.NProto.TChangeAgentStateResponse
	(*TDisableAgentRequest)(nil),                                      // 69: NCloud.NBlockStore.NProto.TDisableAgentRequest
	(*TDisableAgentResponse)(nil),                                     // 70: NCloud.NBlockStore.NProto.TDisableAgentResponse
	(*TDeviceMigrationIds)(nil),                                       // 71: NCloud.NBlockStore.NProto.TDeviceMigrationIds
	(*TFinishMigrationRequest)(nil),                                   // 72: NCloud.NBlockStore.NProto.TFinishMigrationRequest
	(*TFinishMigrationResponse)(nil),                                  // 73: NCloud.NBlockStore.NProto.TFinishMigrationResponse
	(*TBackupDiskRegistryStateRequest)(nil),                           // 74: NCloud.NBlockStore.NProto.TBackupDiskRegistryStateRequest
	(*TBackupDiskRegistryStateResponse)(nil),                          // 75: NCloud.NBlockStore.NProto.TBackupDiskRegistryStateResponse
	(*TRestoreDiskRegistryStateRequest)(nil),                          // 76: NCloud.NBlockStore.NProto.TRestoreDiskRegistryStateRequest
	(*TRestoreDiskRegistryStateResponse)(nil),                         // 77: NCloud.NBlockStore.NProto.TRestoreDiskRegistryStateResponse
	(*TSetWritableStateRequest)(nil),                                  // 78: NCloud.NBlockStore.NProto.TSetWritableStateRequest
	(*TSetWritableStateResponse)(nil),                                 // 79: NCloud.NBlockStore.NProto.TSetWritableStateResponse
	(*TMarkDiskForCleanupRequest)(nil),                                // 80: NCloud.NBlockStore.NProto.TMarkDiskForCleanupRequest
	(*TMarkDiskForCleanupResponse)(nil),                               // 81: NCloud.NBlockStore.NProto.TMarkDiskForCleanupResponse
	(*TSetUserIdRequest)(nil),                                         // 82: NCloud.NBlockStore.NProto.TSetUserIdRequest
	(*TSetUserIdResponse)(nil),                                        // 83: NCloud.NBlockStore.NProto.TSetUserIdResponse
	(*TUpdateDiskBlockSizeRequest)(nil),                               // 84: NCloud.NBlockStore.NProto.TUpdateDiskBlockSizeRequest
	(*TUpdateDiskBlockSizeResponse)(nil),                              // 85: NCloud.NBlockStore.NProto.TUpdateDiskBlockSizeResponse
	(*TUpdateDiskReplicaCountRequest)(nil),                            // 86: NCloud.NBlockStore.NProto.TUpdateDiskReplicaCountRequest
	(*TUpdateDiskReplicaCountResponse)(nil),                           // 87: NCloud.NBlockStore.NProto.TUpdateDiskReplicaCountResponse
	(*TMarkReplacementDeviceRequest)(nil),                             // 88: NCloud.NBlockStore.NProto.TMarkReplacementDeviceRequest
	(*TMarkReplacementDeviceResponse)(nil),                            // 89: NCloud.NBlockStore.NProto.TMarkReplacementDeviceResponse
	(*TSuspendDeviceRequest)(nil),                                     // 90: NCloud.NBlockStore.NProto.TSuspendDeviceRequest
	(*TSuspendDeviceResponse)(nil),                                    // 91: NCloud.NBlockStore.NProto.TSuspendDeviceResponse
	(*TUpdatePlacementGroupSettingsRequest)(nil),                      // 92: NCloud.NBlockStore.NProto.TUpdatePlacementGroupSettingsRequest
	(*TUpdatePlacementGroupSettingsResponse)(nil),                     // 93: NCloud.NBlockStore.NProto.TUpdatePlacementGroupSettingsResponse
	(*TCreateVolumeFromDevicesRequest)(nil),                           // 94: NCloud.NBlockStore.NProto.TCreateVolumeFromDevicesRequest
	(*TCreateVolumeFromDevicesResponse)(nil),                          // 95: NCloud.NBlockStore.NProto.TCreateVolumeFromDevicesResponse
	(*TUpdateDiskRegistryAgentListParamsRequest)(nil),                 // 96: NCloud.NBlockStore.NProto.TUpdateDiskRegistryAgentListParamsRequest
	(*TUpdateDiskRegistryAgentListParamsResponse)(nil),                // 97: NCloud.NBlockStore.NProto.TUpdateDiskRegistryAgentListParamsResponse
	(*TGetDependentDisksRequest)(nil),                                 // 98: NCloud.NBlockStore.NProto.TGetDependentDisksRequest
	(*TGetDependentDisksResponse)(nil),                                // 99: NCloud.NBlockStore.NProto.TGetDependentDisksResponse
	(*TAllocateCheckpointRequest)(nil),                                // 100: NCloud.NBlockStore.NProto.TAllocateCheckpointRequest
	(*TAllocateCheckpointResponse)(nil),                               // 101: NCloud.NBlockStore.NProto.TAllocateCheckpointResponse
	(*TDeallocateCheckpointRequest)(nil),                              // 102: NCloud.NBlockStore.NProto.TDeallocateCheckpointRequest
	(*TDeallocateCheckpointResponse)(nil),                             // 103: NCloud.NBlockStore.NProto.TDeallocateCheckpointResponse
	(*TGetCheckpointDataStateRequest)(nil),                            // 104: NCloud.NBlockStore.NProto.TGetCheckpointDataStateRequest
	(*TGetCheckpointDataStateResponse)(nil),                           // 105: NCloud.NBlockStore.NProto.TGetCheckpointDataStateResponse
	(*TSetCheckpointDataStateRequest)(nil),                            // 106: NCloud.NBlockStore.NProto.TSetCheckpointDataStateRequest
	(*TSetCheckpointDataStateResponse)(nil),                           // 107: NCloud.NBlockStore.NProto.TSetCheckpointDataStateResponse
	(*TPlacementGroupConfig_TDiskInfo)(nil),                           // 108: NCloud.NBlockStore.NProto.TPlacementGroupConfig.TDiskInfo
	(*TDeviceStats_TBucketInfo)(nil),                                  // 109: NCloud.NBlockStore.NProto.TDeviceStats.TBucketInfo
	(*TUserNotification_TDiskError)(nil),                              // 110: NCloud.NBlockStore.NProto.TUserNotification.TDiskError
	(*TUserNotification_TDiskBackOnline)(nil),                         // 111: NCloud.NBlockStore.NProto.TUserNotification.TDiskBackOnline
	(*TDiskRegistryStateBackup_TDiskStateUpdate)(nil),                 // 112: NCloud.NBlockStore.NProto.TDiskRegistryStateBackup.TDiskStateUpdate
	(*TDiskRegistryStateBackup_TBrokenDiskInfo)(nil),                  // 113: NCloud.NBlockStore.NProto.TDiskRegistryStateBackup.TBrokenDiskInfo
	(*TDiskRegistryStateBackup_TDirtyDevice)(nil),                     // 114: NCloud.NBlockStore.NProto.TDiskRegistryStateBackup.TDirtyDevice
	(*TDiskRegistryStateBackup_TAutomaticallyReplacedDeviceInfo)(nil), // 115: NCloud.NBlockStore.NProto.TDiskRegistryStateBackup.TAutomaticallyReplacedDeviceInfo
	nil,                                    // 116: NCloud.NBlockStore.NProto.TDiskRegistryStateBackup.DiskRegistryAgentListParamsEntry
	(*protos.TRdmaEndpoint)(nil),           // 117: NCloud.NBlockStore.NProto.TRdmaEndpoint
	(protos.EDevicePoolKind)(0),            // 118: NCloud.NBlockStore.NProto.EDevicePoolKind
	(protos.EDiskState)(0),                 // 119: NCloud.NBlockStore.NProto.EDiskState
	(protos1.EStorageMediaKind)(0),         // 120: NCloud.NProto.EStorageMediaKind
	(*protos.TPlacementGroupSettings)(nil), // 121: NCloud.NBlockStore.NProto.TPlacementGroupSettings
	(protos.EPlacementStrategy)(0),         // 122: NCloud.NBlockStore.NProto.EPlacementStrategy
	(*protos.TDeviceOverride)(nil),         // 123: NCloud.NBlockStore.NProto.TDeviceOverride
	(*protos.THeaders)(nil),                // 124: NCloud.NBlockStore.NProto.THeaders
	(*protos1.TError)(nil),                 // 125: NCloud.NProto.TError
	(protos.EVolumeIOMode)(0),              // 126: NCloud.NBlockStore.NProto.EVolumeIOMode
	(protos.EVolumeAccessMode)(0),          // 127: NCloud.NBlockStore.NProto.EVolumeAccessMode
	(*protos.TIOVector)(nil),               // 128: NCloud.NBlockStore.NProto.TIOVector
	(*protos.TDiskState)(nil),              // 129: NCloud.NBlockStore.NProto.TDiskState
}
var file_cloud_blockstore_libs_storage_protos_disk_proto_depIdxs = []int32{
	6,   // 0: NCloud.NBlockStore.NProto.TAgentConfig.Devices:type_name -> NCloud.NBlockStore.NProto.TDeviceConfig
	0,   // 1: NCloud.NBlockStore.NProto.TAgentConfig.State:type_name -> NCloud.NBlockStore.NProto.EAgentState
	3,   // 2: NCloud.NBlockStore.NProto.TAgentConfig.TimeBetweenFailures:type_name -> NCloud.NBlockStore.NProto.TMeanTimeBetweenFailures
	6,   // 3: NCloud.NBlockStore.NProto.TAgentConfig.UnknownDevices:type_name -> NCloud.NBlockStore.NProto.TDeviceConfig
	1,   // 4: NCloud.NBlockStore.NProto.TDeviceConfig.State:type_name -> NCloud.NBlockStore.NProto.EDeviceState
	117, // 5: NCloud.NBlockStore.NProto.TDeviceConfig.RdmaEndpoint:type_name -> NCloud.NBlockStore.NProto.TRdmaEndpoint
	118, // 6: NCloud.NBlockStore.NProto.TDeviceConfig.PoolKind:type_name -> NCloud.NBlockStore.NProto.EDevicePoolKind
	6,   // 7: NCloud.NBlockStore.NProto.TDeviceMigration.TargetDevice:type_name -> NCloud.NBlockStore.NProto.TDeviceConfig
	2,   // 8: NCloud.NBlockStore.NProto.TCheckpointReplica.State:type_name -> NCloud.NBlockStore.NProto.ECheckpointState
	119, // 9: NCloud.NBlockStore.NProto.TDiskConfig.State:type_name -> NCloud.NBlockStore.NProto.EDiskState
	8,   // 10: NCloud.NBlockStore.NProto.TDiskConfig.Migrations:type_name -> NCloud.NBlockStore.NProto.TDeviceMigration
	9,   // 11: NCloud.NBlockStore.NProto.TDiskConfig.FinishedMigrations:type_name -> NCloud.NBlockStore.NProto.TFinishedDeviceMigration
	120, // 12: NCloud.NBlockStore.NProto.TDiskConfig.StorageMediaKind:type_name -> NCloud.NProto.EStorageMediaKind
	10,  // 13: NCloud.NBlockStore.NProto.TDiskConfig.CheckpointReplica:type_name -> NCloud.NBlockStore.NProto.TCheckpointReplica
	108, // 14: NCloud.NBlockStore.NProto.TPlacementGroupConfig.Disks:type_name -> NCloud.NBlockStore.NProto.TPlacementGroupConfig.TDiskInfo
	121, // 15: NCloud.NBlockStore.NProto.TPlacementGroupConfig.Settings:type_name -> NCloud.NBlockStore.NProto.TPlacementGroupSettings
	122, // 16: NCloud.NBlockStore.NProto.TPlacementGroupConfig.PlacementStrategy:type_name -> NCloud.NBlockStore.NProto.EPlacementStrategy
	118, // 17: NCloud.NBlockStore.NProto.TDevicePoolConfig.Kind:type_name -> NCloud.NBlockStore.NProto.EDevicePoolKind
	4,   // 18: NCloud.NBlockStore.NProto.TDiskRegistryConfig.KnownAgents:type_name -> NCloud.NBlockStore.NProto.TAgentConfig
	123, // 19: NCloud.NBlockStore.NProto.TDiskRegistryConfig.DeviceOverrides:type_name -> NCloud.NBlockStore.NProto.TDeviceOverride
	13,  // 20: NCloud.NBlockStore.NProto.TDiskRegistryConfig.DevicePoolConfigs:type_name -> NCloud.NBlockStore.NProto.TDevicePoolConfig
	109, // 21: NCloud.NBlockStore.NProto.TDeviceStats.HistogramBuckets:type_name -> NCloud.NBlockStore.NProto.TDeviceStats.TBucketInfo
	16,  // 22: NCloud.NBlockStore.NProto.TAgentStats.DeviceStats:type_name -> NCloud.NBlockStore.NProto.TDeviceStats
	110, // 23: NCloud.NBlockStore.NProto.TUserNotification.DiskError:type_name -> NCloud.NBlockStore.NProto.TUserNotification.TDiskError
	111, // 24: NCloud.NBlockStore.NProto.TUserNotification.DiskBackOnline:type_name -> NCloud.NBlockStore.NProto.TUserNotification.TDiskBackOnline
	11,  // 25: NCloud.NBlockStore.NProto.TDiskRegistryStateBackup.Disks:type_name -> NCloud.NBlockStore.NProto.TDiskConfig
	12,  // 26: NCloud.NBlockStore.NProto.TDiskRegistryStateBackup.PlacementGroups:type_name -> NCloud.NBlockStore.NProto.TPlacementGroupConfig
	4,   // 27: NCloud.NBlockStore.NProto.TDiskRegistryStateBackup.Agents:type_name -> NCloud.NBlockStore.NProto.TAgentConfig
	5,   // 28: NCloud.NBlockStore.NProto.TDiskRegistryStateBackup.Sessions:type_name -> NCloud.NBlockStore.NProto.TDiskSession
	14,  // 29: NCloud.NBlockStore.NProto.TDiskRegistryStateBackup.Config:type_name -> NCloud.NBlockStore.NProto.TDiskRegistryConfig
	112, // 30: NCloud.NBlockStore.NProto.TDiskRegistryStateBackup.DiskStateChanges:type_name -> NCloud.NBlockStore.NProto.TDiskRegistryStateBackup.TDiskStateUpdate
	113, // 31: NCloud.NBlockStore.NProto.TDiskRegistryStateBackup.BrokenDisks:type_name -> NCloud.NBlockStore.NProto.TDiskRegistryStateBackup.TBrokenDiskInfo
	114, // 32: NCloud.NBlockStore.NProto.TDiskRegistryStateBackup.DirtyDevices:type_name -> NCloud.NBlockStore.NProto.TDiskRegistryStateBackup.TDirtyDevice
	115, // 33: NCloud.NBlockStore.NProto.TDiskRegistryStateBackup.AutomaticallyReplacedDevices:type_name -> NCloud.NBlockStore.NProto.TDiskRegistryStateBackup.TAutomaticallyReplacedDeviceInfo
	116, // 34: NCloud.NBlockStore.NProto.TDiskRegistryStateBackup.DiskRegistryAgentListParams:type_name -> NCloud.NBlockStore.NProto.TDiskRegistryStateBackup.DiskRegistryAgentListParamsEntry
	20,  // 35: NCloud.NBlockStore.NProto.TDiskRegistryStateBackup.UserNotifications:type_name -> NCloud.NBlockStore.NProto.TUserNotification
	7,   // 36: NCloud.NBlockStore.NProto.TDiskRegistryStateBackup.SuspendedDevices:type_name -> NCloud.NBlockStore.NProto.TSuspendedDevice
	124, // 37: NCloud.NBlockStore.NProto.TRegisterAgentRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	4,   // 38: NCloud.NBlockStore.NProto.TRegisterAgentRequest.AgentConfig:type_name -> NCloud.NBlockStore.NProto.TAgentConfig
	125, // 39: NCloud.NBlockStore.NProto.TRegisterAgentResponse.Error:type_name -> NCloud.NProto.TError
	124, // 40: NCloud.NBlockStore.NProto.TUnregisterAgentRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	125, // 41: NCloud.NBlockStore.NProto.TUnregisterAgentResponse.Error:type_name -> NCloud.NProto.TError
	124, // 42: NCloud.NBlockStore.NProto.TAllocateDiskRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	120, // 43: NCloud.NBlockStore.NProto.TAllocateDiskRequest.StorageMediaKind:type_name -> NCloud.NProto.EStorageMediaKind
	6,   // 44: NCloud.NBlockStore.NProto.TReplica.Devices:type_name -> NCloud.NBlockStore.NProto.TDeviceConfig
	125, // 45: NCloud.NBlockStore.NProto.TAllocateDiskResponse.Error:type_name -> NCloud.NProto.TError
	6,   // 46: NCloud.NBlockStore.NProto.TAllocateDiskResponse.Devices:type_name -> NCloud.NBlockStore.NProto.TDeviceConfig
	126, // 47: NCloud.NBlockStore.NProto.TAllocateDiskResponse.IOMode:type_name -> NCloud.NBlockStore.NProto.EVolumeIOMode
	8,   // 48: NCloud.NBlockStore.NProto.TAllocateDiskResponse.Migrations:type_name -> NCloud.NBlockStore.NProto.TDeviceMigration
	27,  // 49: NCloud.NBlockStore.NProto.TAllocateDiskResponse.Replicas:type_name -> NCloud.NBlockStore.NProto.TReplica
	124, // 50: NCloud.NBlockStore.NProto.TDeallocateDiskRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	125, // 51: NCloud.NBlockStore.NProto.TDeallocateDiskResponse.Error:type_name -> NCloud.NProto.TError
	124, // 52: NCloud.NBlockStore.NProto.TAcquireDevicesRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	15,  // 53: NCloud.NBlockStore.NProto.TAcquireDevicesRequest.RateLimits:type_name -> NCloud.NBlockStore.NProto.TDeviceRateLimits
	127, // 54: NCloud.NBlockStore.NProto.TAcquireDevicesRequest.AccessMode:type_name -> NCloud.NBlockStore.NProto.EVolumeAccessMode
	125, // 55: NCloud.NBlockStore.NProto.TAcquireDevicesResponse.Error:type_name -> NCloud.NProto.TError
	124, // 56: NCloud.NBlockStore.NProto.TReleaseDevicesRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	125, // 57: NCloud.NBlockStore.NProto.TReleaseDevicesResponse.Error:type_name -> NCloud.NProto.TError
	124, // 58: NCloud.NBlockStore.NProto.TAcquireDiskRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	127, // 59: NCloud.NBlockStore.NProto.TAcquireDiskRequest.AccessMode:type_name -> NCloud.NBlockStore.NProto.EVolumeAccessMode
	125, // 60: NCloud.NBlockStore.NProto.TAcquireDiskResponse.Error:type_name -> NCloud.NProto.TError
	6,   // 61: NCloud.NBlockStore.NProto.TAcquireDiskResponse.Devices:type_name -> NCloud.NBlockStore.NProto.TDeviceConfig
	8,   // 62: NCloud.NBlockStore.NProto.TAcquireDiskResponse.Migrations:type_name -> NCloud.NBlockStore.NProto.TDeviceMigration
	27,  // 63: NCloud.NBlockStore.NProto.TAcquireDiskResponse.Replicas:type_name -> NCloud.NBlockStore.NProto.TReplica
	124, // 64: NCloud.NBlockStore.NProto.TReleaseDiskRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	125, // 65: NCloud.NBlockStore.NProto.TReleaseDiskResponse.Error:type_name -> NCloud.NProto.TError
	124, // 66: NCloud.NBlockStore.NProto.TDescribeDiskRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	125, // 67: NCloud.NBlockStore.NProto.TDescribeDiskResponse.Error:type_name -> NCloud.NProto.TError
	6,   // 68: NCloud.NBlockStore.NProto.TDescribeDiskResponse.Devices:type_name -> NCloud.NBlockStore.NProto.TDeviceConfig
	119, // 69: NCloud.NBlockStore.NProto.TDescribeDiskResponse.State:type_name -> NCloud.NBlockStore.NProto.EDiskState
	8,   // 70: NCloud.NBlockStore.NProto.TDescribeDiskResponse.Migrations:type_name -> NCloud.NBlockStore.NProto.TDeviceMigration
	27,  // 71: NCloud.NBlockStore.NProto.TDescribeDiskResponse.Replicas:type_name -> NCloud.NBlockStore.NProto.TReplica
	124, // 72: NCloud.NBlockStore.NProto.TReadDeviceBlocksRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	125, // 73: NCloud.NBlockStore.NProto.TReadDeviceBlocksResponse.Error:type_name -> NCloud.NProto.TError
	128, // 74: NCloud.NBlockStore.NProto.TReadDeviceBlocksResponse.Blocks:type_name -> NCloud.NBlockStore.NProto.TIOVector
	124, // 75: NCloud.NBlockStore.NProto.TWriteDeviceBlocksRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	128, // 76: NCloud.NBlockStore.NProto.TWriteDeviceBlocksRequest.Blocks:type_name -> NCloud.NBlockStore.NProto.TIOVector
	125, // 77: NCloud.NBlockStore.NProto.TWriteDeviceBlocksResponse.Error:type_name -> NCloud.NProto.TError
	124, // 78: NCloud.NBlockStore.NProto.TZeroDeviceBlocksRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	125, // 79: NCloud.NBlockStore.NProto.TZeroDeviceBlocksResponse.Error:type_name -> NCloud.NProto.TError
	124, // 80: NCloud.NBlockStore.NProto.TUpdateConfigRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	14,  // 81: NCloud.NBlockStore.NProto.TUpdateConfigRequest.Config:type_name -> NCloud.NBlockStore.NProto.TDiskRegistryConfig
	125, // 82: NCloud.NBlockStore.NProto.TUpdateConfigResponse.Error:type_name -> NCloud.NProto.TError
	124, // 83: NCloud.NBlockStore.NProto.TDescribeConfigRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	125, // 84: NCloud.NBlockStore.NProto.TDescribeConfigResponse.Error:type_name -> NCloud.NProto.TError
	14,  // 85: NCloud.NBlockStore.NProto.TDescribeConfigResponse.Config:type_name -> NCloud.NBlockStore.NProto.TDiskRegistryConfig
	124, // 86: NCloud.NBlockStore.NProto.TSecureEraseDeviceRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	125, // 87: NCloud.NBlockStore.NProto.TSecureEraseDeviceResponse.Error:type_name -> NCloud.NProto.TError
	124, // 88: NCloud.NBlockStore.NProto.TChecksumDeviceBlocksRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	125, // 89: NCloud.NBlockStore.NProto.TChecksumDeviceBlocksResponse.Error:type_name -> NCloud.NProto.TError
	124, // 90: NCloud.NBlockStore.NProto.TDisableConcreteAgentRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	125, // 91: NCloud.NBlockStore.NProto.TDisableConcreteAgentResponse.Error:type_name -> NCloud.NProto.TError
	124, // 92: NCloud.NBlockStore.NProto.TEnableAgentDeviceRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	125, // 93: NCloud.NBlockStore.NProto.TEnableAgentDeviceResponse.Error:type_name -> NCloud.NProto.TError
	124, // 94: NCloud.NBlockStore.NProto.TStartForceMigrationRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	125, // 95: NCloud.NBlockStore.NProto.TStartForceMigrationResponse.Error:type_name -> NCloud.NProto.TError
	124, // 96: NCloud.NBlockStore.NProto.TUpdateAgentStatsRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	17,  // 97: NCloud.NBlockStore.NProto.TUpdateAgentStatsRequest.AgentStats:type_name -> NCloud.NBlockStore.NProto.TAgentStats
	125, // 98: NCloud.NBlockStore.NProto.TUpdateAgentStatsResponse.Error:type_name -> NCloud.NProto.TError
	124, // 99: NCloud.NBlockStore.NProto.TReplaceDeviceRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	125, // 100: NCloud.NBlockStore.NProto.TReplaceDeviceResponse.Error:type_name -> NCloud.NProto.TError
	124, // 101: NCloud.NBlockStore.NProto.TChangeDeviceStateRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	1,   // 102: NCloud.NBlockStore.NProto.TChangeDeviceStateRequest.DeviceState:type_name -> NCloud.NBlockStore.NProto.EDeviceState
	125, // 103: NCloud.NBlockStore.NProto.TChangeDeviceStateResponse.Error:type_name -> NCloud.NProto.TError
	124, // 104: NCloud.NBlockStore.NProto.TChangeAgentStateRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	0,   // 105: NCloud.NBlockStore.NProto.TChangeAgentStateRequest.AgentState:type_name -> NCloud.NBlockStore.NProto.EAgentState
	125, // 106: NCloud.NBlockStore.NProto.TChangeAgentStateResponse.Error:type_name -> NCloud.NProto.TError
	124, // 107: NCloud.NBlockStore.NProto.TDisableAgentRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	125, // 108: NCloud.NBlockStore.NProto.TDisableAgentResponse.Error:type_name -> NCloud.NProto.TError
	124, // 109: NCloud.NBlockStore.NProto.TFinishMigrationRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	71,  // 110: NCloud.NBlockStore.NProto.TFinishMigrationRequest.Migrations:type_name -> NCloud.NBlockStore.NProto.TDeviceMigrationIds
	125, // 111: NCloud.NBlockStore.NProto.TFinishMigrationResponse.Error:type_name -> NCloud.NProto.TError
	124, // 112: NCloud.NBlockStore.NProto.TBackupDiskRegistryStateRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	125, // 113: NCloud.NBlockStore.NProto.TBackupDiskRegistryStateResponse.Error:type_name -> NCloud.NProto.TError
	21,  // 114: NCloud.NBlockStore.NProto.TBackupDiskRegistryStateResponse.Backup:type_name -> NCloud.NBlockStore.NProto.TDiskRegistryStateBackup
	124, // 115: NCloud.NBlockStore.NProto.TRestoreDiskRegistryStateRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	21,  // 116: NCloud.NBlockStore.NProto.TRestoreDiskRegistryStateRequest.Backup:type_name -> NCloud.NBlockStore.NProto.TDiskRegistryStateBackup
	125, // 117: NCloud.NBlockStore.NProto.TRestoreDiskRegistryStateResponse.Error:type_name -> NCloud.NProto.TError
	124, // 118: NCloud.NBlockStore.NProto.TSetWritableStateRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	125, // 119: NCloud.NBlockStore.NProto.TSetWritableStateResponse.Error:type_name -> NCloud.NProto.TError
	124, // 120: NCloud.NBlockStore.NProto.TMarkDiskForCleanupRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	125, // 121: NCloud.NBlockStore.NProto.TMarkDiskForCleanupResponse.Error:type_name -> NCloud.NProto.TError
	124, // 122: NCloud.NBlockStore.NProto.TSetUserIdRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	125, // 123: NCloud.NBlockStore.NProto.TSetUserIdResponse.Error:type_name -> NCloud.NProto.TError
	125, // 124: NCloud.NBlockStore.NProto.TUpdateDiskBlockSizeResponse.Error:type_name -> NCloud.NProto.TError
	125, // 125: NCloud.NBlockStore.NProto.TUpdateDiskReplicaCountResponse.Error:type_name -> NCloud.NProto.TError
	125, // 126: NCloud.NBlockStore.NProto.TMarkReplacementDeviceResponse.Error:type_name -> NCloud.NProto.TError
	124, // 127: NCloud.NBlockStore.NProto.TSuspendDeviceRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	125, // 128: NCloud.NBlockStore.NProto.TSuspendDeviceResponse.Error:type_name -> NCloud.NProto.TError
	124, // 129: NCloud.NBlockStore.NProto.TUpdatePlacementGroupSettingsRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	121, // 130: NCloud.NBlockStore.NProto.TUpdatePlacementGroupSettingsRequest.Settings:type_name -> NCloud.NBlockStore.NProto.TPlacementGroupSettings
	125, // 131: NCloud.NBlockStore.NProto.TUpdatePlacementGroupSettingsResponse.Error:type_name -> NCloud.NProto.TError
	125, // 132: NCloud.NBlockStore.NProto.TCreateVolumeFromDevicesResponse.Error:type_name -> NCloud.NProto.TError
	124, // 133: NCloud.NBlockStore.NProto.TUpdateDiskRegistryAgentListParamsRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	18,  // 134: NCloud.NBlockStore.NProto.TUpdateDiskRegistryAgentListParamsRequest.Params:type_name -> NCloud.NBlockStore.NProto.TDiskRegistryAgentListRequestParams
	125, // 135: NCloud.NBlockStore.NProto.TUpdateDiskRegistryAgentListParamsResponse.Error:type_name -> NCloud.NProto.TError
	125, // 136: NCloud.NBlockStore.NProto.TGetDependentDisksResponse.Error:type_name -> NCloud.NProto.TError
	125, // 137: NCloud.NBlockStore.NProto.TAllocateCheckpointResponse.Error:type_name -> NCloud.NProto.TError
	125, // 138: NCloud.NBlockStore.NProto.TDeallocateCheckpointResponse.Error:type_name -> NCloud.NProto.TError
	125, // 139: NCloud.NBlockStore.NProto.TGetCheckpointDataStateResponse.Error:type_name -> NCloud.NProto.TError
	2,   // 140: NCloud.NBlockStore.NProto.TGetCheckpointDataStateResponse.CheckpointState:type_name -> NCloud.NBlockStore.NProto.ECheckpointState
	2,   // 141: NCloud.NBlockStore.NProto.TSetCheckpointDataStateRequest.CheckpointState:type_name -> NCloud.NBlockStore.NProto.ECheckpointState
	125, // 142: NCloud.NBlockStore.NProto.TSetCheckpointDataStateResponse.Error:type_name -> NCloud.NProto.TError
	129, // 143: NCloud.NBlockStore.NProto.TDiskRegistryStateBackup.TDiskStateUpdate.State:type_name -> NCloud.NBlockStore.NProto.TDiskState
	19,  // 144: NCloud.NBlockStore.NProto.TDiskRegistryStateBackup.DiskRegistryAgentListParamsEntry.value:type_name -> NCloud.NBlockStore.NProto.TDiskRegistryAgentParams
	145, // [145:145] is the sub-list for method output_type
	145, // [145:145] is the sub-list for method input_type
	145, // [145:145] is the sub-list for extension type_name
	145, // [145:145] is the sub-list for extension extendee
	0,   // [0:145] is the sub-list for field type_name
}

func init() { file_cloud_blockstore_libs_storage_protos_disk_proto_init() }
func file_cloud_blockstore_libs_storage_protos_disk_proto_init() {
	if File_cloud_blockstore_libs_storage_protos_disk_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TMeanTimeBetweenFailures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAgentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDiskSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDeviceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSuspendedDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDeviceMigration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFinishedDeviceMigration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCheckpointReplica); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDiskConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPlacementGroupConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDevicePoolConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDiskRegistryConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDeviceRateLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDeviceStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAgentStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDiskRegistryAgentListRequestParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDiskRegistryAgentParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TUserNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDiskRegistryStateBackup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TRegisterAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TRegisterAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TUnregisterAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TUnregisterAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAllocateDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TReplica); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAllocateDiskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDeallocateDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDeallocateDiskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAcquireDevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAcquireDevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TReleaseDevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TReleaseDevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAcquireDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAcquireDiskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TReleaseDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TReleaseDiskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDescribeDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDescribeDiskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TReadDeviceBlocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TReadDeviceBlocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TWriteDeviceBlocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TWriteDeviceBlocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TZeroDeviceBlocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TZeroDeviceBlocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TUpdateConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TUpdateConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDescribeConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDescribeConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSecureEraseDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSecureEraseDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TChecksumDeviceBlocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TChecksumDeviceBlocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDisableConcreteAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDisableConcreteAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TEnableAgentDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TEnableAgentDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TStartForceMigrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TStartForceMigrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TUpdateAgentStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TUpdateAgentStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TReplaceDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TReplaceDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TChangeDeviceStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TChangeDeviceStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TChangeAgentStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TChangeAgentStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDisableAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDisableAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDeviceMigrationIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFinishMigrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFinishMigrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TBackupDiskRegistryStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TBackupDiskRegistryStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TRestoreDiskRegistryStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TRestoreDiskRegistryStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSetWritableStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSetWritableStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TMarkDiskForCleanupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TMarkDiskForCleanupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSetUserIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSetUserIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TUpdateDiskBlockSizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TUpdateDiskBlockSizeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TUpdateDiskReplicaCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TUpdateDiskReplicaCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TMarkReplacementDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TMarkReplacementDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSuspendDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSuspendDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TUpdatePlacementGroupSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TUpdatePlacementGroupSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCreateVolumeFromDevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCreateVolumeFromDevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TUpdateDiskRegistryAgentListParamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TUpdateDiskRegistryAgentListParamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TGetDependentDisksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TGetDependentDisksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAllocateCheckpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAllocateCheckpointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDeallocateCheckpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDeallocateCheckpointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TGetCheckpointDataStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TGetCheckpointDataStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSetCheckpointDataStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSetCheckpointDataStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPlacementGroupConfig_TDiskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDeviceStats_TBucketInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TUserNotification_TDiskError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TUserNotification_TDiskBackOnline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDiskRegistryStateBackup_TDiskStateUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDiskRegistryStateBackup_TBrokenDiskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDiskRegistryStateBackup_TDirtyDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDiskRegistryStateBackup_TAutomaticallyReplacedDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*TUserNotification_DiskError)(nil),
		(*TUserNotification_DiskBackOnline)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_blockstore_libs_storage_protos_disk_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   114,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_blockstore_libs_storage_protos_disk_proto_goTypes,
		DependencyIndexes: file_cloud_blockstore_libs_storage_protos_disk_proto_depIdxs,
		EnumInfos:         file_cloud_blockstore_libs_storage_protos_disk_proto_enumTypes,
		MessageInfos:      file_cloud_blockstore_libs_storage_protos_disk_proto_msgTypes,
	}.Build()
	File_cloud_blockstore_libs_storage_protos_disk_proto = out.File
	file_cloud_blockstore_libs_storage_protos_disk_proto_rawDesc = nil
	file_cloud_blockstore_libs_storage_protos_disk_proto_goTypes = nil
	file_cloud_blockstore_libs_storage_protos_disk_proto_depIdxs = nil
}
