// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.0
// source: cloud/blockstore/libs/storage/protos/part.proto

package protos

import (
	protos1 "github.com/ydb-platform/nbs/cloud/blockstore/public/api/protos"
	protos "github.com/ydb-platform/nbs/cloud/storage/core/protos"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TChannelProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataKind uint32 `protobuf:"varint,1,opt,name=DataKind,proto3" json:"DataKind,omitempty"`
	PoolKind string `protobuf:"bytes,2,opt,name=PoolKind,proto3" json:"PoolKind,omitempty"` // needed only for mon pages
}

func (x *TChannelProfile) Reset() {
	*x = TChannelProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TChannelProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TChannelProfile) ProtoMessage() {}

func (x *TChannelProfile) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TChannelProfile.ProtoReflect.Descriptor instead.
func (*TChannelProfile) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_part_proto_rawDescGZIP(), []int{0}
}

func (x *TChannelProfile) GetDataKind() uint32 {
	if x != nil {
		return x.DataKind
	}
	return 0
}

func (x *TChannelProfile) GetPoolKind() string {
	if x != nil {
		return x.PoolKind
	}
	return ""
}

type TPartitionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label of volume.
	DiskId string `protobuf:"bytes,1,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Owner information.
	ProjectId string `protobuf:"bytes,2,opt,name=ProjectId,proto3" json:"ProjectId,omitempty"`
	// VM information.
	InstanceId string `protobuf:"bytes,3,opt,name=InstanceId,proto3" json:"InstanceId,omitempty"`
	// Minimum addressable block size (smallest unit of I/O operations).
	BlockSize uint32 `protobuf:"varint,4,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`
	// Maximum number of blocks stored in volume.
	BlocksCount uint64 `protobuf:"varint,5,opt,name=BlocksCount,proto3" json:"BlocksCount,omitempty"`
	// Number of user channels to store blobs.
	ChannelsCount uint32 `protobuf:"varint,6,opt,name=ChannelsCount,proto3" json:"ChannelsCount,omitempty"`
	// Storage media to use.
	StorageMediaKind protos.EStorageMediaKind `protobuf:"varint,7,opt,name=StorageMediaKind,proto3,enum=NCloud.NProto.EStorageMediaKind" json:"StorageMediaKind,omitempty"`
	// User folder Id, used for billing.
	FolderId string `protobuf:"bytes,8,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	// Cloud Id, used for billing.
	CloudId string `protobuf:"bytes,9,opt,name=CloudId,proto3" json:"CloudId,omitempty"`
	// Partition tablet version.
	TabletVersion uint32 `protobuf:"varint,10,opt,name=TabletVersion,proto3" json:"TabletVersion,omitempty"`
	// Used for throttling
	PerformanceProfile *protos1.TVolumePerformanceProfile `protobuf:"bytes,11,opt,name=PerformanceProfile,proto3" json:"PerformanceProfile,omitempty"`
	// Optional label of base volume.
	// If this is set then current volume is called "overlay volume".
	BaseDiskId string `protobuf:"bytes,12,opt,name=BaseDiskId,proto3" json:"BaseDiskId,omitempty"`
	// Optional "base volume checkpoint" overlay volume sits on.
	// Should not be empty when BaseDiskId is not empty.
	BaseDiskCheckpointId string `protobuf:"bytes,13,opt,name=BaseDiskCheckpointId,proto3" json:"BaseDiskCheckpointId,omitempty"`
	// Explicit channel configuration, a replacement for ChannelsCount.
	ExplicitChannelProfiles []*TChannelProfile `protobuf:"bytes,14,rep,name=ExplicitChannelProfiles,proto3" json:"ExplicitChannelProfiles,omitempty"`
	// Effectively limits max blob size. This value needs to be fixed for each
	// v1 disk since it affects the behaviour of block masks for all existing blobs.
	MaxBlocksInBlob uint32 `protobuf:"varint,15,opt,name=MaxBlocksInBlob,proto3" json:"MaxBlocksInBlob,omitempty"`
	// Determines index geometry for v2 partitions.
	ZoneBlockCount uint32 `protobuf:"varint,16,opt,name=ZoneBlockCount,proto3" json:"ZoneBlockCount,omitempty"`
	// Optional tablet id of base volume.
	BaseDiskTabletId uint64 `protobuf:"varint,17,opt,name=BaseDiskTabletId,proto3" json:"BaseDiskTabletId,omitempty"`
}

func (x *TPartitionConfig) Reset() {
	*x = TPartitionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPartitionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPartitionConfig) ProtoMessage() {}

func (x *TPartitionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPartitionConfig.ProtoReflect.Descriptor instead.
func (*TPartitionConfig) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_part_proto_rawDescGZIP(), []int{1}
}

func (x *TPartitionConfig) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TPartitionConfig) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *TPartitionConfig) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *TPartitionConfig) GetBlockSize() uint32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *TPartitionConfig) GetBlocksCount() uint64 {
	if x != nil {
		return x.BlocksCount
	}
	return 0
}

func (x *TPartitionConfig) GetChannelsCount() uint32 {
	if x != nil {
		return x.ChannelsCount
	}
	return 0
}

func (x *TPartitionConfig) GetStorageMediaKind() protos.EStorageMediaKind {
	if x != nil {
		return x.StorageMediaKind
	}
	return protos.EStorageMediaKind_STORAGE_MEDIA_DEFAULT
}

func (x *TPartitionConfig) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *TPartitionConfig) GetCloudId() string {
	if x != nil {
		return x.CloudId
	}
	return ""
}

func (x *TPartitionConfig) GetTabletVersion() uint32 {
	if x != nil {
		return x.TabletVersion
	}
	return 0
}

func (x *TPartitionConfig) GetPerformanceProfile() *protos1.TVolumePerformanceProfile {
	if x != nil {
		return x.PerformanceProfile
	}
	return nil
}

func (x *TPartitionConfig) GetBaseDiskId() string {
	if x != nil {
		return x.BaseDiskId
	}
	return ""
}

func (x *TPartitionConfig) GetBaseDiskCheckpointId() string {
	if x != nil {
		return x.BaseDiskCheckpointId
	}
	return ""
}

func (x *TPartitionConfig) GetExplicitChannelProfiles() []*TChannelProfile {
	if x != nil {
		return x.ExplicitChannelProfiles
	}
	return nil
}

func (x *TPartitionConfig) GetMaxBlocksInBlob() uint32 {
	if x != nil {
		return x.MaxBlocksInBlob
	}
	return 0
}

func (x *TPartitionConfig) GetZoneBlockCount() uint32 {
	if x != nil {
		return x.ZoneBlockCount
	}
	return 0
}

func (x *TPartitionConfig) GetBaseDiskTabletId() uint64 {
	if x != nil {
		return x.BaseDiskTabletId
	}
	return 0
}

type TPartitionStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// I/O operations invoked directly by user.
	UserReadCounters  *protos1.TIOCounters `protobuf:"bytes,1,opt,name=UserReadCounters,proto3" json:"UserReadCounters,omitempty"`
	UserWriteCounters *protos1.TIOCounters `protobuf:"bytes,2,opt,name=UserWriteCounters,proto3" json:"UserWriteCounters,omitempty"`
	// Background I/O operations (system overhead).
	SysReadCounters     *protos1.TIOCounters `protobuf:"bytes,3,opt,name=SysReadCounters,proto3" json:"SysReadCounters,omitempty"`
	SysWriteCounters    *protos1.TIOCounters `protobuf:"bytes,4,opt,name=SysWriteCounters,proto3" json:"SysWriteCounters,omitempty"`
	SysChecksumCounters *protos1.TIOCounters `protobuf:"bytes,14,opt,name=SysChecksumCounters,proto3" json:"SysChecksumCounters,omitempty"`
	// Numbers of stored blobs.
	MixedBlobsCount  uint64 `protobuf:"varint,5,opt,name=MixedBlobsCount,proto3" json:"MixedBlobsCount,omitempty"`
	MergedBlobsCount uint64 `protobuf:"varint,6,opt,name=MergedBlobsCount,proto3" json:"MergedBlobsCount,omitempty"`
	// Numbers of stored blocks.
	FreshBlocksCount  uint64 `protobuf:"varint,7,opt,name=FreshBlocksCount,proto3" json:"FreshBlocksCount,omitempty"`
	MixedBlocksCount  uint64 `protobuf:"varint,8,opt,name=MixedBlocksCount,proto3" json:"MixedBlocksCount,omitempty"`
	MergedBlocksCount uint64 `protobuf:"varint,9,opt,name=MergedBlocksCount,proto3" json:"MergedBlocksCount,omitempty"`
	// Number of blocks actually used.
	UsedBlocksCount uint64 `protobuf:"varint,10,opt,name=UsedBlocksCount,proto3" json:"UsedBlocksCount,omitempty"`
	// Number of garbage blocks.
	GarbageBlocksCount uint64 `protobuf:"varint,11,opt,name=GarbageBlocksCount,proto3" json:"GarbageBlocksCount,omitempty"`
	// Number of overwritten blocks stored only for checkpoints.
	CheckpointBlocksCount uint64 `protobuf:"varint,12,opt,name=CheckpointBlocksCount,proto3" json:"CheckpointBlocksCount,omitempty"`
	// Number of blocks used from user's point of view.
	// Includes the blocks used at the base disk (for overlay disks).
	LogicalUsedBlocksCount uint64 `protobuf:"varint,13,opt,name=LogicalUsedBlocksCount,proto3" json:"LogicalUsedBlocksCount,omitempty"`
	// Background I/O operations (system overhead).
	RealSysReadCounters  *protos1.TIOCounters `protobuf:"bytes,15,opt,name=RealSysReadCounters,proto3" json:"RealSysReadCounters,omitempty"`
	RealSysWriteCounters *protos1.TIOCounters `protobuf:"bytes,16,opt,name=RealSysWriteCounters,proto3" json:"RealSysWriteCounters,omitempty"`
	// Compaction reading and blobs count triggers counters
	CompactionByReadStats             uint64 `protobuf:"varint,17,opt,name=CompactionByReadStats,proto3" json:"CompactionByReadStats,omitempty"`
	CompactionByBlobCountPerRange     uint64 `protobuf:"varint,18,opt,name=CompactionByBlobCountPerRange,proto3" json:"CompactionByBlobCountPerRange,omitempty"`
	CompactionByBlobCountPerDisk      uint64 `protobuf:"varint,19,opt,name=CompactionByBlobCountPerDisk,proto3" json:"CompactionByBlobCountPerDisk,omitempty"`
	CompactionByGarbageBlocksPerRange uint64 `protobuf:"varint,20,opt,name=CompactionByGarbageBlocksPerRange,proto3" json:"CompactionByGarbageBlocksPerRange,omitempty"`
	CompactionByGarbageBlocksPerDisk  uint64 `protobuf:"varint,21,opt,name=CompactionByGarbageBlocksPerDisk,proto3" json:"CompactionByGarbageBlocksPerDisk,omitempty"`
}

func (x *TPartitionStats) Reset() {
	*x = TPartitionStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPartitionStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPartitionStats) ProtoMessage() {}

func (x *TPartitionStats) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPartitionStats.ProtoReflect.Descriptor instead.
func (*TPartitionStats) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_part_proto_rawDescGZIP(), []int{2}
}

func (x *TPartitionStats) GetUserReadCounters() *protos1.TIOCounters {
	if x != nil {
		return x.UserReadCounters
	}
	return nil
}

func (x *TPartitionStats) GetUserWriteCounters() *protos1.TIOCounters {
	if x != nil {
		return x.UserWriteCounters
	}
	return nil
}

func (x *TPartitionStats) GetSysReadCounters() *protos1.TIOCounters {
	if x != nil {
		return x.SysReadCounters
	}
	return nil
}

func (x *TPartitionStats) GetSysWriteCounters() *protos1.TIOCounters {
	if x != nil {
		return x.SysWriteCounters
	}
	return nil
}

func (x *TPartitionStats) GetSysChecksumCounters() *protos1.TIOCounters {
	if x != nil {
		return x.SysChecksumCounters
	}
	return nil
}

func (x *TPartitionStats) GetMixedBlobsCount() uint64 {
	if x != nil {
		return x.MixedBlobsCount
	}
	return 0
}

func (x *TPartitionStats) GetMergedBlobsCount() uint64 {
	if x != nil {
		return x.MergedBlobsCount
	}
	return 0
}

func (x *TPartitionStats) GetFreshBlocksCount() uint64 {
	if x != nil {
		return x.FreshBlocksCount
	}
	return 0
}

func (x *TPartitionStats) GetMixedBlocksCount() uint64 {
	if x != nil {
		return x.MixedBlocksCount
	}
	return 0
}

func (x *TPartitionStats) GetMergedBlocksCount() uint64 {
	if x != nil {
		return x.MergedBlocksCount
	}
	return 0
}

func (x *TPartitionStats) GetUsedBlocksCount() uint64 {
	if x != nil {
		return x.UsedBlocksCount
	}
	return 0
}

func (x *TPartitionStats) GetGarbageBlocksCount() uint64 {
	if x != nil {
		return x.GarbageBlocksCount
	}
	return 0
}

func (x *TPartitionStats) GetCheckpointBlocksCount() uint64 {
	if x != nil {
		return x.CheckpointBlocksCount
	}
	return 0
}

func (x *TPartitionStats) GetLogicalUsedBlocksCount() uint64 {
	if x != nil {
		return x.LogicalUsedBlocksCount
	}
	return 0
}

func (x *TPartitionStats) GetRealSysReadCounters() *protos1.TIOCounters {
	if x != nil {
		return x.RealSysReadCounters
	}
	return nil
}

func (x *TPartitionStats) GetRealSysWriteCounters() *protos1.TIOCounters {
	if x != nil {
		return x.RealSysWriteCounters
	}
	return nil
}

func (x *TPartitionStats) GetCompactionByReadStats() uint64 {
	if x != nil {
		return x.CompactionByReadStats
	}
	return 0
}

func (x *TPartitionStats) GetCompactionByBlobCountPerRange() uint64 {
	if x != nil {
		return x.CompactionByBlobCountPerRange
	}
	return 0
}

func (x *TPartitionStats) GetCompactionByBlobCountPerDisk() uint64 {
	if x != nil {
		return x.CompactionByBlobCountPerDisk
	}
	return 0
}

func (x *TPartitionStats) GetCompactionByGarbageBlocksPerRange() uint64 {
	if x != nil {
		return x.CompactionByGarbageBlocksPerRange
	}
	return 0
}

func (x *TPartitionStats) GetCompactionByGarbageBlocksPerDisk() uint64 {
	if x != nil {
		return x.CompactionByGarbageBlocksPerDisk
	}
	return 0
}

type TPartitionMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition configuration.
	Config *TPartitionConfig `protobuf:"bytes,1,opt,name=Config,proto3" json:"Config,omitempty"`
	// Partition statistics.
	Stats *TPartitionStats `protobuf:"bytes,2,opt,name=Stats,proto3" json:"Stats,omitempty"`
	// Last garbage collection gen:step.
	LastCollectCommitId uint64 `protobuf:"varint,3,opt,name=LastCollectCommitId,proto3" json:"LastCollectCommitId,omitempty"`
	// Last flush commitId (valid only for partition v2).
	LastFlushCommitId uint64 `protobuf:"varint,4,opt,name=LastFlushCommitId,proto3" json:"LastFlushCommitId,omitempty"`
	// Commit id up to which it's safe to trim fresh log (valid only for
	// partition v1).
	TrimFreshLogToCommitId uint64 `protobuf:"varint,5,opt,name=TrimFreshLogToCommitId,proto3" json:"TrimFreshLogToCommitId,omitempty"`
}

func (x *TPartitionMeta) Reset() {
	*x = TPartitionMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPartitionMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPartitionMeta) ProtoMessage() {}

func (x *TPartitionMeta) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPartitionMeta.ProtoReflect.Descriptor instead.
func (*TPartitionMeta) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_part_proto_rawDescGZIP(), []int{3}
}

func (x *TPartitionMeta) GetConfig() *TPartitionConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TPartitionMeta) GetStats() *TPartitionStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *TPartitionMeta) GetLastCollectCommitId() uint64 {
	if x != nil {
		return x.LastCollectCommitId
	}
	return 0
}

func (x *TPartitionMeta) GetLastFlushCommitId() uint64 {
	if x != nil {
		return x.LastFlushCommitId
	}
	return 0
}

func (x *TPartitionMeta) GetTrimFreshLogToCommitId() uint64 {
	if x != nil {
		return x.TrimFreshLogToCommitId
	}
	return 0
}

type TBlobMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Blocks:
	//	*TBlobMeta_MixedBlocks
	//	*TBlobMeta_MergedBlocks
	Blocks isTBlobMeta_Blocks `protobuf_oneof:"Blocks"`
}

func (x *TBlobMeta) Reset() {
	*x = TBlobMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TBlobMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TBlobMeta) ProtoMessage() {}

func (x *TBlobMeta) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TBlobMeta.ProtoReflect.Descriptor instead.
func (*TBlobMeta) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_part_proto_rawDescGZIP(), []int{4}
}

func (m *TBlobMeta) GetBlocks() isTBlobMeta_Blocks {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func (x *TBlobMeta) GetMixedBlocks() *TBlobMeta_TMixedBlocks {
	if x, ok := x.GetBlocks().(*TBlobMeta_MixedBlocks); ok {
		return x.MixedBlocks
	}
	return nil
}

func (x *TBlobMeta) GetMergedBlocks() *TBlobMeta_TMergedBlocks {
	if x, ok := x.GetBlocks().(*TBlobMeta_MergedBlocks); ok {
		return x.MergedBlocks
	}
	return nil
}

type isTBlobMeta_Blocks interface {
	isTBlobMeta_Blocks()
}

type TBlobMeta_MixedBlocks struct {
	MixedBlocks *TBlobMeta_TMixedBlocks `protobuf:"bytes,1,opt,name=MixedBlocks,proto3,oneof"`
}

type TBlobMeta_MergedBlocks struct {
	MergedBlocks *TBlobMeta_TMergedBlocks `protobuf:"bytes,2,opt,name=MergedBlocks,proto3,oneof"`
}

func (*TBlobMeta_MixedBlocks) isTBlobMeta_Blocks() {}

func (*TBlobMeta_MergedBlocks) isTBlobMeta_Blocks() {}

type TBlobMeta2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartIndices         []uint32 `protobuf:"varint,1,rep,packed,name=StartIndices,proto3" json:"StartIndices,omitempty"`
	EndIndices           []uint32 `protobuf:"varint,2,rep,packed,name=EndIndices,proto3" json:"EndIndices,omitempty"`
	BlockCount           uint32   `protobuf:"varint,3,opt,name=BlockCount,proto3" json:"BlockCount,omitempty"`
	CheckpointBlockCount uint32   `protobuf:"varint,4,opt,name=CheckpointBlockCount,proto3" json:"CheckpointBlockCount,omitempty"`
}

func (x *TBlobMeta2) Reset() {
	*x = TBlobMeta2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TBlobMeta2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TBlobMeta2) ProtoMessage() {}

func (x *TBlobMeta2) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TBlobMeta2.ProtoReflect.Descriptor instead.
func (*TBlobMeta2) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_part_proto_rawDescGZIP(), []int{5}
}

func (x *TBlobMeta2) GetStartIndices() []uint32 {
	if x != nil {
		return x.StartIndices
	}
	return nil
}

func (x *TBlobMeta2) GetEndIndices() []uint32 {
	if x != nil {
		return x.EndIndices
	}
	return nil
}

func (x *TBlobMeta2) GetBlockCount() uint32 {
	if x != nil {
		return x.BlockCount
	}
	return 0
}

func (x *TBlobMeta2) GetCheckpointBlockCount() uint32 {
	if x != nil {
		return x.CheckpointBlockCount
	}
	return 0
}

type TFreshBlobMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartIndices []uint32 `protobuf:"varint,1,rep,packed,name=StartIndices,proto3" json:"StartIndices,omitempty"`
	EndIndices   []uint32 `protobuf:"varint,2,rep,packed,name=EndIndices,proto3" json:"EndIndices,omitempty"`
	IsZero       bool     `protobuf:"varint,3,opt,name=IsZero,proto3" json:"IsZero,omitempty"`
}

func (x *TFreshBlobMeta) Reset() {
	*x = TFreshBlobMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFreshBlobMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFreshBlobMeta) ProtoMessage() {}

func (x *TFreshBlobMeta) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFreshBlobMeta.ProtoReflect.Descriptor instead.
func (*TFreshBlobMeta) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_part_proto_rawDescGZIP(), []int{6}
}

func (x *TFreshBlobMeta) GetStartIndices() []uint32 {
	if x != nil {
		return x.StartIndices
	}
	return nil
}

func (x *TFreshBlobMeta) GetEndIndices() []uint32 {
	if x != nil {
		return x.EndIndices
	}
	return nil
}

func (x *TFreshBlobMeta) GetIsZero() bool {
	if x != nil {
		return x.IsZero
	}
	return false
}

type TFreshBlobMeta2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartIndices []uint32 `protobuf:"varint,1,rep,packed,name=StartIndices,proto3" json:"StartIndices,omitempty"`
	EndIndices   []uint32 `protobuf:"varint,2,rep,packed,name=EndIndices,proto3" json:"EndIndices,omitempty"`
	DeletionIds  []uint64 `protobuf:"varint,3,rep,packed,name=DeletionIds,proto3" json:"DeletionIds,omitempty"`
}

func (x *TFreshBlobMeta2) Reset() {
	*x = TFreshBlobMeta2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFreshBlobMeta2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFreshBlobMeta2) ProtoMessage() {}

func (x *TFreshBlobMeta2) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFreshBlobMeta2.ProtoReflect.Descriptor instead.
func (*TFreshBlobMeta2) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_part_proto_rawDescGZIP(), []int{7}
}

func (x *TFreshBlobMeta2) GetStartIndices() []uint32 {
	if x != nil {
		return x.StartIndices
	}
	return nil
}

func (x *TFreshBlobMeta2) GetEndIndices() []uint32 {
	if x != nil {
		return x.EndIndices
	}
	return nil
}

func (x *TFreshBlobMeta2) GetDeletionIds() []uint64 {
	if x != nil {
		return x.DeletionIds
	}
	return nil
}

type TCheckpointMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitId      uint64           `protobuf:"varint,1,opt,name=CommitId,proto3" json:"CommitId,omitempty"`
	CheckpointId  string           `protobuf:"bytes,2,opt,name=CheckpointId,proto3" json:"CheckpointId,omitempty"`
	IdempotenceId string           `protobuf:"bytes,3,opt,name=IdempotenceId,proto3" json:"IdempotenceId,omitempty"`
	DateCreated   uint64           `protobuf:"varint,4,opt,name=DateCreated,proto3" json:"DateCreated,omitempty"`
	Stats         *TPartitionStats `protobuf:"bytes,5,opt,name=Stats,proto3" json:"Stats,omitempty"`
	DateDeleted   uint64           `protobuf:"varint,6,opt,name=DateDeleted,proto3" json:"DateDeleted,omitempty"`
}

func (x *TCheckpointMeta) Reset() {
	*x = TCheckpointMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCheckpointMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCheckpointMeta) ProtoMessage() {}

func (x *TCheckpointMeta) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCheckpointMeta.ProtoReflect.Descriptor instead.
func (*TCheckpointMeta) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_part_proto_rawDescGZIP(), []int{8}
}

func (x *TCheckpointMeta) GetCommitId() uint64 {
	if x != nil {
		return x.CommitId
	}
	return 0
}

func (x *TCheckpointMeta) GetCheckpointId() string {
	if x != nil {
		return x.CheckpointId
	}
	return ""
}

func (x *TCheckpointMeta) GetIdempotenceId() string {
	if x != nil {
		return x.IdempotenceId
	}
	return ""
}

func (x *TCheckpointMeta) GetDateCreated() uint64 {
	if x != nil {
		return x.DateCreated
	}
	return 0
}

func (x *TCheckpointMeta) GetStats() *TPartitionStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *TCheckpointMeta) GetDateDeleted() uint64 {
	if x != nil {
		return x.DateDeleted
	}
	return 0
}

type TBlobMeta_TMixedBlocks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocks    []uint32 `protobuf:"varint,1,rep,packed,name=Blocks,proto3" json:"Blocks,omitempty"`
	CommitIds []uint64 `protobuf:"varint,2,rep,packed,name=CommitIds,proto3" json:"CommitIds,omitempty"`
}

func (x *TBlobMeta_TMixedBlocks) Reset() {
	*x = TBlobMeta_TMixedBlocks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TBlobMeta_TMixedBlocks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TBlobMeta_TMixedBlocks) ProtoMessage() {}

func (x *TBlobMeta_TMixedBlocks) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TBlobMeta_TMixedBlocks.ProtoReflect.Descriptor instead.
func (*TBlobMeta_TMixedBlocks) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_part_proto_rawDescGZIP(), []int{4, 0}
}

func (x *TBlobMeta_TMixedBlocks) GetBlocks() []uint32 {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *TBlobMeta_TMixedBlocks) GetCommitIds() []uint64 {
	if x != nil {
		return x.CommitIds
	}
	return nil
}

type TBlobMeta_TMergedBlocks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start   uint32 `protobuf:"varint,1,opt,name=Start,proto3" json:"Start,omitempty"`
	End     uint32 `protobuf:"varint,2,opt,name=End,proto3" json:"End,omitempty"`
	Skipped uint32 `protobuf:"varint,3,opt,name=Skipped,proto3" json:"Skipped,omitempty"`
}

func (x *TBlobMeta_TMergedBlocks) Reset() {
	*x = TBlobMeta_TMergedBlocks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TBlobMeta_TMergedBlocks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TBlobMeta_TMergedBlocks) ProtoMessage() {}

func (x *TBlobMeta_TMergedBlocks) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TBlobMeta_TMergedBlocks.ProtoReflect.Descriptor instead.
func (*TBlobMeta_TMergedBlocks) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_part_proto_rawDescGZIP(), []int{4, 1}
}

func (x *TBlobMeta_TMergedBlocks) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *TBlobMeta_TMergedBlocks) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *TBlobMeta_TMergedBlocks) GetSkipped() uint32 {
	if x != nil {
		return x.Skipped
	}
	return 0
}

var File_cloud_blockstore_libs_storage_protos_part_proto protoreflect.FileDescriptor

var file_cloud_blockstore_libs_storage_protos_part_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x19, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x49, 0x0a, 0x0f, 0x54, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x4b,
	0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x22,
	0x96, 0x06, 0x0a, 0x10, 0x54, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x4c, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x4b, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x10, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x12, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x12, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x14, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x17, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x17, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x61,
	0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x49, 0x6e, 0x42, 0x6c, 0x6f, 0x62, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x4d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x49, 0x6e,
	0x42, 0x6c, 0x6f, 0x62, 0x12, 0x26, 0x0a, 0x0e, 0x5a, 0x6f, 0x6e, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x5a, 0x6f,
	0x6e, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10,
	0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0xef, 0x0a, 0x0a, 0x0f, 0x54, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x10,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x49, 0x4f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x10,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x54, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x49, 0x4f, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x11, 0x55, 0x73, 0x65, 0x72, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x0f, 0x53, 0x79, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x49, 0x4f, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0f, 0x53, 0x79, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x10, 0x53, 0x79, 0x73, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x49, 0x4f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x10, 0x53, 0x79, 0x73, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x58, 0x0a, 0x13,
	0x53, 0x79, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x49, 0x4f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x13, 0x53, 0x79, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x62, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10,
	0x46, 0x72, 0x65, 0x73, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x46, 0x72, 0x65, 0x73, 0x68, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x69, 0x78, 0x65,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x55, 0x73, 0x65,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12,
	0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x16, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x13, 0x52, 0x65,
	0x61, 0x6c, 0x53, 0x79, 0x73, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x49, 0x4f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x13, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x79, 0x73, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x79, 0x73, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x49, 0x4f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x14, 0x52, 0x65, 0x61, 0x6c,
	0x53, 0x79, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x34, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x15, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x52, 0x65, 0x61,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x1d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x62, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x1c,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x62,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x1c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x42, 0x6c, 0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x44, 0x69, 0x73, 0x6b,
	0x12, 0x4c, 0x0a, 0x21, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x65, 0x72,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x21, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4a,
	0x0a, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x47, 0x61,
	0x72, 0x62, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x44, 0x69, 0x73, 0x6b, 0x22, 0xaf, 0x02, 0x0a, 0x0e, 0x54,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x40, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x13, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x6c,
	0x75, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x54, 0x72, 0x69, 0x6d, 0x46, 0x72, 0x65, 0x73,
	0x68, 0x4c, 0x6f, 0x67, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x54, 0x72, 0x69, 0x6d, 0x46, 0x72, 0x65, 0x73, 0x68, 0x4c,
	0x6f, 0x67, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x22, 0xdf, 0x02, 0x0a,
	0x09, 0x54, 0x42, 0x6c, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x0b, 0x4d, 0x69,
	0x78, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x42, 0x6c, 0x6f,
	0x62, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x12, 0x58, 0x0a, 0x0c, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x42, 0x6c, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x1a, 0x44, 0x0a, 0x0c, 0x54,
	0x4d, 0x69, 0x78, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64,
	0x73, 0x1a, 0x51, 0x0a, 0x0d, 0x54, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x6b,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x6b, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0xa4,
	0x01, 0x0a, 0x0a, 0x54, 0x42, 0x6c, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x32, 0x12, 0x22, 0x0a,
	0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x45, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6c, 0x0a, 0x0e, 0x54, 0x46, 0x72, 0x65, 0x73, 0x68, 0x42,
	0x6c, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x45,
	0x6e, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0a, 0x45, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x49,
	0x73, 0x5a, 0x65, 0x72, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x22, 0x77, 0x0a, 0x0f, 0x54, 0x46, 0x72, 0x65, 0x73, 0x68, 0x42, 0x6c, 0x6f,
	0x62, 0x4d, 0x65, 0x74, 0x61, 0x32, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6e,
	0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a,
	0x45, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0xfd, 0x01, 0x0a,
	0x0f, 0x54, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x49, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x49, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x44, 0x61, 0x74,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x44, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x37, 0x5a, 0x35,
	0x61, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x72, 0x75,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_blockstore_libs_storage_protos_part_proto_rawDescOnce sync.Once
	file_cloud_blockstore_libs_storage_protos_part_proto_rawDescData = file_cloud_blockstore_libs_storage_protos_part_proto_rawDesc
)

func file_cloud_blockstore_libs_storage_protos_part_proto_rawDescGZIP() []byte {
	file_cloud_blockstore_libs_storage_protos_part_proto_rawDescOnce.Do(func() {
		file_cloud_blockstore_libs_storage_protos_part_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_blockstore_libs_storage_protos_part_proto_rawDescData)
	})
	return file_cloud_blockstore_libs_storage_protos_part_proto_rawDescData
}

var file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_cloud_blockstore_libs_storage_protos_part_proto_goTypes = []interface{}{
	(*TChannelProfile)(nil),                   // 0: NCloud.NBlockStore.NProto.TChannelProfile
	(*TPartitionConfig)(nil),                  // 1: NCloud.NBlockStore.NProto.TPartitionConfig
	(*TPartitionStats)(nil),                   // 2: NCloud.NBlockStore.NProto.TPartitionStats
	(*TPartitionMeta)(nil),                    // 3: NCloud.NBlockStore.NProto.TPartitionMeta
	(*TBlobMeta)(nil),                         // 4: NCloud.NBlockStore.NProto.TBlobMeta
	(*TBlobMeta2)(nil),                        // 5: NCloud.NBlockStore.NProto.TBlobMeta2
	(*TFreshBlobMeta)(nil),                    // 6: NCloud.NBlockStore.NProto.TFreshBlobMeta
	(*TFreshBlobMeta2)(nil),                   // 7: NCloud.NBlockStore.NProto.TFreshBlobMeta2
	(*TCheckpointMeta)(nil),                   // 8: NCloud.NBlockStore.NProto.TCheckpointMeta
	(*TBlobMeta_TMixedBlocks)(nil),            // 9: NCloud.NBlockStore.NProto.TBlobMeta.TMixedBlocks
	(*TBlobMeta_TMergedBlocks)(nil),           // 10: NCloud.NBlockStore.NProto.TBlobMeta.TMergedBlocks
	(protos.EStorageMediaKind)(0),             // 11: NCloud.NProto.EStorageMediaKind
	(*protos1.TVolumePerformanceProfile)(nil), // 12: NCloud.NBlockStore.NProto.TVolumePerformanceProfile
	(*protos1.TIOCounters)(nil),               // 13: NCloud.NBlockStore.NProto.TIOCounters
}
var file_cloud_blockstore_libs_storage_protos_part_proto_depIdxs = []int32{
	11, // 0: NCloud.NBlockStore.NProto.TPartitionConfig.StorageMediaKind:type_name -> NCloud.NProto.EStorageMediaKind
	12, // 1: NCloud.NBlockStore.NProto.TPartitionConfig.PerformanceProfile:type_name -> NCloud.NBlockStore.NProto.TVolumePerformanceProfile
	0,  // 2: NCloud.NBlockStore.NProto.TPartitionConfig.ExplicitChannelProfiles:type_name -> NCloud.NBlockStore.NProto.TChannelProfile
	13, // 3: NCloud.NBlockStore.NProto.TPartitionStats.UserReadCounters:type_name -> NCloud.NBlockStore.NProto.TIOCounters
	13, // 4: NCloud.NBlockStore.NProto.TPartitionStats.UserWriteCounters:type_name -> NCloud.NBlockStore.NProto.TIOCounters
	13, // 5: NCloud.NBlockStore.NProto.TPartitionStats.SysReadCounters:type_name -> NCloud.NBlockStore.NProto.TIOCounters
	13, // 6: NCloud.NBlockStore.NProto.TPartitionStats.SysWriteCounters:type_name -> NCloud.NBlockStore.NProto.TIOCounters
	13, // 7: NCloud.NBlockStore.NProto.TPartitionStats.SysChecksumCounters:type_name -> NCloud.NBlockStore.NProto.TIOCounters
	13, // 8: NCloud.NBlockStore.NProto.TPartitionStats.RealSysReadCounters:type_name -> NCloud.NBlockStore.NProto.TIOCounters
	13, // 9: NCloud.NBlockStore.NProto.TPartitionStats.RealSysWriteCounters:type_name -> NCloud.NBlockStore.NProto.TIOCounters
	1,  // 10: NCloud.NBlockStore.NProto.TPartitionMeta.Config:type_name -> NCloud.NBlockStore.NProto.TPartitionConfig
	2,  // 11: NCloud.NBlockStore.NProto.TPartitionMeta.Stats:type_name -> NCloud.NBlockStore.NProto.TPartitionStats
	9,  // 12: NCloud.NBlockStore.NProto.TBlobMeta.MixedBlocks:type_name -> NCloud.NBlockStore.NProto.TBlobMeta.TMixedBlocks
	10, // 13: NCloud.NBlockStore.NProto.TBlobMeta.MergedBlocks:type_name -> NCloud.NBlockStore.NProto.TBlobMeta.TMergedBlocks
	2,  // 14: NCloud.NBlockStore.NProto.TCheckpointMeta.Stats:type_name -> NCloud.NBlockStore.NProto.TPartitionStats
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_cloud_blockstore_libs_storage_protos_part_proto_init() }
func file_cloud_blockstore_libs_storage_protos_part_proto_init() {
	if File_cloud_blockstore_libs_storage_protos_part_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TChannelProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPartitionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPartitionStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPartitionMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TBlobMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TBlobMeta2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFreshBlobMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFreshBlobMeta2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCheckpointMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TBlobMeta_TMixedBlocks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TBlobMeta_TMergedBlocks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*TBlobMeta_MixedBlocks)(nil),
		(*TBlobMeta_MergedBlocks)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_blockstore_libs_storage_protos_part_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_blockstore_libs_storage_protos_part_proto_goTypes,
		DependencyIndexes: file_cloud_blockstore_libs_storage_protos_part_proto_depIdxs,
		MessageInfos:      file_cloud_blockstore_libs_storage_protos_part_proto_msgTypes,
	}.Build()
	File_cloud_blockstore_libs_storage_protos_part_proto = out.File
	file_cloud_blockstore_libs_storage_protos_part_proto_rawDesc = nil
	file_cloud_blockstore_libs_storage_protos_part_proto_goTypes = nil
	file_cloud_blockstore_libs_storage_protos_part_proto_depIdxs = nil
}
