// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.0
// source: cloud/blockstore/libs/storage/protos/volume.proto

package protos

import (
	protos "github.com/ydb-platform/nbs/cloud/blockstore/public/api/protos"
	protos1 "github.com/ydb-platform/nbs/cloud/storage/core/protos"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EVolumeBinding int32

const (
	EVolumeBinding_BINDING_NOT_SET EVolumeBinding = 0
	EVolumeBinding_BINDING_LOCAL   EVolumeBinding = 1
	EVolumeBinding_BINDING_REMOTE  EVolumeBinding = 2
)

// Enum value maps for EVolumeBinding.
var (
	EVolumeBinding_name = map[int32]string{
		0: "BINDING_NOT_SET",
		1: "BINDING_LOCAL",
		2: "BINDING_REMOTE",
	}
	EVolumeBinding_value = map[string]int32{
		"BINDING_NOT_SET": 0,
		"BINDING_LOCAL":   1,
		"BINDING_REMOTE":  2,
	}
)

func (x EVolumeBinding) Enum() *EVolumeBinding {
	p := new(EVolumeBinding)
	*p = x
	return p
}

func (x EVolumeBinding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EVolumeBinding) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_enumTypes[0].Descriptor()
}

func (EVolumeBinding) Type() protoreflect.EnumType {
	return &file_cloud_blockstore_libs_storage_protos_volume_proto_enumTypes[0]
}

func (x EVolumeBinding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EVolumeBinding.Descriptor instead.
func (EVolumeBinding) EnumDescriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{0}
}

type EPreemptionSource int32

const (
	EPreemptionSource_SOURCE_BALANCER      EPreemptionSource = 0
	EPreemptionSource_SOURCE_INITIAL_MOUNT EPreemptionSource = 1
	EPreemptionSource_SOURCE_MANUAL        EPreemptionSource = 2
	EPreemptionSource_SOURCE_NONE          EPreemptionSource = 3
)

// Enum value maps for EPreemptionSource.
var (
	EPreemptionSource_name = map[int32]string{
		0: "SOURCE_BALANCER",
		1: "SOURCE_INITIAL_MOUNT",
		2: "SOURCE_MANUAL",
		3: "SOURCE_NONE",
	}
	EPreemptionSource_value = map[string]int32{
		"SOURCE_BALANCER":      0,
		"SOURCE_INITIAL_MOUNT": 1,
		"SOURCE_MANUAL":        2,
		"SOURCE_NONE":          3,
	}
)

func (x EPreemptionSource) Enum() *EPreemptionSource {
	p := new(EPreemptionSource)
	*p = x
	return p
}

func (x EPreemptionSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPreemptionSource) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_enumTypes[1].Descriptor()
}

func (EPreemptionSource) Type() protoreflect.EnumType {
	return &file_cloud_blockstore_libs_storage_protos_volume_proto_enumTypes[1]
}

func (x EPreemptionSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPreemptionSource.Descriptor instead.
func (EPreemptionSource) EnumDescriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{1}
}

type ERebuildMetadataType int32

const (
	ERebuildMetadataType_USED_BLOCKS ERebuildMetadataType = 0
	ERebuildMetadataType_BLOCK_COUNT ERebuildMetadataType = 1
)

// Enum value maps for ERebuildMetadataType.
var (
	ERebuildMetadataType_name = map[int32]string{
		0: "USED_BLOCKS",
		1: "BLOCK_COUNT",
	}
	ERebuildMetadataType_value = map[string]int32{
		"USED_BLOCKS": 0,
		"BLOCK_COUNT": 1,
	}
)

func (x ERebuildMetadataType) Enum() *ERebuildMetadataType {
	p := new(ERebuildMetadataType)
	*p = x
	return p
}

func (x ERebuildMetadataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERebuildMetadataType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_enumTypes[2].Descriptor()
}

func (ERebuildMetadataType) Type() protoreflect.EnumType {
	return &file_cloud_blockstore_libs_storage_protos_volume_proto_enumTypes[2]
}

func (x ERebuildMetadataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ERebuildMetadataType.Descriptor instead.
func (ERebuildMetadataType) EnumDescriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{2}
}

type TVolumeClientInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Client identifier.
	ClientId string `protobuf:"bytes,1,opt,name=ClientId,proto3" json:"ClientId,omitempty"`
	// Volume access mode.
	VolumeAccessMode protos.EVolumeAccessMode `protobuf:"varint,2,opt,name=VolumeAccessMode,proto3,enum=NCloud.NBlockStore.NProto.EVolumeAccessMode" json:"VolumeAccessMode,omitempty"`
	// Volume mount mode.
	VolumeMountMode protos.EVolumeMountMode `protobuf:"varint,3,opt,name=VolumeMountMode,proto3,enum=NCloud.NBlockStore.NProto.EVolumeMountMode" json:"VolumeMountMode,omitempty"`
	// Obsolete, use MountFlags.
	ThrottlingDisabled bool `protobuf:"varint,4,opt,name=ThrottlingDisabled,proto3" json:"ThrottlingDisabled,omitempty"`
	// Client disconnect timestamp (0 for active clients).
	DisconnectTimestamp uint64 `protobuf:"varint,5,opt,name=DisconnectTimestamp,proto3" json:"DisconnectTimestamp,omitempty"`
	// Mount seq number.
	MountSeqNumber uint64 `protobuf:"varint,6,opt,name=MountSeqNumber,proto3" json:"MountSeqNumber,omitempty"`
	// Host the client came from.
	Host string `protobuf:"bytes,7,opt,name=Host,proto3" json:"Host,omitempty"`
	// Mount flags.
	MountFlags uint32 `protobuf:"varint,8,opt,name=MountFlags,proto3" json:"MountFlags,omitempty"`
	// Last activity timestamp. Valid only for resyncable volumes.
	LastActivityTimestamp uint64 `protobuf:"varint,9,opt,name=LastActivityTimestamp,proto3" json:"LastActivityTimestamp,omitempty"`
	// Instance id (if this client is a VM).
	InstanceId string `protobuf:"bytes,10,opt,name=InstanceId,proto3" json:"InstanceId,omitempty"`
	// Mount sequential number for disk filling.
	// We don't allow clients with old sequential number to mount disk for read/write
	// in order to prevent data corruption during disk filling.
	FillSeqNumber uint64 `protobuf:"varint,11,opt,name=FillSeqNumber,proto3" json:"FillSeqNumber,omitempty"`
	// We don't allow clients with wrong fill generation to mount disk for read/write
	// in order to prevent data corruption during disk filling.
	FillGeneration uint64 `protobuf:"varint,12,opt,name=FillGeneration,proto3" json:"FillGeneration,omitempty"`
}

func (x *TVolumeClientInfo) Reset() {
	*x = TVolumeClientInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TVolumeClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TVolumeClientInfo) ProtoMessage() {}

func (x *TVolumeClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TVolumeClientInfo.ProtoReflect.Descriptor instead.
func (*TVolumeClientInfo) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{0}
}

func (x *TVolumeClientInfo) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *TVolumeClientInfo) GetVolumeAccessMode() protos.EVolumeAccessMode {
	if x != nil {
		return x.VolumeAccessMode
	}
	return protos.EVolumeAccessMode_VOLUME_ACCESS_READ_WRITE
}

func (x *TVolumeClientInfo) GetVolumeMountMode() protos.EVolumeMountMode {
	if x != nil {
		return x.VolumeMountMode
	}
	return protos.EVolumeMountMode_VOLUME_MOUNT_LOCAL
}

func (x *TVolumeClientInfo) GetThrottlingDisabled() bool {
	if x != nil {
		return x.ThrottlingDisabled
	}
	return false
}

func (x *TVolumeClientInfo) GetDisconnectTimestamp() uint64 {
	if x != nil {
		return x.DisconnectTimestamp
	}
	return 0
}

func (x *TVolumeClientInfo) GetMountSeqNumber() uint64 {
	if x != nil {
		return x.MountSeqNumber
	}
	return 0
}

func (x *TVolumeClientInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *TVolumeClientInfo) GetMountFlags() uint32 {
	if x != nil {
		return x.MountFlags
	}
	return 0
}

func (x *TVolumeClientInfo) GetLastActivityTimestamp() uint64 {
	if x != nil {
		return x.LastActivityTimestamp
	}
	return 0
}

func (x *TVolumeClientInfo) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *TVolumeClientInfo) GetFillSeqNumber() uint64 {
	if x != nil {
		return x.FillSeqNumber
	}
	return 0
}

func (x *TVolumeClientInfo) GetFillGeneration() uint64 {
	if x != nil {
		return x.FillGeneration
	}
	return 0
}

type TAddClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume to connect to.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Volume access mode.
	VolumeAccessMode protos.EVolumeAccessMode `protobuf:"varint,3,opt,name=VolumeAccessMode,proto3,enum=NCloud.NBlockStore.NProto.EVolumeAccessMode" json:"VolumeAccessMode,omitempty"`
	// Volume mount mode.
	VolumeMountMode protos.EVolumeMountMode `protobuf:"varint,4,opt,name=VolumeMountMode,proto3,enum=NCloud.NBlockStore.NProto.EVolumeMountMode" json:"VolumeMountMode,omitempty"`
	// Obsolete, use MountFlags.
	ThrottlingDisabled bool `protobuf:"varint,5,opt,name=ThrottlingDisabled,proto3" json:"ThrottlingDisabled,omitempty"`
	// Expected mount seq number.
	MountSeqNumber uint64 `protobuf:"varint,6,opt,name=MountSeqNumber,proto3" json:"MountSeqNumber,omitempty"`
	// Host the client came from.
	Host string `protobuf:"bytes,7,opt,name=Host,proto3" json:"Host,omitempty"`
	// Mount flags.
	MountFlags uint32 `protobuf:"varint,8,opt,name=MountFlags,proto3" json:"MountFlags,omitempty"`
	// Instance id (if this client is a VM).
	InstanceId string `protobuf:"bytes,9,opt,name=InstanceId,proto3" json:"InstanceId,omitempty"`
	// Expected mount seq number for disk filling.
	FillSeqNumber uint64 `protobuf:"varint,10,opt,name=FillSeqNumber,proto3" json:"FillSeqNumber,omitempty"`
	// Expected fill generation.
	FillGeneration uint64 `protobuf:"varint,11,opt,name=FillGeneration,proto3" json:"FillGeneration,omitempty"`
}

func (x *TAddClientRequest) Reset() {
	*x = TAddClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAddClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAddClientRequest) ProtoMessage() {}

func (x *TAddClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAddClientRequest.ProtoReflect.Descriptor instead.
func (*TAddClientRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{1}
}

func (x *TAddClientRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TAddClientRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TAddClientRequest) GetVolumeAccessMode() protos.EVolumeAccessMode {
	if x != nil {
		return x.VolumeAccessMode
	}
	return protos.EVolumeAccessMode_VOLUME_ACCESS_READ_WRITE
}

func (x *TAddClientRequest) GetVolumeMountMode() protos.EVolumeMountMode {
	if x != nil {
		return x.VolumeMountMode
	}
	return protos.EVolumeMountMode_VOLUME_MOUNT_LOCAL
}

func (x *TAddClientRequest) GetThrottlingDisabled() bool {
	if x != nil {
		return x.ThrottlingDisabled
	}
	return false
}

func (x *TAddClientRequest) GetMountSeqNumber() uint64 {
	if x != nil {
		return x.MountSeqNumber
	}
	return 0
}

func (x *TAddClientRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *TAddClientRequest) GetMountFlags() uint32 {
	if x != nil {
		return x.MountFlags
	}
	return 0
}

func (x *TAddClientRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *TAddClientRequest) GetFillSeqNumber() uint64 {
	if x != nil {
		return x.FillSeqNumber
	}
	return 0
}

func (x *TAddClientRequest) GetFillGeneration() uint64 {
	if x != nil {
		return x.FillGeneration
	}
	return 0
}

type TAddClientResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Volume tablet identifier.
	TabletId uint64 `protobuf:"varint,2,opt,name=TabletId,proto3" json:"TabletId,omitempty"`
	// Client identifier.
	ClientId string `protobuf:"bytes,3,opt,name=ClientId,proto3" json:"ClientId,omitempty"`
	// Volume information.
	Volume *protos.TVolume `protobuf:"bytes,4,opt,name=Volume,proto3" json:"Volume,omitempty"`
	// Request traces.
	Trace *protos1.TTraceInfo `protobuf:"bytes,5,opt,name=Trace,proto3" json:"Trace,omitempty"`
	// Expected pipe generation. Deprecated.
	ExpectedPipeGeneration uint32 `protobuf:"varint,6,opt,name=ExpectedPipeGeneration,proto3" json:"ExpectedPipeGeneration,omitempty"`
}

func (x *TAddClientResponse) Reset() {
	*x = TAddClientResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAddClientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAddClientResponse) ProtoMessage() {}

func (x *TAddClientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAddClientResponse.ProtoReflect.Descriptor instead.
func (*TAddClientResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{2}
}

func (x *TAddClientResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TAddClientResponse) GetTabletId() uint64 {
	if x != nil {
		return x.TabletId
	}
	return 0
}

func (x *TAddClientResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *TAddClientResponse) GetVolume() *protos.TVolume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *TAddClientResponse) GetTrace() *protos1.TTraceInfo {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *TAddClientResponse) GetExpectedPipeGeneration() uint32 {
	if x != nil {
		return x.ExpectedPipeGeneration
	}
	return 0
}

type TRemoveClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume to disconnect from.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Is request coming from monitoring
	IsMonRequest bool `protobuf:"varint,3,opt,name=IsMonRequest,proto3" json:"IsMonRequest,omitempty"`
}

func (x *TRemoveClientRequest) Reset() {
	*x = TRemoveClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TRemoveClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TRemoveClientRequest) ProtoMessage() {}

func (x *TRemoveClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TRemoveClientRequest.ProtoReflect.Descriptor instead.
func (*TRemoveClientRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{3}
}

func (x *TRemoveClientRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TRemoveClientRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TRemoveClientRequest) GetIsMonRequest() bool {
	if x != nil {
		return x.IsMonRequest
	}
	return false
}

type TRemoveClientResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Volume tablet identifier.
	TabletId uint64 `protobuf:"varint,2,opt,name=TabletId,proto3" json:"TabletId,omitempty"`
	// Label of volume attempted to be connected to.
	DiskId string `protobuf:"bytes,3,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Client identifier.
	ClientId string `protobuf:"bytes,4,opt,name=ClientId,proto3" json:"ClientId,omitempty"`
	// Request traces.
	Trace *protos1.TTraceInfo `protobuf:"bytes,5,opt,name=Trace,proto3" json:"Trace,omitempty"`
}

func (x *TRemoveClientResponse) Reset() {
	*x = TRemoveClientResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TRemoveClientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TRemoveClientResponse) ProtoMessage() {}

func (x *TRemoveClientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TRemoveClientResponse.ProtoReflect.Descriptor instead.
func (*TRemoveClientResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{4}
}

func (x *TRemoveClientResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TRemoveClientResponse) GetTabletId() uint64 {
	if x != nil {
		return x.TabletId
	}
	return 0
}

func (x *TRemoveClientResponse) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TRemoveClientResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *TRemoveClientResponse) GetTrace() *protos1.TTraceInfo {
	if x != nil {
		return x.Trace
	}
	return nil
}

type TWaitReadyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume to wait readiness of.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
}

func (x *TWaitReadyRequest) Reset() {
	*x = TWaitReadyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TWaitReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TWaitReadyRequest) ProtoMessage() {}

func (x *TWaitReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TWaitReadyRequest.ProtoReflect.Descriptor instead.
func (*TWaitReadyRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{5}
}

func (x *TWaitReadyRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TWaitReadyRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

type TWaitReadyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Volume information.
	Volume *protos.TVolume `protobuf:"bytes,2,opt,name=Volume,proto3" json:"Volume,omitempty"`
	// Request traces.
	Trace *protos1.TTraceInfo `protobuf:"bytes,3,opt,name=Trace,proto3" json:"Trace,omitempty"`
}

func (x *TWaitReadyResponse) Reset() {
	*x = TWaitReadyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TWaitReadyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TWaitReadyResponse) ProtoMessage() {}

func (x *TWaitReadyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TWaitReadyResponse.ProtoReflect.Descriptor instead.
func (*TWaitReadyResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{6}
}

func (x *TWaitReadyResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TWaitReadyResponse) GetVolume() *protos.TVolume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *TWaitReadyResponse) GetTrace() *protos1.TTraceInfo {
	if x != nil {
		return x.Trace
	}
	return nil
}

type TGetUsedBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume to get partition info from.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
}

func (x *TGetUsedBlocksRequest) Reset() {
	*x = TGetUsedBlocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TGetUsedBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TGetUsedBlocksRequest) ProtoMessage() {}

func (x *TGetUsedBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TGetUsedBlocksRequest.ProtoReflect.Descriptor instead.
func (*TGetUsedBlocksRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{7}
}

func (x *TGetUsedBlocksRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TGetUsedBlocksRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

// Serialized bitmap for this chunk.
type TUsedBlockData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkIdx uint32 `protobuf:"varint,1,opt,name=ChunkIdx,proto3" json:"ChunkIdx,omitempty"`
	Data     []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *TUsedBlockData) Reset() {
	*x = TUsedBlockData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TUsedBlockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TUsedBlockData) ProtoMessage() {}

func (x *TUsedBlockData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TUsedBlockData.ProtoReflect.Descriptor instead.
func (*TUsedBlockData) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{8}
}

func (x *TUsedBlockData) GetChunkIdx() uint32 {
	if x != nil {
		return x.ChunkIdx
	}
	return 0
}

func (x *TUsedBlockData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type TGetUsedBlocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Request traces.
	Trace      *protos1.TTraceInfo `protobuf:"bytes,2,opt,name=Trace,proto3" json:"Trace,omitempty"`
	UsedBlocks []*TUsedBlockData   `protobuf:"bytes,3,rep,name=UsedBlocks,proto3" json:"UsedBlocks,omitempty"`
}

func (x *TGetUsedBlocksResponse) Reset() {
	*x = TGetUsedBlocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TGetUsedBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TGetUsedBlocksResponse) ProtoMessage() {}

func (x *TGetUsedBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TGetUsedBlocksResponse.ProtoReflect.Descriptor instead.
func (*TGetUsedBlocksResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{9}
}

func (x *TGetUsedBlocksResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TGetUsedBlocksResponse) GetTrace() *protos1.TTraceInfo {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *TGetUsedBlocksResponse) GetUsedBlocks() []*TUsedBlockData {
	if x != nil {
		return x.UsedBlocks
	}
	return nil
}

type TGetPartitionInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume to get partition info from.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Partition id.
	PartitionId uint32 `protobuf:"varint,3,opt,name=PartitionId,proto3" json:"PartitionId,omitempty"`
}

func (x *TGetPartitionInfoRequest) Reset() {
	*x = TGetPartitionInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TGetPartitionInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TGetPartitionInfoRequest) ProtoMessage() {}

func (x *TGetPartitionInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TGetPartitionInfoRequest.ProtoReflect.Descriptor instead.
func (*TGetPartitionInfoRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{10}
}

func (x *TGetPartitionInfoRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TGetPartitionInfoRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TGetPartitionInfoRequest) GetPartitionId() uint32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

type TGetPartitionInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Partition info data in JSON format.
	Payload string `protobuf:"bytes,2,opt,name=Payload,proto3" json:"Payload,omitempty"`
	// Request traces.
	Trace *protos1.TTraceInfo `protobuf:"bytes,3,opt,name=Trace,proto3" json:"Trace,omitempty"`
}

func (x *TGetPartitionInfoResponse) Reset() {
	*x = TGetPartitionInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TGetPartitionInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TGetPartitionInfoResponse) ProtoMessage() {}

func (x *TGetPartitionInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TGetPartitionInfoResponse.ProtoReflect.Descriptor instead.
func (*TGetPartitionInfoResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{11}
}

func (x *TGetPartitionInfoResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TGetPartitionInfoResponse) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *TGetPartitionInfoResponse) GetTrace() *protos1.TTraceInfo {
	if x != nil {
		return x.Trace
	}
	return nil
}

type TCompactRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume to compact.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Start block range index.
	StartIndex uint64 `protobuf:"varint,3,opt,name=StartIndex,proto3" json:"StartIndex,omitempty"`
	// Number of blocks in compaction range.
	BlocksCount uint32 `protobuf:"varint,4,opt,name=BlocksCount,proto3" json:"BlocksCount,omitempty"`
	// Additional flags. Do we need it?
	Flags uint32 `protobuf:"varint,5,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Explicitly assigned id by volume in case of multiple partitions.
	OperationId string `protobuf:"bytes,6,opt,name=OperationId,proto3" json:"OperationId,omitempty"`
}

func (x *TCompactRangeRequest) Reset() {
	*x = TCompactRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCompactRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCompactRangeRequest) ProtoMessage() {}

func (x *TCompactRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCompactRangeRequest.ProtoReflect.Descriptor instead.
func (*TCompactRangeRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{12}
}

func (x *TCompactRangeRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TCompactRangeRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TCompactRangeRequest) GetStartIndex() uint64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *TCompactRangeRequest) GetBlocksCount() uint32 {
	if x != nil {
		return x.BlocksCount
	}
	return 0
}

func (x *TCompactRangeRequest) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *TCompactRangeRequest) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

type TCompactRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Compact operation reference
	OperationId string `protobuf:"bytes,2,opt,name=OperationId,proto3" json:"OperationId,omitempty"`
	// Request traces.
	Trace *protos1.TTraceInfo `protobuf:"bytes,3,opt,name=Trace,proto3" json:"Trace,omitempty"`
}

func (x *TCompactRangeResponse) Reset() {
	*x = TCompactRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCompactRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCompactRangeResponse) ProtoMessage() {}

func (x *TCompactRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCompactRangeResponse.ProtoReflect.Descriptor instead.
func (*TCompactRangeResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{13}
}

func (x *TCompactRangeResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TCompactRangeResponse) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *TCompactRangeResponse) GetTrace() *protos1.TTraceInfo {
	if x != nil {
		return x.Trace
	}
	return nil
}

type TGetCompactionStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume to compact.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Compact operation reference.
	OperationId string `protobuf:"bytes,3,opt,name=OperationId,proto3" json:"OperationId,omitempty"`
	// Additional flags. Do we need it?
	Flags uint32 `protobuf:"varint,4,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (x *TGetCompactionStatusRequest) Reset() {
	*x = TGetCompactionStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TGetCompactionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TGetCompactionStatusRequest) ProtoMessage() {}

func (x *TGetCompactionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TGetCompactionStatusRequest.ProtoReflect.Descriptor instead.
func (*TGetCompactionStatusRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{14}
}

func (x *TGetCompactionStatusRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TGetCompactionStatusRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TGetCompactionStatusRequest) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *TGetCompactionStatusRequest) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type TGetCompactionStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Number of processed ranges.
	Progress uint32 `protobuf:"varint,2,opt,name=Progress,proto3" json:"Progress,omitempty"`
	// Total number of ranges.
	Total uint32 `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	// Flag if operation completed.
	IsCompleted bool `protobuf:"varint,4,opt,name=IsCompleted,proto3" json:"IsCompleted,omitempty"`
	// Request traces.
	Trace *protos1.TTraceInfo `protobuf:"bytes,5,opt,name=Trace,proto3" json:"Trace,omitempty"`
}

func (x *TGetCompactionStatusResponse) Reset() {
	*x = TGetCompactionStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TGetCompactionStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TGetCompactionStatusResponse) ProtoMessage() {}

func (x *TGetCompactionStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TGetCompactionStatusResponse.ProtoReflect.Descriptor instead.
func (*TGetCompactionStatusResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{15}
}

func (x *TGetCompactionStatusResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TGetCompactionStatusResponse) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *TGetCompactionStatusResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TGetCompactionStatusResponse) GetIsCompleted() bool {
	if x != nil {
		return x.IsCompleted
	}
	return false
}

func (x *TGetCompactionStatusResponse) GetTrace() *protos1.TTraceInfo {
	if x != nil {
		return x.Trace
	}
	return nil
}

type TReallocateDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
}

func (x *TReallocateDiskRequest) Reset() {
	*x = TReallocateDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TReallocateDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TReallocateDiskRequest) ProtoMessage() {}

func (x *TReallocateDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TReallocateDiskRequest.ProtoReflect.Descriptor instead.
func (*TReallocateDiskRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{16}
}

func (x *TReallocateDiskRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TReallocateDiskRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

type TReallocateDiskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Request traces.
	Trace *protos1.TTraceInfo `protobuf:"bytes,2,opt,name=Trace,proto3" json:"Trace,omitempty"`
}

func (x *TReallocateDiskResponse) Reset() {
	*x = TReallocateDiskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TReallocateDiskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TReallocateDiskResponse) ProtoMessage() {}

func (x *TReallocateDiskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TReallocateDiskResponse.ProtoReflect.Descriptor instead.
func (*TReallocateDiskResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{17}
}

func (x *TReallocateDiskResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TReallocateDiskResponse) GetTrace() *protos1.TTraceInfo {
	if x != nil {
		return x.Trace
	}
	return nil
}

type TUpdateUsedBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Blocks.
	StartIndices []uint64 `protobuf:"varint,3,rep,packed,name=StartIndices,proto3" json:"StartIndices,omitempty"`
	BlockCounts  []uint32 `protobuf:"varint,4,rep,packed,name=BlockCounts,proto3" json:"BlockCounts,omitempty"`
	// Set or unset.
	Used bool `protobuf:"varint,5,opt,name=Used,proto3" json:"Used,omitempty"`
}

func (x *TUpdateUsedBlocksRequest) Reset() {
	*x = TUpdateUsedBlocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TUpdateUsedBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TUpdateUsedBlocksRequest) ProtoMessage() {}

func (x *TUpdateUsedBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TUpdateUsedBlocksRequest.ProtoReflect.Descriptor instead.
func (*TUpdateUsedBlocksRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{18}
}

func (x *TUpdateUsedBlocksRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TUpdateUsedBlocksRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TUpdateUsedBlocksRequest) GetStartIndices() []uint64 {
	if x != nil {
		return x.StartIndices
	}
	return nil
}

func (x *TUpdateUsedBlocksRequest) GetBlockCounts() []uint32 {
	if x != nil {
		return x.BlockCounts
	}
	return nil
}

func (x *TUpdateUsedBlocksRequest) GetUsed() bool {
	if x != nil {
		return x.Used
	}
	return false
}

type TUpdateUsedBlocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Request traces.
	Trace *protos1.TTraceInfo `protobuf:"bytes,2,opt,name=Trace,proto3" json:"Trace,omitempty"`
}

func (x *TUpdateUsedBlocksResponse) Reset() {
	*x = TUpdateUsedBlocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TUpdateUsedBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TUpdateUsedBlocksResponse) ProtoMessage() {}

func (x *TUpdateUsedBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TUpdateUsedBlocksResponse.ProtoReflect.Descriptor instead.
func (*TUpdateUsedBlocksResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{19}
}

func (x *TUpdateUsedBlocksResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TUpdateUsedBlocksResponse) GetTrace() *protos1.TTraceInfo {
	if x != nil {
		return x.Trace
	}
	return nil
}

type TCachedPartStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MixedBytesCount        uint64 `protobuf:"varint,1,opt,name=MixedBytesCount,proto3" json:"MixedBytesCount,omitempty"`
	MergedBytesCount       uint64 `protobuf:"varint,2,opt,name=MergedBytesCount,proto3" json:"MergedBytesCount,omitempty"`
	FreshBytesCount        uint64 `protobuf:"varint,3,opt,name=FreshBytesCount,proto3" json:"FreshBytesCount,omitempty"`
	UsedBytesCount         uint64 `protobuf:"varint,4,opt,name=UsedBytesCount,proto3" json:"UsedBytesCount,omitempty"`
	BytesCount             uint64 `protobuf:"varint,5,opt,name=BytesCount,proto3" json:"BytesCount,omitempty"`
	CheckpointBytes        uint64 `protobuf:"varint,6,opt,name=CheckpointBytes,proto3" json:"CheckpointBytes,omitempty"`
	CompactionScore        uint32 `protobuf:"varint,7,opt,name=CompactionScore,proto3" json:"CompactionScore,omitempty"`
	CompactionGarbageScore uint32 `protobuf:"varint,8,opt,name=CompactionGarbageScore,proto3" json:"CompactionGarbageScore,omitempty"`
	CleanupQueueBytes      uint64 `protobuf:"varint,9,opt,name=CleanupQueueBytes,proto3" json:"CleanupQueueBytes,omitempty"`
	GarbageQueueBytes      uint64 `protobuf:"varint,10,opt,name=GarbageQueueBytes,proto3" json:"GarbageQueueBytes,omitempty"`
	ChannelHistorySize     uint64 `protobuf:"varint,11,opt,name=ChannelHistorySize,proto3" json:"ChannelHistorySize,omitempty"`
	LogicalUsedBytesCount  uint64 `protobuf:"varint,12,opt,name=LogicalUsedBytesCount,proto3" json:"LogicalUsedBytesCount,omitempty"`
}

func (x *TCachedPartStats) Reset() {
	*x = TCachedPartStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCachedPartStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCachedPartStats) ProtoMessage() {}

func (x *TCachedPartStats) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCachedPartStats.ProtoReflect.Descriptor instead.
func (*TCachedPartStats) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{20}
}

func (x *TCachedPartStats) GetMixedBytesCount() uint64 {
	if x != nil {
		return x.MixedBytesCount
	}
	return 0
}

func (x *TCachedPartStats) GetMergedBytesCount() uint64 {
	if x != nil {
		return x.MergedBytesCount
	}
	return 0
}

func (x *TCachedPartStats) GetFreshBytesCount() uint64 {
	if x != nil {
		return x.FreshBytesCount
	}
	return 0
}

func (x *TCachedPartStats) GetUsedBytesCount() uint64 {
	if x != nil {
		return x.UsedBytesCount
	}
	return 0
}

func (x *TCachedPartStats) GetBytesCount() uint64 {
	if x != nil {
		return x.BytesCount
	}
	return 0
}

func (x *TCachedPartStats) GetCheckpointBytes() uint64 {
	if x != nil {
		return x.CheckpointBytes
	}
	return 0
}

func (x *TCachedPartStats) GetCompactionScore() uint32 {
	if x != nil {
		return x.CompactionScore
	}
	return 0
}

func (x *TCachedPartStats) GetCompactionGarbageScore() uint32 {
	if x != nil {
		return x.CompactionGarbageScore
	}
	return 0
}

func (x *TCachedPartStats) GetCleanupQueueBytes() uint64 {
	if x != nil {
		return x.CleanupQueueBytes
	}
	return 0
}

func (x *TCachedPartStats) GetGarbageQueueBytes() uint64 {
	if x != nil {
		return x.GarbageQueueBytes
	}
	return 0
}

func (x *TCachedPartStats) GetChannelHistorySize() uint64 {
	if x != nil {
		return x.ChannelHistorySize
	}
	return 0
}

func (x *TCachedPartStats) GetLogicalUsedBytesCount() uint64 {
	if x != nil {
		return x.LogicalUsedBytesCount
	}
	return 0
}

type TVolumeBalancerDiskStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskId              string                    `protobuf:"bytes,1,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	CloudId             string                    `protobuf:"bytes,2,opt,name=CloudId,proto3" json:"CloudId,omitempty"`
	SystemCpu           uint64                    `protobuf:"varint,3,opt,name=SystemCpu,proto3" json:"SystemCpu,omitempty"`
	UserCpu             uint64                    `protobuf:"varint,4,opt,name=UserCpu,proto3" json:"UserCpu,omitempty"`
	Host                string                    `protobuf:"bytes,5,opt,name=Host,proto3" json:"Host,omitempty"`
	IsManuallyPreempted bool                      `protobuf:"varint,6,opt,name=IsManuallyPreempted,proto3" json:"IsManuallyPreempted,omitempty"`
	IsLocal             bool                      `protobuf:"varint,7,opt,name=IsLocal,proto3" json:"IsLocal,omitempty"`
	PreemptionSource    EPreemptionSource         `protobuf:"varint,8,opt,name=PreemptionSource,proto3,enum=NCloud.NBlockStore.NProto.EPreemptionSource" json:"PreemptionSource,omitempty"`
	NumSystemThreads    uint32                    `protobuf:"varint,9,opt,name=NumSystemThreads,proto3" json:"NumSystemThreads,omitempty"`
	NumUserThreads      uint32                    `protobuf:"varint,10,opt,name=NumUserThreads,proto3" json:"NumUserThreads,omitempty"`
	FolderId            string                    `protobuf:"bytes,11,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	StorageMediaKind    protos1.EStorageMediaKind `protobuf:"varint,12,opt,name=StorageMediaKind,proto3,enum=NCloud.NProto.EStorageMediaKind" json:"StorageMediaKind,omitempty"`
}

func (x *TVolumeBalancerDiskStats) Reset() {
	*x = TVolumeBalancerDiskStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TVolumeBalancerDiskStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TVolumeBalancerDiskStats) ProtoMessage() {}

func (x *TVolumeBalancerDiskStats) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TVolumeBalancerDiskStats.ProtoReflect.Descriptor instead.
func (*TVolumeBalancerDiskStats) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{21}
}

func (x *TVolumeBalancerDiskStats) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TVolumeBalancerDiskStats) GetCloudId() string {
	if x != nil {
		return x.CloudId
	}
	return ""
}

func (x *TVolumeBalancerDiskStats) GetSystemCpu() uint64 {
	if x != nil {
		return x.SystemCpu
	}
	return 0
}

func (x *TVolumeBalancerDiskStats) GetUserCpu() uint64 {
	if x != nil {
		return x.UserCpu
	}
	return 0
}

func (x *TVolumeBalancerDiskStats) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *TVolumeBalancerDiskStats) GetIsManuallyPreempted() bool {
	if x != nil {
		return x.IsManuallyPreempted
	}
	return false
}

func (x *TVolumeBalancerDiskStats) GetIsLocal() bool {
	if x != nil {
		return x.IsLocal
	}
	return false
}

func (x *TVolumeBalancerDiskStats) GetPreemptionSource() EPreemptionSource {
	if x != nil {
		return x.PreemptionSource
	}
	return EPreemptionSource_SOURCE_BALANCER
}

func (x *TVolumeBalancerDiskStats) GetNumSystemThreads() uint32 {
	if x != nil {
		return x.NumSystemThreads
	}
	return 0
}

func (x *TVolumeBalancerDiskStats) GetNumUserThreads() uint32 {
	if x != nil {
		return x.NumUserThreads
	}
	return 0
}

func (x *TVolumeBalancerDiskStats) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *TVolumeBalancerDiskStats) GetStorageMediaKind() protos1.EStorageMediaKind {
	if x != nil {
		return x.StorageMediaKind
	}
	return protos1.EStorageMediaKind_STORAGE_MEDIA_DEFAULT
}

type TGetVolumeLoadInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
}

func (x *TGetVolumeLoadInfoRequest) Reset() {
	*x = TGetVolumeLoadInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TGetVolumeLoadInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TGetVolumeLoadInfoRequest) ProtoMessage() {}

func (x *TGetVolumeLoadInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TGetVolumeLoadInfoRequest.ProtoReflect.Descriptor instead.
func (*TGetVolumeLoadInfoRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{22}
}

func (x *TGetVolumeLoadInfoRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TGetVolumeLoadInfoRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

type TGetVolumeLoadInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError           `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	Stats *TVolumeBalancerDiskStats `protobuf:"bytes,2,opt,name=Stats,proto3" json:"Stats,omitempty"`
	// Request traces.
	Trace *protos1.TTraceInfo `protobuf:"bytes,3,opt,name=Trace,proto3" json:"Trace,omitempty"`
}

func (x *TGetVolumeLoadInfoResponse) Reset() {
	*x = TGetVolumeLoadInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TGetVolumeLoadInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TGetVolumeLoadInfoResponse) ProtoMessage() {}

func (x *TGetVolumeLoadInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TGetVolumeLoadInfoResponse.ProtoReflect.Descriptor instead.
func (*TGetVolumeLoadInfoResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{23}
}

func (x *TGetVolumeLoadInfoResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TGetVolumeLoadInfoResponse) GetStats() *TVolumeBalancerDiskStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *TGetVolumeLoadInfoResponse) GetTrace() *protos1.TTraceInfo {
	if x != nil {
		return x.Trace
	}
	return nil
}

type TDeleteCheckpointDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of the volume to delete checkpoint data from.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Checkpoint identifier.
	CheckpointId string `protobuf:"bytes,3,opt,name=CheckpointId,proto3" json:"CheckpointId,omitempty"`
}

func (x *TDeleteCheckpointDataRequest) Reset() {
	*x = TDeleteCheckpointDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDeleteCheckpointDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDeleteCheckpointDataRequest) ProtoMessage() {}

func (x *TDeleteCheckpointDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDeleteCheckpointDataRequest.ProtoReflect.Descriptor instead.
func (*TDeleteCheckpointDataRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{24}
}

func (x *TDeleteCheckpointDataRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TDeleteCheckpointDataRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TDeleteCheckpointDataRequest) GetCheckpointId() string {
	if x != nil {
		return x.CheckpointId
	}
	return ""
}

type TDeleteCheckpointDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Request traces.
	Trace *protos1.TTraceInfo `protobuf:"bytes,2,opt,name=Trace,proto3" json:"Trace,omitempty"`
}

func (x *TDeleteCheckpointDataResponse) Reset() {
	*x = TDeleteCheckpointDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDeleteCheckpointDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDeleteCheckpointDataResponse) ProtoMessage() {}

func (x *TDeleteCheckpointDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDeleteCheckpointDataResponse.ProtoReflect.Descriptor instead.
func (*TDeleteCheckpointDataResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{25}
}

func (x *TDeleteCheckpointDataResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TDeleteCheckpointDataResponse) GetTrace() *protos1.TTraceInfo {
	if x != nil {
		return x.Trace
	}
	return nil
}

type TRebuildMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers      *protos.THeaders     `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	DiskId       string               `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	MetadataType ERebuildMetadataType `protobuf:"varint,3,opt,name=MetadataType,proto3,enum=NCloud.NBlockStore.NProto.ERebuildMetadataType" json:"MetadataType,omitempty"`
	BatchSize    uint32               `protobuf:"varint,4,opt,name=BatchSize,proto3" json:"BatchSize,omitempty"`
}

func (x *TRebuildMetadataRequest) Reset() {
	*x = TRebuildMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TRebuildMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TRebuildMetadataRequest) ProtoMessage() {}

func (x *TRebuildMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TRebuildMetadataRequest.ProtoReflect.Descriptor instead.
func (*TRebuildMetadataRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{26}
}

func (x *TRebuildMetadataRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TRebuildMetadataRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TRebuildMetadataRequest) GetMetadataType() ERebuildMetadataType {
	if x != nil {
		return x.MetadataType
	}
	return ERebuildMetadataType_USED_BLOCKS
}

func (x *TRebuildMetadataRequest) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

type TRebuildMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Request traces.
	Trace *protos1.TTraceInfo `protobuf:"bytes,2,opt,name=Trace,proto3" json:"Trace,omitempty"`
}

func (x *TRebuildMetadataResponse) Reset() {
	*x = TRebuildMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TRebuildMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TRebuildMetadataResponse) ProtoMessage() {}

func (x *TRebuildMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TRebuildMetadataResponse.ProtoReflect.Descriptor instead.
func (*TRebuildMetadataResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{27}
}

func (x *TRebuildMetadataResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TRebuildMetadataResponse) GetTrace() *protos1.TTraceInfo {
	if x != nil {
		return x.Trace
	}
	return nil
}

type TMetadataRebuildProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of units processed so far.
	Processed uint64 `protobuf:"varint,1,opt,name=Processed,proto3" json:"Processed,omitempty"`
	// Total number of units to process.
	Total uint64 `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	// Is operation completed.
	IsCompleted bool `protobuf:"varint,3,opt,name=IsCompleted,proto3" json:"IsCompleted,omitempty"`
}

func (x *TMetadataRebuildProgress) Reset() {
	*x = TMetadataRebuildProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TMetadataRebuildProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TMetadataRebuildProgress) ProtoMessage() {}

func (x *TMetadataRebuildProgress) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TMetadataRebuildProgress.ProtoReflect.Descriptor instead.
func (*TMetadataRebuildProgress) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{28}
}

func (x *TMetadataRebuildProgress) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *TMetadataRebuildProgress) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TMetadataRebuildProgress) GetIsCompleted() bool {
	if x != nil {
		return x.IsCompleted
	}
	return false
}

type TGetRebuildMetadataStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	DiskId  string           `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
}

func (x *TGetRebuildMetadataStatusRequest) Reset() {
	*x = TGetRebuildMetadataStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TGetRebuildMetadataStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TGetRebuildMetadataStatusRequest) ProtoMessage() {}

func (x *TGetRebuildMetadataStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TGetRebuildMetadataStatusRequest.ProtoReflect.Descriptor instead.
func (*TGetRebuildMetadataStatusRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{29}
}

func (x *TGetRebuildMetadataStatusRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TGetRebuildMetadataStatusRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

type TGetRebuildMetadataStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error    *protos1.TError           `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	Progress *TMetadataRebuildProgress `protobuf:"bytes,2,opt,name=Progress,proto3" json:"Progress,omitempty"`
	// Request traces.
	Trace *protos1.TTraceInfo `protobuf:"bytes,3,opt,name=Trace,proto3" json:"Trace,omitempty"`
}

func (x *TGetRebuildMetadataStatusResponse) Reset() {
	*x = TGetRebuildMetadataStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TGetRebuildMetadataStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TGetRebuildMetadataStatusResponse) ProtoMessage() {}

func (x *TGetRebuildMetadataStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TGetRebuildMetadataStatusResponse.ProtoReflect.Descriptor instead.
func (*TGetRebuildMetadataStatusResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{30}
}

func (x *TGetRebuildMetadataStatusResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TGetRebuildMetadataStatusResponse) GetProgress() *TMetadataRebuildProgress {
	if x != nil {
		return x.Progress
	}
	return nil
}

func (x *TGetRebuildMetadataStatusResponse) GetTrace() *protos1.TTraceInfo {
	if x != nil {
		return x.Trace
	}
	return nil
}

type TScanDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	// Number of blobs per batch.
	BatchSize uint32 `protobuf:"varint,3,opt,name=BatchSize,proto3" json:"BatchSize,omitempty"`
}

func (x *TScanDiskRequest) Reset() {
	*x = TScanDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TScanDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TScanDiskRequest) ProtoMessage() {}

func (x *TScanDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TScanDiskRequest.ProtoReflect.Descriptor instead.
func (*TScanDiskRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{31}
}

func (x *TScanDiskRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TScanDiskRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TScanDiskRequest) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

type TScanDiskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Request traces.
	Trace *protos1.TTraceInfo `protobuf:"bytes,2,opt,name=Trace,proto3" json:"Trace,omitempty"`
}

func (x *TScanDiskResponse) Reset() {
	*x = TScanDiskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TScanDiskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TScanDiskResponse) ProtoMessage() {}

func (x *TScanDiskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TScanDiskResponse.ProtoReflect.Descriptor instead.
func (*TScanDiskResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{32}
}

func (x *TScanDiskResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TScanDiskResponse) GetTrace() *protos1.TTraceInfo {
	if x != nil {
		return x.Trace
	}
	return nil
}

type TGetVolumeInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *protos.THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Label of volume.
	DiskId string `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
}

func (x *TGetVolumeInfoRequest) Reset() {
	*x = TGetVolumeInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TGetVolumeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TGetVolumeInfoRequest) ProtoMessage() {}

func (x *TGetVolumeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TGetVolumeInfoRequest.ProtoReflect.Descriptor instead.
func (*TGetVolumeInfoRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{33}
}

func (x *TGetVolumeInfoRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TGetVolumeInfoRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

type TGetVolumeInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos1.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Request traces.
	Trace  *protos1.TTraceInfo `protobuf:"bytes,2,opt,name=Trace,proto3" json:"Trace,omitempty"`
	Volume *protos.TVolume     `protobuf:"bytes,3,opt,name=Volume,proto3" json:"Volume,omitempty"`
}

func (x *TGetVolumeInfoResponse) Reset() {
	*x = TGetVolumeInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TGetVolumeInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TGetVolumeInfoResponse) ProtoMessage() {}

func (x *TGetVolumeInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TGetVolumeInfoResponse.ProtoReflect.Descriptor instead.
func (*TGetVolumeInfoResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{34}
}

func (x *TGetVolumeInfoResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TGetVolumeInfoResponse) GetTrace() *protos1.TTraceInfo {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *TGetVolumeInfoResponse) GetVolume() *protos.TVolume {
	if x != nil {
		return x.Volume
	}
	return nil
}

type TUpdateVolumeParamsMapValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string  `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	TtlMs *uint64 `protobuf:"varint,2,opt,name=TtlMs,proto3,oneof" json:"TtlMs,omitempty"`
}

func (x *TUpdateVolumeParamsMapValue) Reset() {
	*x = TUpdateVolumeParamsMapValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TUpdateVolumeParamsMapValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TUpdateVolumeParamsMapValue) ProtoMessage() {}

func (x *TUpdateVolumeParamsMapValue) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TUpdateVolumeParamsMapValue.ProtoReflect.Descriptor instead.
func (*TUpdateVolumeParamsMapValue) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{35}
}

func (x *TUpdateVolumeParamsMapValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TUpdateVolumeParamsMapValue) GetTtlMs() uint64 {
	if x != nil && x.TtlMs != nil {
		return *x.TtlMs
	}
	return 0
}

type TUpdateVolumeParamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headers      *protos.THeaders                        `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	DiskId       string                                  `protobuf:"bytes,2,opt,name=DiskId,proto3" json:"DiskId,omitempty"`
	VolumeParams map[string]*TUpdateVolumeParamsMapValue `protobuf:"bytes,3,rep,name=VolumeParams,proto3" json:"VolumeParams,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TUpdateVolumeParamsRequest) Reset() {
	*x = TUpdateVolumeParamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TUpdateVolumeParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TUpdateVolumeParamsRequest) ProtoMessage() {}

func (x *TUpdateVolumeParamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TUpdateVolumeParamsRequest.ProtoReflect.Descriptor instead.
func (*TUpdateVolumeParamsRequest) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{36}
}

func (x *TUpdateVolumeParamsRequest) GetHeaders() *protos.THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TUpdateVolumeParamsRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *TUpdateVolumeParamsRequest) GetVolumeParams() map[string]*TUpdateVolumeParamsMapValue {
	if x != nil {
		return x.VolumeParams
	}
	return nil
}

type TUpdateVolumeParamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *protos1.TError     `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	Trace *protos1.TTraceInfo `protobuf:"bytes,2,opt,name=Trace,proto3" json:"Trace,omitempty"`
}

func (x *TUpdateVolumeParamsResponse) Reset() {
	*x = TUpdateVolumeParamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TUpdateVolumeParamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TUpdateVolumeParamsResponse) ProtoMessage() {}

func (x *TUpdateVolumeParamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TUpdateVolumeParamsResponse.ProtoReflect.Descriptor instead.
func (*TUpdateVolumeParamsResponse) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP(), []int{37}
}

func (x *TUpdateVolumeParamsResponse) GetError() *protos1.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TUpdateVolumeParamsResponse) GetTrace() *protos1.TTraceInfo {
	if x != nil {
		return x.Trace
	}
	return nil
}

var File_cloud_blockstore_libs_storage_protos_volume_proto protoreflect.FileDescriptor

var file_cloud_blockstore_libs_storage_protos_volume_proto_rawDesc = []byte{
	0x0a, 0x31, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x19, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x25, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x25, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc2, 0x04, 0x0a, 0x11, 0x54, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x10, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x10, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x54, 0x68, 0x72,
	0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e,
	0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x4c, 0x61, 0x73, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a,
	0x0a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x46, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x46, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x46, 0x69, 0x6c,
	0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x04, 0x0a, 0x11,
	0x54, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x10, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x10, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x54, 0x68, 0x72,
	0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e,
	0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x71,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x46, 0x69,
	0x6c, 0x6c, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x46,
	0x69, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x46, 0x69, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x02, 0x0a, 0x12, 0x54, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x3a, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x16,
	0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x69, 0x70, 0x65, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x45, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x69, 0x70, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x91, 0x01, 0x0a, 0x14, 0x54, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x4d, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x4d, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x15, 0x54, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x44,
	0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x2f, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x22, 0x6a, 0x0a, 0x11, 0x54, 0x57, 0x61, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xae, 0x01, 0x0a,
	0x12, 0x54, 0x57, 0x61, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x3a, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x05,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x22, 0x6e, 0x0a,
	0x15, 0x54, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x40, 0x0a,
	0x0e, 0x54, 0x55, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1a, 0x0a, 0x08, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22,
	0xc1, 0x01, 0x0a, 0x16, 0x54, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x55, 0x73, 0x65, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x55, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x18, 0x54, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x19, 0x54, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2f,
	0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x22,
	0xe7, 0x01, 0x0a, 0x14, 0x54, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x15, 0x54, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x1b, 0x54, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x1c, 0x54, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x22, 0x6f, 0x0a, 0x16, 0x54, 0x52, 0x65, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x17, 0x54, 0x52, 0x65, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2f,
	0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x22,
	0xcb, 0x01, 0x0a, 0x18, 0x54, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x44,
	0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x55, 0x73, 0x65, 0x64, 0x22, 0x79, 0x0a,
	0x19, 0x54, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x22, 0xa8, 0x04, 0x0a, 0x10, 0x54, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x72, 0x65, 0x73, 0x68, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x46, 0x72,
	0x65, 0x73, 0x68, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x43, 0x6c,
	0x65, 0x61, 0x6e, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x11, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x47, 0x61, 0x72, 0x62,
	0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x12, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x34, 0x0a,
	0x15, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xfc, 0x03, 0x0a, 0x18, 0x54, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x70, 0x75, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x70, 0x75,
	0x12, 0x18, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x43, 0x70, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x43, 0x70, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x13, 0x49, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x50, 0x72, 0x65, 0x65,
	0x6d, 0x70, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x49, 0x73, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x49, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x58, 0x0a, 0x10, 0x50, 0x72,
	0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x10, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4e, 0x75, 0x6d, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x4e, 0x75, 0x6d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x4e, 0x75, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x69,
	0x6e, 0x64, 0x22, 0x72, 0x0a, 0x19, 0x54, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x4c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x1a, 0x54, 0x47, 0x65, 0x74, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x49, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2f, 0x0a,
	0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x22, 0x99,
	0x01, 0x0a, 0x1c, 0x54, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x1d, 0x54, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x22, 0xe3, 0x01, 0x0a, 0x17, 0x54, 0x52,
	0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0c,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x78, 0x0a, 0x18, 0x54, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x22, 0x70, 0x0a, 0x18, 0x54, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x49, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x79, 0x0a, 0x20, 0x54,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xd2, 0x01, 0x0a, 0x21, 0x54, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x10,
	0x54, 0x53, 0x63, 0x61, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x71, 0x0a, 0x11, 0x54, 0x53, 0x63, 0x61, 0x6e, 0x44, 0x69,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x22, 0x6e, 0x0a, 0x15, 0x54, 0x47, 0x65, 0x74,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x16, 0x54, 0x47, 0x65,
	0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x2f, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x12, 0x3a, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x58, 0x0a,
	0x1b, 0x54, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x54, 0x74, 0x6c, 0x4d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x05, 0x54, 0x74, 0x6c, 0x4d, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x54, 0x74, 0x6c, 0x4d, 0x73, 0x22, 0xd9, 0x02, 0x0a, 0x1a, 0x54, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x6b, 0x0a,
	0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x77, 0x0a, 0x11, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x7b, 0x0a, 0x1b, 0x54, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x2f, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x2a, 0x4c, 0x0a, 0x0e, 0x45, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x02, 0x2a, 0x66,
	0x0a, 0x11, 0x45, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x42, 0x41,
	0x4c, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x4d, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x4e,
	0x55, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x2a, 0x38, 0x0a, 0x14, 0x45, 0x52, 0x65, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x53, 0x45, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01,
	0x42, 0x37, 0x5a, 0x35, 0x61, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x72, 0x75, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescOnce sync.Once
	file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescData = file_cloud_blockstore_libs_storage_protos_volume_proto_rawDesc
)

func file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescGZIP() []byte {
	file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescOnce.Do(func() {
		file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescData)
	})
	return file_cloud_blockstore_libs_storage_protos_volume_proto_rawDescData
}

var file_cloud_blockstore_libs_storage_protos_volume_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_cloud_blockstore_libs_storage_protos_volume_proto_goTypes = []interface{}{
	(EVolumeBinding)(0),                       // 0: NCloud.NBlockStore.NProto.EVolumeBinding
	(EPreemptionSource)(0),                    // 1: NCloud.NBlockStore.NProto.EPreemptionSource
	(ERebuildMetadataType)(0),                 // 2: NCloud.NBlockStore.NProto.ERebuildMetadataType
	(*TVolumeClientInfo)(nil),                 // 3: NCloud.NBlockStore.NProto.TVolumeClientInfo
	(*TAddClientRequest)(nil),                 // 4: NCloud.NBlockStore.NProto.TAddClientRequest
	(*TAddClientResponse)(nil),                // 5: NCloud.NBlockStore.NProto.TAddClientResponse
	(*TRemoveClientRequest)(nil),              // 6: NCloud.NBlockStore.NProto.TRemoveClientRequest
	(*TRemoveClientResponse)(nil),             // 7: NCloud.NBlockStore.NProto.TRemoveClientResponse
	(*TWaitReadyRequest)(nil),                 // 8: NCloud.NBlockStore.NProto.TWaitReadyRequest
	(*TWaitReadyResponse)(nil),                // 9: NCloud.NBlockStore.NProto.TWaitReadyResponse
	(*TGetUsedBlocksRequest)(nil),             // 10: NCloud.NBlockStore.NProto.TGetUsedBlocksRequest
	(*TUsedBlockData)(nil),                    // 11: NCloud.NBlockStore.NProto.TUsedBlockData
	(*TGetUsedBlocksResponse)(nil),            // 12: NCloud.NBlockStore.NProto.TGetUsedBlocksResponse
	(*TGetPartitionInfoRequest)(nil),          // 13: NCloud.NBlockStore.NProto.TGetPartitionInfoRequest
	(*TGetPartitionInfoResponse)(nil),         // 14: NCloud.NBlockStore.NProto.TGetPartitionInfoResponse
	(*TCompactRangeRequest)(nil),              // 15: NCloud.NBlockStore.NProto.TCompactRangeRequest
	(*TCompactRangeResponse)(nil),             // 16: NCloud.NBlockStore.NProto.TCompactRangeResponse
	(*TGetCompactionStatusRequest)(nil),       // 17: NCloud.NBlockStore.NProto.TGetCompactionStatusRequest
	(*TGetCompactionStatusResponse)(nil),      // 18: NCloud.NBlockStore.NProto.TGetCompactionStatusResponse
	(*TReallocateDiskRequest)(nil),            // 19: NCloud.NBlockStore.NProto.TReallocateDiskRequest
	(*TReallocateDiskResponse)(nil),           // 20: NCloud.NBlockStore.NProto.TReallocateDiskResponse
	(*TUpdateUsedBlocksRequest)(nil),          // 21: NCloud.NBlockStore.NProto.TUpdateUsedBlocksRequest
	(*TUpdateUsedBlocksResponse)(nil),         // 22: NCloud.NBlockStore.NProto.TUpdateUsedBlocksResponse
	(*TCachedPartStats)(nil),                  // 23: NCloud.NBlockStore.NProto.TCachedPartStats
	(*TVolumeBalancerDiskStats)(nil),          // 24: NCloud.NBlockStore.NProto.TVolumeBalancerDiskStats
	(*TGetVolumeLoadInfoRequest)(nil),         // 25: NCloud.NBlockStore.NProto.TGetVolumeLoadInfoRequest
	(*TGetVolumeLoadInfoResponse)(nil),        // 26: NCloud.NBlockStore.NProto.TGetVolumeLoadInfoResponse
	(*TDeleteCheckpointDataRequest)(nil),      // 27: NCloud.NBlockStore.NProto.TDeleteCheckpointDataRequest
	(*TDeleteCheckpointDataResponse)(nil),     // 28: NCloud.NBlockStore.NProto.TDeleteCheckpointDataResponse
	(*TRebuildMetadataRequest)(nil),           // 29: NCloud.NBlockStore.NProto.TRebuildMetadataRequest
	(*TRebuildMetadataResponse)(nil),          // 30: NCloud.NBlockStore.NProto.TRebuildMetadataResponse
	(*TMetadataRebuildProgress)(nil),          // 31: NCloud.NBlockStore.NProto.TMetadataRebuildProgress
	(*TGetRebuildMetadataStatusRequest)(nil),  // 32: NCloud.NBlockStore.NProto.TGetRebuildMetadataStatusRequest
	(*TGetRebuildMetadataStatusResponse)(nil), // 33: NCloud.NBlockStore.NProto.TGetRebuildMetadataStatusResponse
	(*TScanDiskRequest)(nil),                  // 34: NCloud.NBlockStore.NProto.TScanDiskRequest
	(*TScanDiskResponse)(nil),                 // 35: NCloud.NBlockStore.NProto.TScanDiskResponse
	(*TGetVolumeInfoRequest)(nil),             // 36: NCloud.NBlockStore.NProto.TGetVolumeInfoRequest
	(*TGetVolumeInfoResponse)(nil),            // 37: NCloud.NBlockStore.NProto.TGetVolumeInfoResponse
	(*TUpdateVolumeParamsMapValue)(nil),       // 38: NCloud.NBlockStore.NProto.TUpdateVolumeParamsMapValue
	(*TUpdateVolumeParamsRequest)(nil),        // 39: NCloud.NBlockStore.NProto.TUpdateVolumeParamsRequest
	(*TUpdateVolumeParamsResponse)(nil),       // 40: NCloud.NBlockStore.NProto.TUpdateVolumeParamsResponse
	nil,                                       // 41: NCloud.NBlockStore.NProto.TUpdateVolumeParamsRequest.VolumeParamsEntry
	(protos.EVolumeAccessMode)(0),             // 42: NCloud.NBlockStore.NProto.EVolumeAccessMode
	(protos.EVolumeMountMode)(0),              // 43: NCloud.NBlockStore.NProto.EVolumeMountMode
	(*protos.THeaders)(nil),                   // 44: NCloud.NBlockStore.NProto.THeaders
	(*protos1.TError)(nil),                    // 45: NCloud.NProto.TError
	(*protos.TVolume)(nil),                    // 46: NCloud.NBlockStore.NProto.TVolume
	(*protos1.TTraceInfo)(nil),                // 47: NCloud.NProto.TTraceInfo
	(protos1.EStorageMediaKind)(0),            // 48: NCloud.NProto.EStorageMediaKind
}
var file_cloud_blockstore_libs_storage_protos_volume_proto_depIdxs = []int32{
	42, // 0: NCloud.NBlockStore.NProto.TVolumeClientInfo.VolumeAccessMode:type_name -> NCloud.NBlockStore.NProto.EVolumeAccessMode
	43, // 1: NCloud.NBlockStore.NProto.TVolumeClientInfo.VolumeMountMode:type_name -> NCloud.NBlockStore.NProto.EVolumeMountMode
	44, // 2: NCloud.NBlockStore.NProto.TAddClientRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	42, // 3: NCloud.NBlockStore.NProto.TAddClientRequest.VolumeAccessMode:type_name -> NCloud.NBlockStore.NProto.EVolumeAccessMode
	43, // 4: NCloud.NBlockStore.NProto.TAddClientRequest.VolumeMountMode:type_name -> NCloud.NBlockStore.NProto.EVolumeMountMode
	45, // 5: NCloud.NBlockStore.NProto.TAddClientResponse.Error:type_name -> NCloud.NProto.TError
	46, // 6: NCloud.NBlockStore.NProto.TAddClientResponse.Volume:type_name -> NCloud.NBlockStore.NProto.TVolume
	47, // 7: NCloud.NBlockStore.NProto.TAddClientResponse.Trace:type_name -> NCloud.NProto.TTraceInfo
	44, // 8: NCloud.NBlockStore.NProto.TRemoveClientRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	45, // 9: NCloud.NBlockStore.NProto.TRemoveClientResponse.Error:type_name -> NCloud.NProto.TError
	47, // 10: NCloud.NBlockStore.NProto.TRemoveClientResponse.Trace:type_name -> NCloud.NProto.TTraceInfo
	44, // 11: NCloud.NBlockStore.NProto.TWaitReadyRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	45, // 12: NCloud.NBlockStore.NProto.TWaitReadyResponse.Error:type_name -> NCloud.NProto.TError
	46, // 13: NCloud.NBlockStore.NProto.TWaitReadyResponse.Volume:type_name -> NCloud.NBlockStore.NProto.TVolume
	47, // 14: NCloud.NBlockStore.NProto.TWaitReadyResponse.Trace:type_name -> NCloud.NProto.TTraceInfo
	44, // 15: NCloud.NBlockStore.NProto.TGetUsedBlocksRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	45, // 16: NCloud.NBlockStore.NProto.TGetUsedBlocksResponse.Error:type_name -> NCloud.NProto.TError
	47, // 17: NCloud.NBlockStore.NProto.TGetUsedBlocksResponse.Trace:type_name -> NCloud.NProto.TTraceInfo
	11, // 18: NCloud.NBlockStore.NProto.TGetUsedBlocksResponse.UsedBlocks:type_name -> NCloud.NBlockStore.NProto.TUsedBlockData
	44, // 19: NCloud.NBlockStore.NProto.TGetPartitionInfoRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	45, // 20: NCloud.NBlockStore.NProto.TGetPartitionInfoResponse.Error:type_name -> NCloud.NProto.TError
	47, // 21: NCloud.NBlockStore.NProto.TGetPartitionInfoResponse.Trace:type_name -> NCloud.NProto.TTraceInfo
	44, // 22: NCloud.NBlockStore.NProto.TCompactRangeRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	45, // 23: NCloud.NBlockStore.NProto.TCompactRangeResponse.Error:type_name -> NCloud.NProto.TError
	47, // 24: NCloud.NBlockStore.NProto.TCompactRangeResponse.Trace:type_name -> NCloud.NProto.TTraceInfo
	44, // 25: NCloud.NBlockStore.NProto.TGetCompactionStatusRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	45, // 26: NCloud.NBlockStore.NProto.TGetCompactionStatusResponse.Error:type_name -> NCloud.NProto.TError
	47, // 27: NCloud.NBlockStore.NProto.TGetCompactionStatusResponse.Trace:type_name -> NCloud.NProto.TTraceInfo
	44, // 28: NCloud.NBlockStore.NProto.TReallocateDiskRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	45, // 29: NCloud.NBlockStore.NProto.TReallocateDiskResponse.Error:type_name -> NCloud.NProto.TError
	47, // 30: NCloud.NBlockStore.NProto.TReallocateDiskResponse.Trace:type_name -> NCloud.NProto.TTraceInfo
	44, // 31: NCloud.NBlockStore.NProto.TUpdateUsedBlocksRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	45, // 32: NCloud.NBlockStore.NProto.TUpdateUsedBlocksResponse.Error:type_name -> NCloud.NProto.TError
	47, // 33: NCloud.NBlockStore.NProto.TUpdateUsedBlocksResponse.Trace:type_name -> NCloud.NProto.TTraceInfo
	1,  // 34: NCloud.NBlockStore.NProto.TVolumeBalancerDiskStats.PreemptionSource:type_name -> NCloud.NBlockStore.NProto.EPreemptionSource
	48, // 35: NCloud.NBlockStore.NProto.TVolumeBalancerDiskStats.StorageMediaKind:type_name -> NCloud.NProto.EStorageMediaKind
	44, // 36: NCloud.NBlockStore.NProto.TGetVolumeLoadInfoRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	45, // 37: NCloud.NBlockStore.NProto.TGetVolumeLoadInfoResponse.Error:type_name -> NCloud.NProto.TError
	24, // 38: NCloud.NBlockStore.NProto.TGetVolumeLoadInfoResponse.Stats:type_name -> NCloud.NBlockStore.NProto.TVolumeBalancerDiskStats
	47, // 39: NCloud.NBlockStore.NProto.TGetVolumeLoadInfoResponse.Trace:type_name -> NCloud.NProto.TTraceInfo
	44, // 40: NCloud.NBlockStore.NProto.TDeleteCheckpointDataRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	45, // 41: NCloud.NBlockStore.NProto.TDeleteCheckpointDataResponse.Error:type_name -> NCloud.NProto.TError
	47, // 42: NCloud.NBlockStore.NProto.TDeleteCheckpointDataResponse.Trace:type_name -> NCloud.NProto.TTraceInfo
	44, // 43: NCloud.NBlockStore.NProto.TRebuildMetadataRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	2,  // 44: NCloud.NBlockStore.NProto.TRebuildMetadataRequest.MetadataType:type_name -> NCloud.NBlockStore.NProto.ERebuildMetadataType
	45, // 45: NCloud.NBlockStore.NProto.TRebuildMetadataResponse.Error:type_name -> NCloud.NProto.TError
	47, // 46: NCloud.NBlockStore.NProto.TRebuildMetadataResponse.Trace:type_name -> NCloud.NProto.TTraceInfo
	44, // 47: NCloud.NBlockStore.NProto.TGetRebuildMetadataStatusRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	45, // 48: NCloud.NBlockStore.NProto.TGetRebuildMetadataStatusResponse.Error:type_name -> NCloud.NProto.TError
	31, // 49: NCloud.NBlockStore.NProto.TGetRebuildMetadataStatusResponse.Progress:type_name -> NCloud.NBlockStore.NProto.TMetadataRebuildProgress
	47, // 50: NCloud.NBlockStore.NProto.TGetRebuildMetadataStatusResponse.Trace:type_name -> NCloud.NProto.TTraceInfo
	44, // 51: NCloud.NBlockStore.NProto.TScanDiskRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	45, // 52: NCloud.NBlockStore.NProto.TScanDiskResponse.Error:type_name -> NCloud.NProto.TError
	47, // 53: NCloud.NBlockStore.NProto.TScanDiskResponse.Trace:type_name -> NCloud.NProto.TTraceInfo
	44, // 54: NCloud.NBlockStore.NProto.TGetVolumeInfoRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	45, // 55: NCloud.NBlockStore.NProto.TGetVolumeInfoResponse.Error:type_name -> NCloud.NProto.TError
	47, // 56: NCloud.NBlockStore.NProto.TGetVolumeInfoResponse.Trace:type_name -> NCloud.NProto.TTraceInfo
	46, // 57: NCloud.NBlockStore.NProto.TGetVolumeInfoResponse.Volume:type_name -> NCloud.NBlockStore.NProto.TVolume
	44, // 58: NCloud.NBlockStore.NProto.TUpdateVolumeParamsRequest.Headers:type_name -> NCloud.NBlockStore.NProto.THeaders
	41, // 59: NCloud.NBlockStore.NProto.TUpdateVolumeParamsRequest.VolumeParams:type_name -> NCloud.NBlockStore.NProto.TUpdateVolumeParamsRequest.VolumeParamsEntry
	45, // 60: NCloud.NBlockStore.NProto.TUpdateVolumeParamsResponse.Error:type_name -> NCloud.NProto.TError
	47, // 61: NCloud.NBlockStore.NProto.TUpdateVolumeParamsResponse.Trace:type_name -> NCloud.NProto.TTraceInfo
	38, // 62: NCloud.NBlockStore.NProto.TUpdateVolumeParamsRequest.VolumeParamsEntry.value:type_name -> NCloud.NBlockStore.NProto.TUpdateVolumeParamsMapValue
	63, // [63:63] is the sub-list for method output_type
	63, // [63:63] is the sub-list for method input_type
	63, // [63:63] is the sub-list for extension type_name
	63, // [63:63] is the sub-list for extension extendee
	0,  // [0:63] is the sub-list for field type_name
}

func init() { file_cloud_blockstore_libs_storage_protos_volume_proto_init() }
func file_cloud_blockstore_libs_storage_protos_volume_proto_init() {
	if File_cloud_blockstore_libs_storage_protos_volume_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TVolumeClientInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAddClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAddClientResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TRemoveClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TRemoveClientResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TWaitReadyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TWaitReadyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TGetUsedBlocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TUsedBlockData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TGetUsedBlocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TGetPartitionInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TGetPartitionInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCompactRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCompactRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TGetCompactionStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TGetCompactionStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TReallocateDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TReallocateDiskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TUpdateUsedBlocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TUpdateUsedBlocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCachedPartStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TVolumeBalancerDiskStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TGetVolumeLoadInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TGetVolumeLoadInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDeleteCheckpointDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDeleteCheckpointDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TRebuildMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TRebuildMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TMetadataRebuildProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TGetRebuildMetadataStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TGetRebuildMetadataStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TScanDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TScanDiskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TGetVolumeInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TGetVolumeInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TUpdateVolumeParamsMapValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TUpdateVolumeParamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TUpdateVolumeParamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes[35].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_blockstore_libs_storage_protos_volume_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_blockstore_libs_storage_protos_volume_proto_goTypes,
		DependencyIndexes: file_cloud_blockstore_libs_storage_protos_volume_proto_depIdxs,
		EnumInfos:         file_cloud_blockstore_libs_storage_protos_volume_proto_enumTypes,
		MessageInfos:      file_cloud_blockstore_libs_storage_protos_volume_proto_msgTypes,
	}.Build()
	File_cloud_blockstore_libs_storage_protos_volume_proto = out.File
	file_cloud_blockstore_libs_storage_protos_volume_proto_rawDesc = nil
	file_cloud_blockstore_libs_storage_protos_volume_proto_goTypes = nil
	file_cloud_blockstore_libs_storage_protos_volume_proto_depIdxs = nil
}
