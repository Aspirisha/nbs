#pragma once

#include "key.h"
#include "label.h"
#include "registry.h"

#include <util/generic/hash.h>
#include <util/system/spinlock.h>

#include <array>

namespace NCloud::NFileStore::NMetrics {

////////////////////////////////////////////////////////////////////////////////
//
// TO ADD NEW HISTOGRAM UNIT YOU MUST:
//  - add new value in EHistUnit enum;
//  - define specialization for GetUnitValue functions (see below);
//  - define specialization for GetUnitSuffix function (see below);
//
// TO ADD NEW HISTOGRAM RANGE YOU MUST:
//  - add new histogram unit (see instruction above);
//  - add macro HIST_RANGES_*;
//  - attach range to new EHistUnit value by definition of
//    TRangeTraits struct specialization using RANGE_TRAITS macro.
//
// Possible histogram units and ranges.
// NOTE: using TRangeTraits template to access ranges.
// NOTE: ranges are attached to specific EHistUnit value.

enum class EHistUnit : ui16
{
    HU_COUNT,

    HU_TIME_MICROSECONDS,
    HU_TIME_MILLISECONDS,
    HU_TIME_SECONDS,

    HU_SIZE_BYTES,
    HU_SIZE_KIBYTES,
    HU_SIZE_MIBYTES,
};

namespace NImpl {

////////////////////////////////////////////////////////////////////////////////

// Histogram range bucket description.
// NOTE: generated by DECLARE_HIST_RANGE_DESC macro.
struct THistRange
{
    const TString Name;
    const i64 Value;
};

////////////////////////////////////////////////////////////////////////////////
//
// Histogram ranges.

// Default histogram range.
#define HIST_RANGES(BUCKET, LAST_BUCKET)                                       \
    BUCKET(1)                                                                  \
    BUCKET(2)                                                                  \
    BUCKET(5)                                                                  \
    BUCKET(10)                                                                 \
    BUCKET(20)                                                                 \
    BUCKET(50)                                                                 \
    BUCKET(100)                                                                \
    BUCKET(200)                                                                \
    BUCKET(500)                                                                \
    BUCKET(1000)                                                               \
    BUCKET(2000)                                                               \
    BUCKET(5000)                                                               \
    BUCKET(10000)                                                              \
    LAST_BUCKET(35000)                                                         \
// HIST_RANGES

// Special histogram range for microseconds.
#define HIST_RANGES_MICROSECONDS(BUCKET, LAST_BUCKET)                          \
    BUCKET(1)                                                                  \
    BUCKET(100)                                                                \
    BUCKET(200)                                                                \
    BUCKET(300)                                                                \
    BUCKET(400)                                                                \
    BUCKET(500)                                                                \
    BUCKET(600)                                                                \
    BUCKET(700)                                                                \
    BUCKET(800)                                                                \
    BUCKET(900)                                                                \
    BUCKET(1000)                                                               \
    BUCKET(2000)                                                               \
    BUCKET(5000)                                                               \
    BUCKET(10000)                                                              \
    BUCKET(20000)                                                              \
    BUCKET(50000)                                                              \
    BUCKET(100000)                                                             \
    BUCKET(200000)                                                             \
    BUCKET(500000)                                                             \
    BUCKET(1000000)                                                            \
    BUCKET(2000000)                                                            \
    BUCKET(5000000)                                                            \
    BUCKET(10000000)                                                           \
    LAST_BUCKET(35000000)                                                      \
// HIST_RANGES_MICROSECONDS

// Special histogram range for milliseconds.
#define HIST_RANGES_MILLISECONDS(BUCKET, LAST_BUCKET)                          \
    BUCKET(100)                                                                \
    BUCKET(200)                                                                \
    BUCKET(300)                                                                \
    BUCKET(400)                                                                \
    BUCKET(500)                                                                \
    BUCKET(600)                                                                \
    BUCKET(700)                                                                \
    BUCKET(800)                                                                \
    BUCKET(900)                                                                \
    BUCKET(1000)                                                               \
    BUCKET(2000)                                                               \
    BUCKET(5000)                                                               \
    BUCKET(10000)                                                              \
    BUCKET(20000)                                                              \
    LAST_BUCKET(35000)                                                         \
// HIST_RANGES_MILLISECONDS

// Special histogram range for seconds.
#define HIST_RANGES_SECONDS(BUCKET, LAST_BUCKET)                               \
    BUCKET(1)                                                                  \
    BUCKET(2)                                                                  \
    BUCKET(3)                                                                  \
    BUCKET(4)                                                                  \
    BUCKET(5)                                                                  \
    BUCKET(6)                                                                  \
    BUCKET(7)                                                                  \
    BUCKET(8)                                                                  \
    BUCKET(9)                                                                  \
    BUCKET(10)                                                                 \
    BUCKET(15)                                                                 \
    BUCKET(20)                                                                 \
    BUCKET(25)                                                                 \
    BUCKET(30)                                                                 \
    LAST_BUCKET(35)                                                            \
// HIST_RANGES_SECONDS

// Special histogram range for B.
#define HIST_RANGES_BYTES(BUCKET, LAST_BUCKET)                                 \
    BUCKET(16)                                                                 \
    BUCKET(32)                                                                 \
    BUCKET(64)                                                                 \
    BUCKET(128)                                                                \
    BUCKET(256)                                                                \
    BUCKET(512)                                                                \
    BUCKET(1024)                                                               \
    BUCKET(2048)                                                               \
    BUCKET(4096)                                                               \
    BUCKET(8192)                                                               \
    BUCKET(16384)                                                              \
    BUCKET(32768)                                                              \
    BUCKET(65536)                                                              \
    BUCKET(131072)                                                             \
    BUCKET(262141)                                                             \
    BUCKET(524288)                                                             \
    LAST_BUCKET(1048576)                                                       \
// HIST_RANGES_BYTES

// Special histogram range for KiB.
#define HIST_RANGES_KIBYTES(BUCKET, LAST_BUCKET)                               \
    BUCKET(1)                                                                  \
    BUCKET(2)                                                                  \
    BUCKET(4)                                                                  \
    BUCKET(8)                                                                  \
    BUCKET(16)                                                                 \
    BUCKET(32)                                                                 \
    BUCKET(64)                                                                 \
    BUCKET(128)                                                                \
    BUCKET(256)                                                                \
    BUCKET(512)                                                                \
    BUCKET(1024)                                                               \
    BUCKET(2048)                                                               \
    BUCKET(4096)                                                               \
    BUCKET(8192)                                                               \
    BUCKET(16384)                                                              \
    BUCKET(32768)                                                              \
    LAST_BUCKET(65536)                                                         \
// HIST_RANGES_KIBYTES

// Special histogram range for MiB.
#define HIST_RANGES_MIBYTES(BUCKET, LAST_BUCKET)                               \
    BUCKET(1)                                                                  \
    BUCKET(2)                                                                  \
    BUCKET(4)                                                                  \
    BUCKET(8)                                                                  \
    BUCKET(16)                                                                 \
    BUCKET(32)                                                                 \
    LAST_BUCKET(64)                                                            \
// HIST_RANGES_MIBYTES

////////////////////////////////////////////////////////////////////////////////
//
// Macros for generating body of TRangeTraits struct.

#define DECLARE_HIST_RANGE_ENUM(value)                                         \
    HIST_##value,                                                              \
// DECLARE_HIST_RANGE_ENUM

#define DECLARE_HIST_RANGE_DESC(value)                                         \
    THistRange{ .Name = #value, .Value = value },                              \
// DECLARE_HIST_RANGE_DESC

#define DECLARE_HIST_RANGE_DESC_EAT(value)                                     \
// DECLARE_HIST_RANGE_DESC_EAT

#define DECLARE_HIST_RANGE_DESC_MAX(value)                                     \
    THistRange{ .Name = ">" #value, .Value = Max<i64>() }                      \
// DECLARE_HIST_RANGE_DESC_MAX

#define DEFINE_HIST_RANGES(HIST_RANGES_MACRO)                                  \
    enum EHistRange : ui32                                                     \
    {                                                                          \
        HIST_RANGES_MACRO(DECLARE_HIST_RANGE_ENUM, DECLARE_HIST_RANGE_ENUM)    \
        HIST_MAX,                                                              \
    };                                                                         \
                                                                               \
    static const THistRange& GetHistRanges(ui32 range)                         \
    {                                                                          \
        static const std::array<THistRange, HIST_MAX + 1> HistRanges = {       \
            HIST_RANGES_MACRO(                                                 \
                DECLARE_HIST_RANGE_DESC,                                       \
                DECLARE_HIST_RANGE_DESC)                                       \
            HIST_RANGES_MACRO(                                                 \
                DECLARE_HIST_RANGE_DESC_EAT,                                   \
                DECLARE_HIST_RANGE_DESC_MAX)                                   \
        };                                                                     \
        return HistRanges[range];                                              \
    }                                                                          \
// DEFINE_HIST_RANGES

////////////////////////////////////////////////////////////////////////////////
//
// Histograms definitions.

// Default histograms use ranges from HIST_RANGES.[
template <EHistUnit Unit>
struct TRangeTraits
{
    DEFINE_HIST_RANGES(HIST_RANGES)
};

// Declares TRangeTraits struct specialization.
#define RANGE_TRAITS(unit, HIST_RANGES_MACRO)                                  \
    template <>                                                                \
    struct TRangeTraits<unit>                                                  \
    {                                                                          \
        DEFINE_HIST_RANGES(HIST_RANGES_MACRO)                                  \
    };                                                                         \
// RANGE_TRAITS

// All special histogram ranges must be defined here using RANGE_TRAITS.
RANGE_TRAITS(EHistUnit::HU_TIME_MICROSECONDS, HIST_RANGES_MICROSECONDS)
RANGE_TRAITS(EHistUnit::HU_TIME_MILLISECONDS, HIST_RANGES_MILLISECONDS)
RANGE_TRAITS(EHistUnit::HU_TIME_SECONDS, HIST_RANGES_SECONDS)
RANGE_TRAITS(EHistUnit::HU_SIZE_BYTES, HIST_RANGES_BYTES)
RANGE_TRAITS(EHistUnit::HU_SIZE_KIBYTES, HIST_RANGES_KIBYTES)
RANGE_TRAITS(EHistUnit::HU_SIZE_MIBYTES, HIST_RANGES_MIBYTES)

#undef RANGE_TRAITS
#undef DEFINE_HIST_RANGES
#undef DECLARE_HIST_RANGE_MAX
#undef DECLARE_HIST_RANGE_EAT
#undef DECLARE_HIST_RANGE_DESC
#undef DECLARE_HIST_RANGE_ENUM
#undef HIST_RANGES_MIBYTES
#undef HIST_RANGES_KIBYTES
#undef HIST_RANGES_BYTES
#undef HIST_RANGES_SECONDS
#undef HIST_RANGES_MILLISECONDS
#undef HIST_RANGES_MICROSECONDS
#undef HIST_RANGES

////////////////////////////////////////////////////////////////////////////////

template <EHistUnit Unit>
const TString& GetHistRangeName(ui32 range)
{
    Y_ABORT_UNLESS(range <= TRangeTraits<Unit>::HIST_MAX);
    return TRangeTraits<Unit>::GetHistRanges(range).Name;
}

template <EHistUnit Unit>
i64 GetHistRangeValue(ui32 range)
{
    Y_ABORT_UNLESS(range <= TRangeTraits<Unit>::HIST_MAX);
    return TRangeTraits<Unit>::GetHistRanges(range).Value;
}

template <EHistUnit Unit>
typename TRangeTraits<Unit>::EHistRange GetHistRange(i64 value)
{
    auto result = TRangeTraits<Unit>::HIST_MAX;
    for (ui32 i = 0; i < TRangeTraits<Unit>::HIST_MAX; ++i) {
        if (value <= TRangeTraits<Unit>::GetHistRanges(i).Value) {
            result = static_cast<typename TRangeTraits<Unit>::EHistRange>(i);
            break;
        }
    }
    return result;
}

////////////////////////////////////////////////////////////////////////////////

template <EHistUnit Unit>
i64 GetUnitValue(TDuration duration);

template <>
inline i64 GetUnitValue<EHistUnit::HU_TIME_MICROSECONDS>(TDuration duration)
{
    return duration.MicroSeconds();
}

template <>
inline i64 GetUnitValue<EHistUnit::HU_TIME_MILLISECONDS>(TDuration duration)
{
    return duration.MilliSeconds();
}

template <>
inline i64 GetUnitValue<EHistUnit::HU_TIME_SECONDS>(TDuration duration)
{
    return duration.Seconds();
}

////////////////////////////////////////////////////////////////////////////////

template <EHistUnit Unit>
i64 GetUnitValue(ui64 value);

template <>
inline i64 GetUnitValue<EHistUnit::HU_COUNT>(ui64 count)
{
    return count;
}

template <>
inline i64 GetUnitValue<EHistUnit::HU_TIME_MICROSECONDS>(ui64 elapsedUs)
{
    return elapsedUs;
}

template <>
inline i64 GetUnitValue<EHistUnit::HU_TIME_MILLISECONDS>(ui64 elapsedUs)
{
    return elapsedUs / 1'000;
}

template <>
inline i64 GetUnitValue<EHistUnit::HU_TIME_SECONDS>(ui64 elapsedUs)
{
    return elapsedUs / 1'000'000;
}

template <>
inline i64 GetUnitValue<EHistUnit::HU_SIZE_BYTES>(ui64 bytes)
{
    return bytes;
}

template <>
inline i64 GetUnitValue<EHistUnit::HU_SIZE_KIBYTES>(ui64 bytes)
{
    return bytes >> 10;
}

template <>
inline i64 GetUnitValue<EHistUnit::HU_SIZE_MIBYTES>(ui64 bytes)
{
    return bytes >> 20;
}

////////////////////////////////////////////////////////////////////////////////

template <EHistUnit Unit>
TString GetUnitSuffix();

template <>
inline TString GetUnitSuffix<EHistUnit::HU_COUNT>()
{
    return "";
}

template <>
inline TString GetUnitSuffix<EHistUnit::HU_TIME_MICROSECONDS>()
{
    return "us";
}

template <>
inline TString GetUnitSuffix<EHistUnit::HU_TIME_MILLISECONDS>()
{
    return "ms";
}

template <>
inline TString GetUnitSuffix<EHistUnit::HU_TIME_SECONDS>()
{
    return "s";
}

template <>
inline TString GetUnitSuffix<EHistUnit::HU_SIZE_BYTES>()
{
    return "B";
}

template <>
inline TString GetUnitSuffix<EHistUnit::HU_SIZE_KIBYTES>()
{
    return "KiB";
}

template <>
inline TString GetUnitSuffix<EHistUnit::HU_SIZE_MIBYTES>()
{
    return "MiB";
}

}   // namespace NImpl

////////////////////////////////////////////////////////////////////////////////

template <EHistUnit Unit>
class THistogram
    : private TMetricNextFreeKey
{
    using TMetricsRegistriesMap = THashMap<TMetricKey, IMetricsRegistryPtr>;

private:
    std::array<std::atomic<i64>, NImpl::TRangeTraits<Unit>::HIST_MAX + 1> Hist{0};

    TMetricsRegistriesMap Registries;
    TAdaptiveLock RegistriesLock;

public:
    template <typename T>
    void Record(T value, ui32 count = 1)
    {
        ui32 range = NImpl::GetHistRange<Unit>(NImpl::GetUnitValue<Unit>(value));
        Hist[range].fetch_add(count, std::memory_order_relaxed);
    }

    TMetricKey Register(
        IMetricsRegistryPtr registry,
        TLabels labels,
        EAggregationType aggrType = EAggregationType::AT_SUM)
    {
        IMetricsRegistryPtr scoped =
            CreateScopedMetricsRegistry(std::move(labels), std::move(registry));

        const TString suffix = NImpl::GetUnitSuffix<Unit>();
        for (ui32 i = 0; i <= NImpl::TRangeTraits<Unit>::HIST_MAX; ++i) {
            scoped->Register(
                {CreateSensor(NImpl::GetHistRangeName<Unit>(i) + suffix)},
                Hist[i],
                aggrType,
                EMetricType::MT_DERIVATIVE);
        }

        const auto _ = Guard(RegistriesLock);

        const TMetricKey key(this, GenerateNextFreeKey());

        const bool inserted =
            Registries.try_emplace(key, std::move(scoped)).second;
        Y_ABORT_UNLESS(inserted);

        return key;
    }

    void Unregister(const TMetricKey& key)
    {
        const auto _ = Guard(RegistriesLock);
        Registries.erase(key);
    }
};

}   // namespace NCloud::NFileStore::NMetrics
